// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe_low_precision.proto

#ifndef PROTOBUF_caffe_5flow_5fprecision_2eproto__INCLUDED
#define PROTOBUF_caffe_5flow_5fprecision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_caffe_5flow_5fprecision_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[105];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBlobShapeImpl();
void InitDefaultsBlobShape();
void InitDefaultsBlobProtoImpl();
void InitDefaultsBlobProto();
void InitDefaultsBlobProtoVectorImpl();
void InitDefaultsBlobProtoVector();
void InitDefaultsDatumImpl();
void InitDefaultsDatum();
void InitDefaultsFillerParameterImpl();
void InitDefaultsFillerParameter();
void InitDefaultsNetParameterImpl();
void InitDefaultsNetParameter();
void InitDefaultsSolverParameterImpl();
void InitDefaultsSolverParameter();
void InitDefaultsSolverStateImpl();
void InitDefaultsSolverState();
void InitDefaultsNetStateImpl();
void InitDefaultsNetState();
void InitDefaultsNetStateRuleImpl();
void InitDefaultsNetStateRule();
void InitDefaultsParamSpecImpl();
void InitDefaultsParamSpec();
void InitDefaultsLayerParameterImpl();
void InitDefaultsLayerParameter();
void InitDefaultsTransformationParameterImpl();
void InitDefaultsTransformationParameter();
void InitDefaultsLossParameterImpl();
void InitDefaultsLossParameter();
void InitDefaultsAccuracyParameterImpl();
void InitDefaultsAccuracyParameter();
void InitDefaultsArgMaxParameterImpl();
void InitDefaultsArgMaxParameter();
void InitDefaultsConcatParameterImpl();
void InitDefaultsConcatParameter();
void InitDefaultsBatchNormParameterImpl();
void InitDefaultsBatchNormParameter();
void InitDefaultsBiasParameterImpl();
void InitDefaultsBiasParameter();
void InitDefaultsContrastiveLossParameterImpl();
void InitDefaultsContrastiveLossParameter();
void InitDefaultsConvolutionParameterImpl();
void InitDefaultsConvolutionParameter();
void InitDefaultsCropParameterImpl();
void InitDefaultsCropParameter();
void InitDefaultsDataParameterImpl();
void InitDefaultsDataParameter();
void InitDefaultsDropoutParameterImpl();
void InitDefaultsDropoutParameter();
void InitDefaultsDummyDataParameterImpl();
void InitDefaultsDummyDataParameter();
void InitDefaultsEltwiseParameterImpl();
void InitDefaultsEltwiseParameter();
void InitDefaultsELUParameterImpl();
void InitDefaultsELUParameter();
void InitDefaultsEmbedParameterImpl();
void InitDefaultsEmbedParameter();
void InitDefaultsExpParameterImpl();
void InitDefaultsExpParameter();
void InitDefaultsFlattenParameterImpl();
void InitDefaultsFlattenParameter();
void InitDefaultsHDF5DataParameterImpl();
void InitDefaultsHDF5DataParameter();
void InitDefaultsHDF5OutputParameterImpl();
void InitDefaultsHDF5OutputParameter();
void InitDefaultsHingeLossParameterImpl();
void InitDefaultsHingeLossParameter();
void InitDefaultsImageDataParameterImpl();
void InitDefaultsImageDataParameter();
void InitDefaultsInfogainLossParameterImpl();
void InitDefaultsInfogainLossParameter();
void InitDefaultsInnerProductParameterImpl();
void InitDefaultsInnerProductParameter();
void InitDefaultsInnerDistanceParameterImpl();
void InitDefaultsInnerDistanceParameter();
void InitDefaultsInputParameterImpl();
void InitDefaultsInputParameter();
void InitDefaultsLogParameterImpl();
void InitDefaultsLogParameter();
void InitDefaultsLRNParameterImpl();
void InitDefaultsLRNParameter();
void InitDefaultsMemoryDataParameterImpl();
void InitDefaultsMemoryDataParameter();
void InitDefaultsMVNParameterImpl();
void InitDefaultsMVNParameter();
void InitDefaultsParameterParameterImpl();
void InitDefaultsParameterParameter();
void InitDefaultsPoolingParameterImpl();
void InitDefaultsPoolingParameter();
void InitDefaultsPowerParameterImpl();
void InitDefaultsPowerParameter();
void InitDefaultsPythonParameterImpl();
void InitDefaultsPythonParameter();
void InitDefaultsRecurrentParameterImpl();
void InitDefaultsRecurrentParameter();
void InitDefaultsReductionParameterImpl();
void InitDefaultsReductionParameter();
void InitDefaultsReLUParameterImpl();
void InitDefaultsReLUParameter();
void InitDefaultsReshapeParameterImpl();
void InitDefaultsReshapeParameter();
void InitDefaultsScaleParameterImpl();
void InitDefaultsScaleParameter();
void InitDefaultsSigmoidParameterImpl();
void InitDefaultsSigmoidParameter();
void InitDefaultsSliceParameterImpl();
void InitDefaultsSliceParameter();
void InitDefaultsSoftmaxParameterImpl();
void InitDefaultsSoftmaxParameter();
void InitDefaultsTanHParameterImpl();
void InitDefaultsTanHParameter();
void InitDefaultsTileParameterImpl();
void InitDefaultsTileParameter();
void InitDefaultsThresholdParameterImpl();
void InitDefaultsThresholdParameter();
void InitDefaultsMILParameterImpl();
void InitDefaultsMILParameter();
void InitDefaultsWindowDataParameterImpl();
void InitDefaultsWindowDataParameter();
void InitDefaultsMILDataParameterImpl();
void InitDefaultsMILDataParameter();
void InitDefaultsSPPParameterImpl();
void InitDefaultsSPPParameter();
void InitDefaultsV1LayerParameterImpl();
void InitDefaultsV1LayerParameter();
void InitDefaultsV0LayerParameterImpl();
void InitDefaultsV0LayerParameter();
void InitDefaultsTripletLossParameterImpl();
void InitDefaultsTripletLossParameter();
void InitDefaultsROIPoolingParameterImpl();
void InitDefaultsROIPoolingParameter();
void InitDefaultsInsanityParameterImpl();
void InitDefaultsInsanityParameter();
void InitDefaultsPReLUParameterImpl();
void InitDefaultsPReLUParameter();
void InitDefaultsBNParameterImpl();
void InitDefaultsBNParameter();
void InitDefaultsLocalParameterImpl();
void InitDefaultsLocalParameter();
void InitDefaultsEltwiseAffineParameterImpl();
void InitDefaultsEltwiseAffineParameter();
void InitDefaultsSubRegionParameterImpl();
void InitDefaultsSubRegionParameter();
void InitDefaultsNoiseParameterImpl();
void InitDefaultsNoiseParameter();
void InitDefaultsHotspotParameterImpl();
void InitDefaultsHotspotParameter();
void InitDefaultsPredictBoxParameterImpl();
void InitDefaultsPredictBoxParameter();
void InitDefaultsFCNDataParameterImpl();
void InitDefaultsFCNDataParameter();
void InitDefaultsCenterLossParameterImpl();
void InitDefaultsCenterLossParameter();
void InitDefaultsFlipParameterImpl();
void InitDefaultsFlipParameter();
void InitDefaultsNormalizeParameterImpl();
void InitDefaultsNormalizeParameter();
void InitDefaultsGeneralContrastiveParameterImpl();
void InitDefaultsGeneralContrastiveParameter();
void InitDefaultsBatchContrastiveParameterImpl();
void InitDefaultsBatchContrastiveParameter();
void InitDefaultsSoftContrastiveParameterImpl();
void InitDefaultsSoftContrastiveParameter();
void InitDefaultsGeneralTripletParameterImpl();
void InitDefaultsGeneralTripletParameter();
void InitDefaultsSoftTruncationParameterImpl();
void InitDefaultsSoftTruncationParameter();
void InitDefaultsTruncationParameterImpl();
void InitDefaultsTruncationParameter();
void InitDefaultsProposalParameterImpl();
void InitDefaultsProposalParameter();
void InitDefaultsPSROIPoolingParameterImpl();
void InitDefaultsPSROIPoolingParameter();
void InitDefaultsPairwiseParameterImpl();
void InitDefaultsPairwiseParameter();
void InitDefaultsSmoothL1ParameterImpl();
void InitDefaultsSmoothL1Parameter();
void InitDefaultsPermuteParameterImpl();
void InitDefaultsPermuteParameter();
void InitDefaultsNCAParameterImpl();
void InitDefaultsNCAParameter();
void InitDefaultsLargeMarginInnerProductParameterImpl();
void InitDefaultsLargeMarginInnerProductParameter();
void InitDefaultsLabelSpecificRescaleParameterImpl();
void InitDefaultsLabelSpecificRescaleParameter();
void InitDefaultsInfimumLossParamterImpl();
void InitDefaultsInfimumLossParamter();
void InitDefaultsOrdinalRegressionParameterImpl();
void InitDefaultsOrdinalRegressionParameter();
void InitDefaultsResizeParameterImpl();
void InitDefaultsResizeParameter();
void InitDefaultsMarginInnerProductParameterImpl();
void InitDefaultsMarginInnerProductParameter();
void InitDefaultsFeatureDecayLossParameterImpl();
void InitDefaultsFeatureDecayLossParameter();
void InitDefaultsConfidencePenaltyLossParameterImpl();
void InitDefaultsConfidencePenaltyLossParameter();
void InitDefaultsFocalLossParameterImpl();
void InitDefaultsFocalLossParameter();
void InitDefaultsLabelSpecificMarginParameterImpl();
void InitDefaultsLabelSpecificMarginParameter();
void InitDefaultsChannelScaleParameterImpl();
void InitDefaultsChannelScaleParameter();
void InitDefaultsLabelSpecificAffineParameterImpl();
void InitDefaultsLabelSpecificAffineParameter();
void InitDefaultsLabelSpecificHardMarginParameterImpl();
void InitDefaultsLabelSpecificHardMarginParameter();
void InitDefaultsLabelSpecificStatisticsParameterImpl();
void InitDefaultsLabelSpecificStatisticsParameter();
void InitDefaultsLabelSpecificAddParameterImpl();
void InitDefaultsLabelSpecificAddParameter();
inline void InitDefaults() {
  InitDefaultsBlobShape();
  InitDefaultsBlobProto();
  InitDefaultsBlobProtoVector();
  InitDefaultsDatum();
  InitDefaultsFillerParameter();
  InitDefaultsNetParameter();
  InitDefaultsSolverParameter();
  InitDefaultsSolverState();
  InitDefaultsNetState();
  InitDefaultsNetStateRule();
  InitDefaultsParamSpec();
  InitDefaultsLayerParameter();
  InitDefaultsTransformationParameter();
  InitDefaultsLossParameter();
  InitDefaultsAccuracyParameter();
  InitDefaultsArgMaxParameter();
  InitDefaultsConcatParameter();
  InitDefaultsBatchNormParameter();
  InitDefaultsBiasParameter();
  InitDefaultsContrastiveLossParameter();
  InitDefaultsConvolutionParameter();
  InitDefaultsCropParameter();
  InitDefaultsDataParameter();
  InitDefaultsDropoutParameter();
  InitDefaultsDummyDataParameter();
  InitDefaultsEltwiseParameter();
  InitDefaultsELUParameter();
  InitDefaultsEmbedParameter();
  InitDefaultsExpParameter();
  InitDefaultsFlattenParameter();
  InitDefaultsHDF5DataParameter();
  InitDefaultsHDF5OutputParameter();
  InitDefaultsHingeLossParameter();
  InitDefaultsImageDataParameter();
  InitDefaultsInfogainLossParameter();
  InitDefaultsInnerProductParameter();
  InitDefaultsInnerDistanceParameter();
  InitDefaultsInputParameter();
  InitDefaultsLogParameter();
  InitDefaultsLRNParameter();
  InitDefaultsMemoryDataParameter();
  InitDefaultsMVNParameter();
  InitDefaultsParameterParameter();
  InitDefaultsPoolingParameter();
  InitDefaultsPowerParameter();
  InitDefaultsPythonParameter();
  InitDefaultsRecurrentParameter();
  InitDefaultsReductionParameter();
  InitDefaultsReLUParameter();
  InitDefaultsReshapeParameter();
  InitDefaultsScaleParameter();
  InitDefaultsSigmoidParameter();
  InitDefaultsSliceParameter();
  InitDefaultsSoftmaxParameter();
  InitDefaultsTanHParameter();
  InitDefaultsTileParameter();
  InitDefaultsThresholdParameter();
  InitDefaultsMILParameter();
  InitDefaultsWindowDataParameter();
  InitDefaultsMILDataParameter();
  InitDefaultsSPPParameter();
  InitDefaultsV1LayerParameter();
  InitDefaultsV0LayerParameter();
  InitDefaultsTripletLossParameter();
  InitDefaultsROIPoolingParameter();
  InitDefaultsInsanityParameter();
  InitDefaultsPReLUParameter();
  InitDefaultsBNParameter();
  InitDefaultsLocalParameter();
  InitDefaultsEltwiseAffineParameter();
  InitDefaultsSubRegionParameter();
  InitDefaultsNoiseParameter();
  InitDefaultsHotspotParameter();
  InitDefaultsPredictBoxParameter();
  InitDefaultsFCNDataParameter();
  InitDefaultsCenterLossParameter();
  InitDefaultsFlipParameter();
  InitDefaultsNormalizeParameter();
  InitDefaultsGeneralContrastiveParameter();
  InitDefaultsBatchContrastiveParameter();
  InitDefaultsSoftContrastiveParameter();
  InitDefaultsGeneralTripletParameter();
  InitDefaultsSoftTruncationParameter();
  InitDefaultsTruncationParameter();
  InitDefaultsProposalParameter();
  InitDefaultsPSROIPoolingParameter();
  InitDefaultsPairwiseParameter();
  InitDefaultsSmoothL1Parameter();
  InitDefaultsPermuteParameter();
  InitDefaultsNCAParameter();
  InitDefaultsLargeMarginInnerProductParameter();
  InitDefaultsLabelSpecificRescaleParameter();
  InitDefaultsInfimumLossParamter();
  InitDefaultsOrdinalRegressionParameter();
  InitDefaultsResizeParameter();
  InitDefaultsMarginInnerProductParameter();
  InitDefaultsFeatureDecayLossParameter();
  InitDefaultsConfidencePenaltyLossParameter();
  InitDefaultsFocalLossParameter();
  InitDefaultsLabelSpecificMarginParameter();
  InitDefaultsChannelScaleParameter();
  InitDefaultsLabelSpecificAffineParameter();
  InitDefaultsLabelSpecificHardMarginParameter();
  InitDefaultsLabelSpecificStatisticsParameter();
  InitDefaultsLabelSpecificAddParameter();
}
}  // namespace protobuf_caffe_5flow_5fprecision_2eproto
namespace caffe {
class AccuracyParameter;
class AccuracyParameterDefaultTypeInternal;
extern AccuracyParameterDefaultTypeInternal _AccuracyParameter_default_instance_;
class ArgMaxParameter;
class ArgMaxParameterDefaultTypeInternal;
extern ArgMaxParameterDefaultTypeInternal _ArgMaxParameter_default_instance_;
class BNParameter;
class BNParameterDefaultTypeInternal;
extern BNParameterDefaultTypeInternal _BNParameter_default_instance_;
class BatchContrastiveParameter;
class BatchContrastiveParameterDefaultTypeInternal;
extern BatchContrastiveParameterDefaultTypeInternal _BatchContrastiveParameter_default_instance_;
class BatchNormParameter;
class BatchNormParameterDefaultTypeInternal;
extern BatchNormParameterDefaultTypeInternal _BatchNormParameter_default_instance_;
class BiasParameter;
class BiasParameterDefaultTypeInternal;
extern BiasParameterDefaultTypeInternal _BiasParameter_default_instance_;
class BlobProto;
class BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobProtoVector;
class BlobProtoVectorDefaultTypeInternal;
extern BlobProtoVectorDefaultTypeInternal _BlobProtoVector_default_instance_;
class BlobShape;
class BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class CenterLossParameter;
class CenterLossParameterDefaultTypeInternal;
extern CenterLossParameterDefaultTypeInternal _CenterLossParameter_default_instance_;
class ChannelScaleParameter;
class ChannelScaleParameterDefaultTypeInternal;
extern ChannelScaleParameterDefaultTypeInternal _ChannelScaleParameter_default_instance_;
class ConcatParameter;
class ConcatParameterDefaultTypeInternal;
extern ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
class ConfidencePenaltyLossParameter;
class ConfidencePenaltyLossParameterDefaultTypeInternal;
extern ConfidencePenaltyLossParameterDefaultTypeInternal _ConfidencePenaltyLossParameter_default_instance_;
class ContrastiveLossParameter;
class ContrastiveLossParameterDefaultTypeInternal;
extern ContrastiveLossParameterDefaultTypeInternal _ContrastiveLossParameter_default_instance_;
class ConvolutionParameter;
class ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class CropParameter;
class CropParameterDefaultTypeInternal;
extern CropParameterDefaultTypeInternal _CropParameter_default_instance_;
class DataParameter;
class DataParameterDefaultTypeInternal;
extern DataParameterDefaultTypeInternal _DataParameter_default_instance_;
class Datum;
class DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DropoutParameter;
class DropoutParameterDefaultTypeInternal;
extern DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
class DummyDataParameter;
class DummyDataParameterDefaultTypeInternal;
extern DummyDataParameterDefaultTypeInternal _DummyDataParameter_default_instance_;
class ELUParameter;
class ELUParameterDefaultTypeInternal;
extern ELUParameterDefaultTypeInternal _ELUParameter_default_instance_;
class EltwiseAffineParameter;
class EltwiseAffineParameterDefaultTypeInternal;
extern EltwiseAffineParameterDefaultTypeInternal _EltwiseAffineParameter_default_instance_;
class EltwiseParameter;
class EltwiseParameterDefaultTypeInternal;
extern EltwiseParameterDefaultTypeInternal _EltwiseParameter_default_instance_;
class EmbedParameter;
class EmbedParameterDefaultTypeInternal;
extern EmbedParameterDefaultTypeInternal _EmbedParameter_default_instance_;
class ExpParameter;
class ExpParameterDefaultTypeInternal;
extern ExpParameterDefaultTypeInternal _ExpParameter_default_instance_;
class FCNDataParameter;
class FCNDataParameterDefaultTypeInternal;
extern FCNDataParameterDefaultTypeInternal _FCNDataParameter_default_instance_;
class FeatureDecayLossParameter;
class FeatureDecayLossParameterDefaultTypeInternal;
extern FeatureDecayLossParameterDefaultTypeInternal _FeatureDecayLossParameter_default_instance_;
class FillerParameter;
class FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class FlattenParameter;
class FlattenParameterDefaultTypeInternal;
extern FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
class FlipParameter;
class FlipParameterDefaultTypeInternal;
extern FlipParameterDefaultTypeInternal _FlipParameter_default_instance_;
class FocalLossParameter;
class FocalLossParameterDefaultTypeInternal;
extern FocalLossParameterDefaultTypeInternal _FocalLossParameter_default_instance_;
class GeneralContrastiveParameter;
class GeneralContrastiveParameterDefaultTypeInternal;
extern GeneralContrastiveParameterDefaultTypeInternal _GeneralContrastiveParameter_default_instance_;
class GeneralTripletParameter;
class GeneralTripletParameterDefaultTypeInternal;
extern GeneralTripletParameterDefaultTypeInternal _GeneralTripletParameter_default_instance_;
class HDF5DataParameter;
class HDF5DataParameterDefaultTypeInternal;
extern HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
class HDF5OutputParameter;
class HDF5OutputParameterDefaultTypeInternal;
extern HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
class HingeLossParameter;
class HingeLossParameterDefaultTypeInternal;
extern HingeLossParameterDefaultTypeInternal _HingeLossParameter_default_instance_;
class HotspotParameter;
class HotspotParameterDefaultTypeInternal;
extern HotspotParameterDefaultTypeInternal _HotspotParameter_default_instance_;
class ImageDataParameter;
class ImageDataParameterDefaultTypeInternal;
extern ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
class InfimumLossParamter;
class InfimumLossParamterDefaultTypeInternal;
extern InfimumLossParamterDefaultTypeInternal _InfimumLossParamter_default_instance_;
class InfogainLossParameter;
class InfogainLossParameterDefaultTypeInternal;
extern InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
class InnerDistanceParameter;
class InnerDistanceParameterDefaultTypeInternal;
extern InnerDistanceParameterDefaultTypeInternal _InnerDistanceParameter_default_instance_;
class InnerProductParameter;
class InnerProductParameterDefaultTypeInternal;
extern InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
class InputParameter;
class InputParameterDefaultTypeInternal;
extern InputParameterDefaultTypeInternal _InputParameter_default_instance_;
class InsanityParameter;
class InsanityParameterDefaultTypeInternal;
extern InsanityParameterDefaultTypeInternal _InsanityParameter_default_instance_;
class LRNParameter;
class LRNParameterDefaultTypeInternal;
extern LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
class LabelSpecificAddParameter;
class LabelSpecificAddParameterDefaultTypeInternal;
extern LabelSpecificAddParameterDefaultTypeInternal _LabelSpecificAddParameter_default_instance_;
class LabelSpecificAffineParameter;
class LabelSpecificAffineParameterDefaultTypeInternal;
extern LabelSpecificAffineParameterDefaultTypeInternal _LabelSpecificAffineParameter_default_instance_;
class LabelSpecificHardMarginParameter;
class LabelSpecificHardMarginParameterDefaultTypeInternal;
extern LabelSpecificHardMarginParameterDefaultTypeInternal _LabelSpecificHardMarginParameter_default_instance_;
class LabelSpecificMarginParameter;
class LabelSpecificMarginParameterDefaultTypeInternal;
extern LabelSpecificMarginParameterDefaultTypeInternal _LabelSpecificMarginParameter_default_instance_;
class LabelSpecificRescaleParameter;
class LabelSpecificRescaleParameterDefaultTypeInternal;
extern LabelSpecificRescaleParameterDefaultTypeInternal _LabelSpecificRescaleParameter_default_instance_;
class LabelSpecificStatisticsParameter;
class LabelSpecificStatisticsParameterDefaultTypeInternal;
extern LabelSpecificStatisticsParameterDefaultTypeInternal _LabelSpecificStatisticsParameter_default_instance_;
class LargeMarginInnerProductParameter;
class LargeMarginInnerProductParameterDefaultTypeInternal;
extern LargeMarginInnerProductParameterDefaultTypeInternal _LargeMarginInnerProductParameter_default_instance_;
class LayerParameter;
class LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class LocalParameter;
class LocalParameterDefaultTypeInternal;
extern LocalParameterDefaultTypeInternal _LocalParameter_default_instance_;
class LogParameter;
class LogParameterDefaultTypeInternal;
extern LogParameterDefaultTypeInternal _LogParameter_default_instance_;
class LossParameter;
class LossParameterDefaultTypeInternal;
extern LossParameterDefaultTypeInternal _LossParameter_default_instance_;
class MILDataParameter;
class MILDataParameterDefaultTypeInternal;
extern MILDataParameterDefaultTypeInternal _MILDataParameter_default_instance_;
class MILParameter;
class MILParameterDefaultTypeInternal;
extern MILParameterDefaultTypeInternal _MILParameter_default_instance_;
class MVNParameter;
class MVNParameterDefaultTypeInternal;
extern MVNParameterDefaultTypeInternal _MVNParameter_default_instance_;
class MarginInnerProductParameter;
class MarginInnerProductParameterDefaultTypeInternal;
extern MarginInnerProductParameterDefaultTypeInternal _MarginInnerProductParameter_default_instance_;
class MemoryDataParameter;
class MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class NCAParameter;
class NCAParameterDefaultTypeInternal;
extern NCAParameterDefaultTypeInternal _NCAParameter_default_instance_;
class NetParameter;
class NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class NetState;
class NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class NetStateRule;
class NetStateRuleDefaultTypeInternal;
extern NetStateRuleDefaultTypeInternal _NetStateRule_default_instance_;
class NoiseParameter;
class NoiseParameterDefaultTypeInternal;
extern NoiseParameterDefaultTypeInternal _NoiseParameter_default_instance_;
class NormalizeParameter;
class NormalizeParameterDefaultTypeInternal;
extern NormalizeParameterDefaultTypeInternal _NormalizeParameter_default_instance_;
class OrdinalRegressionParameter;
class OrdinalRegressionParameterDefaultTypeInternal;
extern OrdinalRegressionParameterDefaultTypeInternal _OrdinalRegressionParameter_default_instance_;
class PReLUParameter;
class PReLUParameterDefaultTypeInternal;
extern PReLUParameterDefaultTypeInternal _PReLUParameter_default_instance_;
class PSROIPoolingParameter;
class PSROIPoolingParameterDefaultTypeInternal;
extern PSROIPoolingParameterDefaultTypeInternal _PSROIPoolingParameter_default_instance_;
class PairwiseParameter;
class PairwiseParameterDefaultTypeInternal;
extern PairwiseParameterDefaultTypeInternal _PairwiseParameter_default_instance_;
class ParamSpec;
class ParamSpecDefaultTypeInternal;
extern ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
class ParameterParameter;
class ParameterParameterDefaultTypeInternal;
extern ParameterParameterDefaultTypeInternal _ParameterParameter_default_instance_;
class PermuteParameter;
class PermuteParameterDefaultTypeInternal;
extern PermuteParameterDefaultTypeInternal _PermuteParameter_default_instance_;
class PoolingParameter;
class PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class PowerParameter;
class PowerParameterDefaultTypeInternal;
extern PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
class PredictBoxParameter;
class PredictBoxParameterDefaultTypeInternal;
extern PredictBoxParameterDefaultTypeInternal _PredictBoxParameter_default_instance_;
class ProposalParameter;
class ProposalParameterDefaultTypeInternal;
extern ProposalParameterDefaultTypeInternal _ProposalParameter_default_instance_;
class PythonParameter;
class PythonParameterDefaultTypeInternal;
extern PythonParameterDefaultTypeInternal _PythonParameter_default_instance_;
class ROIPoolingParameter;
class ROIPoolingParameterDefaultTypeInternal;
extern ROIPoolingParameterDefaultTypeInternal _ROIPoolingParameter_default_instance_;
class ReLUParameter;
class ReLUParameterDefaultTypeInternal;
extern ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
class RecurrentParameter;
class RecurrentParameterDefaultTypeInternal;
extern RecurrentParameterDefaultTypeInternal _RecurrentParameter_default_instance_;
class ReductionParameter;
class ReductionParameterDefaultTypeInternal;
extern ReductionParameterDefaultTypeInternal _ReductionParameter_default_instance_;
class ReshapeParameter;
class ReshapeParameterDefaultTypeInternal;
extern ReshapeParameterDefaultTypeInternal _ReshapeParameter_default_instance_;
class ResizeParameter;
class ResizeParameterDefaultTypeInternal;
extern ResizeParameterDefaultTypeInternal _ResizeParameter_default_instance_;
class SPPParameter;
class SPPParameterDefaultTypeInternal;
extern SPPParameterDefaultTypeInternal _SPPParameter_default_instance_;
class ScaleParameter;
class ScaleParameterDefaultTypeInternal;
extern ScaleParameterDefaultTypeInternal _ScaleParameter_default_instance_;
class SigmoidParameter;
class SigmoidParameterDefaultTypeInternal;
extern SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
class SliceParameter;
class SliceParameterDefaultTypeInternal;
extern SliceParameterDefaultTypeInternal _SliceParameter_default_instance_;
class SmoothL1Parameter;
class SmoothL1ParameterDefaultTypeInternal;
extern SmoothL1ParameterDefaultTypeInternal _SmoothL1Parameter_default_instance_;
class SoftContrastiveParameter;
class SoftContrastiveParameterDefaultTypeInternal;
extern SoftContrastiveParameterDefaultTypeInternal _SoftContrastiveParameter_default_instance_;
class SoftTruncationParameter;
class SoftTruncationParameterDefaultTypeInternal;
extern SoftTruncationParameterDefaultTypeInternal _SoftTruncationParameter_default_instance_;
class SoftmaxParameter;
class SoftmaxParameterDefaultTypeInternal;
extern SoftmaxParameterDefaultTypeInternal _SoftmaxParameter_default_instance_;
class SolverParameter;
class SolverParameterDefaultTypeInternal;
extern SolverParameterDefaultTypeInternal _SolverParameter_default_instance_;
class SolverState;
class SolverStateDefaultTypeInternal;
extern SolverStateDefaultTypeInternal _SolverState_default_instance_;
class SubRegionParameter;
class SubRegionParameterDefaultTypeInternal;
extern SubRegionParameterDefaultTypeInternal _SubRegionParameter_default_instance_;
class TanHParameter;
class TanHParameterDefaultTypeInternal;
extern TanHParameterDefaultTypeInternal _TanHParameter_default_instance_;
class ThresholdParameter;
class ThresholdParameterDefaultTypeInternal;
extern ThresholdParameterDefaultTypeInternal _ThresholdParameter_default_instance_;
class TileParameter;
class TileParameterDefaultTypeInternal;
extern TileParameterDefaultTypeInternal _TileParameter_default_instance_;
class TransformationParameter;
class TransformationParameterDefaultTypeInternal;
extern TransformationParameterDefaultTypeInternal _TransformationParameter_default_instance_;
class TripletLossParameter;
class TripletLossParameterDefaultTypeInternal;
extern TripletLossParameterDefaultTypeInternal _TripletLossParameter_default_instance_;
class TruncationParameter;
class TruncationParameterDefaultTypeInternal;
extern TruncationParameterDefaultTypeInternal _TruncationParameter_default_instance_;
class V0LayerParameter;
class V0LayerParameterDefaultTypeInternal;
extern V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
class V1LayerParameter;
class V1LayerParameterDefaultTypeInternal;
extern V1LayerParameterDefaultTypeInternal _V1LayerParameter_default_instance_;
class WindowDataParameter;
class WindowDataParameterDefaultTypeInternal;
extern WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
}  // namespace caffe
namespace caffe {

enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1
};
bool SolverParameter_SnapshotFormat_IsValid(int value);
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = SolverParameter_SnapshotFormat_HDF5;
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = SolverParameter_SnapshotFormat_BINARYPROTO;
const int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor();
inline const ::std::string& SolverParameter_SnapshotFormat_Name(SolverParameter_SnapshotFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SnapshotFormat_descriptor(), value);
}
inline bool SolverParameter_SnapshotFormat_Parse(
    const ::std::string& name, SolverParameter_SnapshotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
    SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum LossParameter_NormalizationMode {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
const int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
inline const ::std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const ::std::string& name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum BatchNormParameter_Engine {
  BatchNormParameter_Engine_DEFAULT = 0,
  BatchNormParameter_Engine_CAFFE = 1,
  BatchNormParameter_Engine_CUDNN = 2
};
bool BatchNormParameter_Engine_IsValid(int value);
const BatchNormParameter_Engine BatchNormParameter_Engine_Engine_MIN = BatchNormParameter_Engine_DEFAULT;
const BatchNormParameter_Engine BatchNormParameter_Engine_Engine_MAX = BatchNormParameter_Engine_CUDNN;
const int BatchNormParameter_Engine_Engine_ARRAYSIZE = BatchNormParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* BatchNormParameter_Engine_descriptor();
inline const ::std::string& BatchNormParameter_Engine_Name(BatchNormParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    BatchNormParameter_Engine_descriptor(), value);
}
inline bool BatchNormParameter_Engine_Parse(
    const ::std::string& name, BatchNormParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatchNormParameter_Engine>(
    BatchNormParameter_Engine_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker {
  ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET = 0,
  ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX = 1
};
bool ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(int value);
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MIN = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET;
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX;
const int ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
inline const ::std::string& ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Name(ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor(), value);
}
inline bool ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Parse(
    const ::std::string& name, ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker>(
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2,
  EltwiseParameter_EltwiseOp_SORT = 3
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_SORT;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2,
  PoolingParameter_PoolMethod_DEF = 3,
  PoolingParameter_PoolMethod_DEF_ALL = 4,
  PoolingParameter_PoolMethod_DEF_ALL2 = 5,
  PoolingParameter_PoolMethod_DEF_ALL3 = 6,
  PoolingParameter_PoolMethod_DEF_ALL4 = 7,
  PoolingParameter_PoolMethod_LOWRES = 8
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_LOWRES;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum MILParameter_MILType {
  MILParameter_MILType_MAX = 0,
  MILParameter_MILType_NOR = 1
};
bool MILParameter_MILType_IsValid(int value);
const MILParameter_MILType MILParameter_MILType_MILType_MIN = MILParameter_MILType_MAX;
const MILParameter_MILType MILParameter_MILType_MILType_MAX = MILParameter_MILType_NOR;
const int MILParameter_MILType_MILType_ARRAYSIZE = MILParameter_MILType_MILType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MILParameter_MILType_descriptor();
inline const ::std::string& MILParameter_MILType_Name(MILParameter_MILType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MILParameter_MILType_descriptor(), value);
}
inline bool MILParameter_MILType_Parse(
    const ::std::string& name, MILParameter_MILType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MILParameter_MILType>(
    MILParameter_MILType_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31,
  V1LayerParameter_LayerType_LOCAL = 41,
  V1LayerParameter_LayerType_BN = 42,
  V1LayerParameter_LayerType_NORMALIZE = 43,
  V1LayerParameter_LayerType_INSANITY = 44,
  V1LayerParameter_LayerType_TRIPLET_LOSS = 45,
  V1LayerParameter_LayerType_ROIPOOLING = 46,
  V1LayerParameter_LayerType_BATCH_NORM = 47,
  V1LayerParameter_LayerType_ELTWISE_AFFINE = 48
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_ELTWISE_AFFINE;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum BNParameter_Engine {
  BNParameter_Engine_DEFAULT = 0,
  BNParameter_Engine_CAFFE = 1,
  BNParameter_Engine_CUDNN = 2
};
bool BNParameter_Engine_IsValid(int value);
const BNParameter_Engine BNParameter_Engine_Engine_MIN = BNParameter_Engine_DEFAULT;
const BNParameter_Engine BNParameter_Engine_Engine_MAX = BNParameter_Engine_CUDNN;
const int BNParameter_Engine_Engine_ARRAYSIZE = BNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* BNParameter_Engine_descriptor();
inline const ::std::string& BNParameter_Engine_Name(BNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    BNParameter_Engine_descriptor(), value);
}
inline bool BNParameter_Engine_Parse(
    const ::std::string& name, BNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BNParameter_Engine>(
    BNParameter_Engine_descriptor(), name, value);
}
enum PairwiseParameter_PairwiseOp {
  PairwiseParameter_PairwiseOp_SUM = 1,
  PairwiseParameter_PairwiseOp_PROD = 2,
  PairwiseParameter_PairwiseOp_MAX = 3
};
bool PairwiseParameter_PairwiseOp_IsValid(int value);
const PairwiseParameter_PairwiseOp PairwiseParameter_PairwiseOp_PairwiseOp_MIN = PairwiseParameter_PairwiseOp_SUM;
const PairwiseParameter_PairwiseOp PairwiseParameter_PairwiseOp_PairwiseOp_MAX = PairwiseParameter_PairwiseOp_MAX;
const int PairwiseParameter_PairwiseOp_PairwiseOp_ARRAYSIZE = PairwiseParameter_PairwiseOp_PairwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* PairwiseParameter_PairwiseOp_descriptor();
inline const ::std::string& PairwiseParameter_PairwiseOp_Name(PairwiseParameter_PairwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    PairwiseParameter_PairwiseOp_descriptor(), value);
}
inline bool PairwiseParameter_PairwiseOp_Parse(
    const ::std::string& name, PairwiseParameter_PairwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PairwiseParameter_PairwiseOp>(
    PairwiseParameter_PairwiseOp_descriptor(), name, value);
}
enum LargeMarginInnerProductParameter_LargeMarginType {
  LargeMarginInnerProductParameter_LargeMarginType_SINGLE = 0,
  LargeMarginInnerProductParameter_LargeMarginType_DOUBLE = 1,
  LargeMarginInnerProductParameter_LargeMarginType_TRIPLE = 2,
  LargeMarginInnerProductParameter_LargeMarginType_QUADRUPLE = 3
};
bool LargeMarginInnerProductParameter_LargeMarginType_IsValid(int value);
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter_LargeMarginType_LargeMarginType_MIN = LargeMarginInnerProductParameter_LargeMarginType_SINGLE;
const LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter_LargeMarginType_LargeMarginType_MAX = LargeMarginInnerProductParameter_LargeMarginType_QUADRUPLE;
const int LargeMarginInnerProductParameter_LargeMarginType_LargeMarginType_ARRAYSIZE = LargeMarginInnerProductParameter_LargeMarginType_LargeMarginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LargeMarginInnerProductParameter_LargeMarginType_descriptor();
inline const ::std::string& LargeMarginInnerProductParameter_LargeMarginType_Name(LargeMarginInnerProductParameter_LargeMarginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LargeMarginInnerProductParameter_LargeMarginType_descriptor(), value);
}
inline bool LargeMarginInnerProductParameter_LargeMarginType_Parse(
    const ::std::string& name, LargeMarginInnerProductParameter_LargeMarginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LargeMarginInnerProductParameter_LargeMarginType>(
    LargeMarginInnerProductParameter_LargeMarginType_descriptor(), name, value);
}
enum MarginInnerProductParameter_MarginType {
  MarginInnerProductParameter_MarginType_SINGLE = 0,
  MarginInnerProductParameter_MarginType_DOUBLE = 1,
  MarginInnerProductParameter_MarginType_TRIPLE = 2,
  MarginInnerProductParameter_MarginType_QUADRUPLE = 3
};
bool MarginInnerProductParameter_MarginType_IsValid(int value);
const MarginInnerProductParameter_MarginType MarginInnerProductParameter_MarginType_MarginType_MIN = MarginInnerProductParameter_MarginType_SINGLE;
const MarginInnerProductParameter_MarginType MarginInnerProductParameter_MarginType_MarginType_MAX = MarginInnerProductParameter_MarginType_QUADRUPLE;
const int MarginInnerProductParameter_MarginType_MarginType_ARRAYSIZE = MarginInnerProductParameter_MarginType_MarginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarginInnerProductParameter_MarginType_descriptor();
inline const ::std::string& MarginInnerProductParameter_MarginType_Name(MarginInnerProductParameter_MarginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarginInnerProductParameter_MarginType_descriptor(), value);
}
inline bool MarginInnerProductParameter_MarginType_Parse(
    const ::std::string& name, MarginInnerProductParameter_MarginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarginInnerProductParameter_MarginType>(
    MarginInnerProductParameter_MarginType_descriptor(), name, value);
}
enum FocalLossParameter_Type {
  FocalLossParameter_Type_ORIGIN = 0,
  FocalLossParameter_Type_LINEAR = 1,
  FocalLossParameter_Type_ONEADDP = 2
};
bool FocalLossParameter_Type_IsValid(int value);
const FocalLossParameter_Type FocalLossParameter_Type_Type_MIN = FocalLossParameter_Type_ORIGIN;
const FocalLossParameter_Type FocalLossParameter_Type_Type_MAX = FocalLossParameter_Type_ONEADDP;
const int FocalLossParameter_Type_Type_ARRAYSIZE = FocalLossParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* FocalLossParameter_Type_descriptor();
inline const ::std::string& FocalLossParameter_Type_Name(FocalLossParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    FocalLossParameter_Type_descriptor(), value);
}
inline bool FocalLossParameter_Type_Parse(
    const ::std::string& name, FocalLossParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FocalLossParameter_Type>(
    FocalLossParameter_Type_descriptor(), name, value);
}
enum LabelSpecificMarginParameter_MarginType {
  LabelSpecificMarginParameter_MarginType_HARD = 0,
  LabelSpecificMarginParameter_MarginType_SOFT = 1
};
bool LabelSpecificMarginParameter_MarginType_IsValid(int value);
const LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter_MarginType_MarginType_MIN = LabelSpecificMarginParameter_MarginType_HARD;
const LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter_MarginType_MarginType_MAX = LabelSpecificMarginParameter_MarginType_SOFT;
const int LabelSpecificMarginParameter_MarginType_MarginType_ARRAYSIZE = LabelSpecificMarginParameter_MarginType_MarginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LabelSpecificMarginParameter_MarginType_descriptor();
inline const ::std::string& LabelSpecificMarginParameter_MarginType_Name(LabelSpecificMarginParameter_MarginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LabelSpecificMarginParameter_MarginType_descriptor(), value);
}
inline bool LabelSpecificMarginParameter_MarginType_Parse(
    const ::std::string& name, LabelSpecificMarginParameter_MarginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LabelSpecificMarginParameter_MarginType>(
    LabelSpecificMarginParameter_MarginType_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobShape) */ {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobShape(BlobShape&& from) noexcept
    : BlobShape() {
    *this = ::std::move(from);
  }

  inline BlobShape& operator=(BlobShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlobShape* other);
  friend void swap(BlobShape& a, BlobShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobShape* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsBlobShapeImpl();
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobProto(BlobProto&& from) noexcept
    : BlobProto() {
    *this = ::std::move(from);
  }

  inline BlobProto& operator=(BlobProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BlobProto* other);
  friend void swap(BlobProto& a, BlobProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobProto* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 5 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  int double_diff_size() const;
  void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // repeated int32 data_i = 10 [packed = true];
  int data_i_size() const;
  void clear_data_i();
  static const int kDataIFieldNumber = 10;
  ::google::protobuf::int32 data_i(int index) const;
  void set_data_i(int index, ::google::protobuf::int32 value);
  void add_data_i(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data_i() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data_i();

  // optional .caffe.BlobShape shape = 7;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 7;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* release_shape();
  ::caffe::BlobShape* mutable_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  void set_has_shape();
  void clear_has_shape();
  void set_has_num();
  void clear_has_num();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_i_;
  mutable int _data_i_cached_byte_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsBlobProtoImpl();
};
// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProtoVector) */ {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobProtoVector(BlobProtoVector&& from) noexcept
    : BlobProtoVector() {
    *this = ::std::move(from);
  }

  inline BlobProtoVector& operator=(BlobProtoVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProtoVector* internal_default_instance() {
    return reinterpret_cast<const BlobProtoVector*>(
               &_BlobProtoVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BlobProtoVector* other);
  friend void swap(BlobProtoVector& a, BlobProtoVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobProtoVector* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobProtoVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobProtoVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsBlobProtoVectorImpl();
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Datum) */ {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Datum(Datum&& from) noexcept
    : Datum() {
    *this = ::std::move(from);
  }

  inline Datum& operator=(Datum&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Datum* other);
  friend void swap(Datum& a, Datum& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Datum* New() const PROTOBUF_FINAL { return New(NULL); }

  Datum* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Datum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_data = 6;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 channels = 1;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  bool encoded() const;
  void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_data();
  void clear_has_data();
  void set_has_label();
  void clear_has_label();
  void set_has_encoded();
  void clear_has_encoded();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > float_data_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  bool encoded_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsDatumImpl();
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FillerParameter* other);
  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional float min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  bool has_variance_norm() const;
  void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // optional float alpha = 9 [default = 0];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 9;
  float alpha() const;
  void set_alpha(float value);

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // optional float max = 4 [default = 1];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // optional float std = 6 [default = 1];
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 6;
  float std() const;
  void set_std(float value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();
  void set_has_mean();
  void clear_has_mean();
  void set_has_std();
  void clear_has_std();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_sparse();
  void clear_has_sparse();
  void set_has_variance_norm();
  void clear_has_variance_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float mean_;
  int variance_norm_;
  float alpha_;
  ::google::protobuf::int32 sparse_;
  float max_;
  float std_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsFillerParameterImpl();
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetParameter(NetParameter&& from) noexcept
    : NetParameter() {
    *this = ::std::move(from);
  }

  inline NetParameter& operator=(NetParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NetParameter* other);
  friend void swap(NetParameter& a, NetParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NetParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.V1LayerParameter layers = 2;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 2;
  const ::caffe::V1LayerParameter& layers(int index) const;
  ::caffe::V1LayerParameter* mutable_layers(int index);
  ::caffe::V1LayerParameter* add_layers();
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
      mutable_layers();
  const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
      layers() const;

  // repeated string input = 3;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input(int index, ::std::string&& value);
  #endif
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  #if LANG_CXX11
  void add_input(::std::string&& value);
  #endif
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // repeated .caffe.BlobShape input_shape = 8;
  int input_shape_size() const;
  void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  const ::caffe::BlobShape& input_shape(int index) const;
  ::caffe::BlobShape* mutable_input_shape(int index);
  ::caffe::BlobShape* add_input_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;

  // repeated .caffe.LayerParameter layer = 100;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 100;
  const ::caffe::LayerParameter& layer(int index) const;
  ::caffe::LayerParameter* mutable_layer(int index);
  ::caffe::LayerParameter* add_layer();
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layer() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.NetState state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::caffe::NetState& state() const;
  ::caffe::NetState* release_state();
  ::caffe::NetState* mutable_state();
  void set_allocated_state(::caffe::NetState* state);

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  bool force_backward() const;
  void set_force_backward(bool value);

  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  bool debug_info() const;
  void set_debug_info(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_force_backward();
  void clear_has_force_backward();
  void set_has_state();
  void clear_has_state();
  void set_has_debug_info();
  void clear_has_debug_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter > layers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layer_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::NetState* state_;
  bool force_backward_;
  bool debug_info_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsNetParameterImpl();
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverParameter) */ {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolverParameter(SolverParameter&& from) noexcept
    : SolverParameter() {
    *this = ::std::move(from);
  }

  inline SolverParameter& operator=(SolverParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverParameter* internal_default_instance() {
    return reinterpret_cast<const SolverParameter*>(
               &_SolverParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SolverParameter* other);
  friend void swap(SolverParameter& a, SolverParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SolverParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolverParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapshotFormat SnapshotFormat;
  static const SnapshotFormat HDF5 =
    SolverParameter_SnapshotFormat_HDF5;
  static const SnapshotFormat BINARYPROTO =
    SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static const SnapshotFormat SnapshotFormat_MIN =
    SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static const SnapshotFormat SnapshotFormat_MAX =
    SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static const int SnapshotFormat_ARRAYSIZE =
    SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  static inline const ::std::string& SnapshotFormat_Name(SnapshotFormat value) {
    return SolverParameter_SnapshotFormat_Name(value);
  }
  static inline bool SnapshotFormat_Parse(const ::std::string& name,
      SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU =
    SolverParameter_SolverMode_CPU;
  static const SolverMode GPU =
    SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD =
    SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV =
    SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD =
    SolverParameter_SolverType_ADAGRAD;
  static const SolverType RMSPROP =
    SolverParameter_SolverType_RMSPROP;
  static const SolverType ADADELTA =
    SolverParameter_SolverType_ADADELTA;
  static const SolverType ADAM =
    SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string test_net = 2;
  int test_net_size() const;
  void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  const ::std::string& test_net(int index) const;
  ::std::string* mutable_test_net(int index);
  void set_test_net(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_net(int index, ::std::string&& value);
  #endif
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, size_t size);
  ::std::string* add_test_net();
  void add_test_net(const ::std::string& value);
  #if LANG_CXX11
  void add_test_net(::std::string&& value);
  #endif
  void add_test_net(const char* value);
  void add_test_net(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // repeated int32 test_iter = 3;
  int test_iter_size() const;
  void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  ::google::protobuf::int32 test_iter(int index) const;
  void set_test_iter(int index, ::google::protobuf::int32 value);
  void add_test_iter(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // repeated .caffe.NetParameter test_net_param = 22;
  int test_net_param_size() const;
  void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  const ::caffe::NetParameter& test_net_param(int index) const;
  ::caffe::NetParameter* mutable_test_net_param(int index);
  ::caffe::NetParameter* add_test_net_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;

  // repeated .caffe.NetState test_state = 27;
  int test_state_size() const;
  void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  const ::caffe::NetState& test_state(int index) const;
  ::caffe::NetState* mutable_test_state(int index);
  ::caffe::NetState* add_test_state();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;

  // repeated int32 stepvalue = 34;
  int stepvalue_size() const;
  void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  ::google::protobuf::int32 stepvalue(int index) const;
  void set_stepvalue(int index, ::google::protobuf::int32 value);
  void add_stepvalue(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional string train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::std::string& train_net() const;
  void set_train_net(const ::std::string& value);
  #if LANG_CXX11
  void set_train_net(::std::string&& value);
  #endif
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  ::std::string* mutable_train_net();
  ::std::string* release_train_net();
  void set_allocated_train_net(::std::string* train_net);

  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  const ::std::string& lr_policy() const;
  void set_lr_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_lr_policy(::std::string&& value);
  #endif
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  ::std::string* mutable_lr_policy();
  ::std::string* release_lr_policy();
  void set_allocated_lr_policy(::std::string* lr_policy);

  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  const ::std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot_prefix(::std::string&& value);
  #endif
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  ::std::string* mutable_snapshot_prefix();
  ::std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional string net = 24;
  bool has_net() const;
  void clear_net();
  static const int kNetFieldNumber = 24;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  #if LANG_CXX11
  void set_net(::std::string&& value);
  #endif
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // optional string regularization_type = 29 [default = "L2"];
  bool has_regularization_type() const;
  void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  const ::std::string& regularization_type() const;
  void set_regularization_type(const ::std::string& value);
  #if LANG_CXX11
  void set_regularization_type(::std::string&& value);
  #endif
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  ::std::string* mutable_regularization_type();
  ::std::string* release_regularization_type();
  void set_allocated_regularization_type(::std::string* regularization_type);

  // optional string type = 40 [default = "SGD"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 40;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .caffe.NetParameter train_net_param = 21;
  bool has_train_net_param() const;
  void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  const ::caffe::NetParameter& train_net_param() const;
  ::caffe::NetParameter* release_train_net_param();
  ::caffe::NetParameter* mutable_train_net_param();
  void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // optional .caffe.NetParameter net_param = 25;
  bool has_net_param() const;
  void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  const ::caffe::NetParameter& net_param() const;
  ::caffe::NetParameter* release_net_param();
  ::caffe::NetParameter* mutable_net_param();
  void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional .caffe.NetState train_state = 26;
  bool has_train_state() const;
  void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  const ::caffe::NetState& train_state() const;
  ::caffe::NetState* release_train_state();
  ::caffe::NetState* mutable_train_state();
  void set_allocated_train_state(::caffe::NetState* train_state);

  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  ::google::protobuf::int32 test_interval() const;
  void set_test_interval(::google::protobuf::int32 value);

  // optional float base_lr = 5;
  bool has_base_lr() const;
  void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  float base_lr() const;
  void set_base_lr(float value);

  // optional int32 display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  ::google::protobuf::int32 display() const;
  void set_display(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional float gamma = 9;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 9;
  float gamma() const;
  void set_gamma(float value);

  // optional float power = 10;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 10;
  float power() const;
  void set_power(float value);

  // optional float momentum = 11;
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  float momentum() const;
  void set_momentum(float value);

  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  float weight_decay() const;
  void set_weight_decay(float value);

  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  ::google::protobuf::int32 stepsize() const;
  void set_stepsize(::google::protobuf::int32 value);

  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  ::google::protobuf::int32 snapshot() const;
  void set_snapshot(::google::protobuf::int32 value);

  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);

  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);

  // optional bool debug_info = 23 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  bool has_solver_type() const;
  void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  ::caffe::SolverParameter_SolverType solver_type() const;
  void set_solver_type(::caffe::SolverParameter_SolverType value);

  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  ::google::protobuf::int64 random_seed() const;
  void set_random_seed(::google::protobuf::int64 value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  ::caffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional float delta = 31 [default = 1e-008];
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 31;
  float delta() const;
  void set_delta(float value);

  // optional int32 average_loss = 33 [default = 1];
  bool has_average_loss() const;
  void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  ::google::protobuf::int32 average_loss() const;
  void set_average_loss(::google::protobuf::int32 value);

  // optional bool test_initialization = 32 [default = true];
  bool has_test_initialization() const;
  void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  bool test_initialization() const;
  void set_test_initialization(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  bool has_snapshot_after_train() const;
  void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);

  // optional bool layer_wise_reduce = 41 [default = true];
  bool has_layer_wise_reduce() const;
  void clear_layer_wise_reduce();
  static const int kLayerWiseReduceFieldNumber = 41;
  bool layer_wise_reduce() const;
  void set_layer_wise_reduce(bool value);

  // optional float clip_gradients = 35 [default = -1];
  bool has_clip_gradients() const;
  void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  float clip_gradients() const;
  void set_clip_gradients(float value);

  // optional int32 iter_size = 36 [default = 1];
  bool has_iter_size() const;
  void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  ::google::protobuf::int32 iter_size() const;
  void set_iter_size(::google::protobuf::int32 value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  bool has_snapshot_format() const;
  void clear_snapshot_format();
  static const int kSnapshotFormatFieldNumber = 37;
  ::caffe::SolverParameter_SnapshotFormat snapshot_format() const;
  void set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value);

  // optional float rms_decay = 38 [default = 0.99];
  bool has_rms_decay() const;
  void clear_rms_decay();
  static const int kRmsDecayFieldNumber = 38;
  float rms_decay() const;
  void set_rms_decay(float value);

  // optional float momentum2 = 39 [default = 0.999];
  bool has_momentum2() const;
  void clear_momentum2();
  static const int kMomentum2FieldNumber = 39;
  float momentum2() const;
  void set_momentum2(float value);

  // optional float clamp_weights_lower = 42 [default = -999999.875];
  bool has_clamp_weights_lower() const;
  void clear_clamp_weights_lower();
  static const int kClampWeightsLowerFieldNumber = 42;
  float clamp_weights_lower() const;
  void set_clamp_weights_lower(float value);

  // optional float clamp_weights_upper = 43 [default = 999999.875];
  bool has_clamp_weights_upper() const;
  void clear_clamp_weights_upper();
  static const int kClampWeightsUpperFieldNumber = 43;
  float clamp_weights_upper() const;
  void set_clamp_weights_upper(float value);

  // optional float clip_weights = 44 [default = -1];
  bool has_clip_weights() const;
  void clear_clip_weights();
  static const int kClipWeightsFieldNumber = 44;
  float clip_weights() const;
  void set_clip_weights(float value);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  void set_has_net();
  void clear_has_net();
  void set_has_net_param();
  void clear_has_net_param();
  void set_has_train_net();
  void clear_has_train_net();
  void set_has_train_net_param();
  void clear_has_train_net_param();
  void set_has_train_state();
  void clear_has_train_state();
  void set_has_test_interval();
  void clear_has_test_interval();
  void set_has_test_compute_loss();
  void clear_has_test_compute_loss();
  void set_has_test_initialization();
  void clear_has_test_initialization();
  void set_has_base_lr();
  void clear_has_base_lr();
  void set_has_display();
  void clear_has_display();
  void set_has_average_loss();
  void clear_has_average_loss();
  void set_has_max_iter();
  void clear_has_max_iter();
  void set_has_iter_size();
  void clear_has_iter_size();
  void set_has_lr_policy();
  void clear_has_lr_policy();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_power();
  void clear_has_power();
  void set_has_momentum();
  void clear_has_momentum();
  void set_has_weight_decay();
  void clear_has_weight_decay();
  void set_has_regularization_type();
  void clear_has_regularization_type();
  void set_has_stepsize();
  void clear_has_stepsize();
  void set_has_clip_gradients();
  void clear_has_clip_gradients();
  void set_has_clamp_weights_lower();
  void clear_has_clamp_weights_lower();
  void set_has_clamp_weights_upper();
  void clear_has_clamp_weights_upper();
  void set_has_clip_weights();
  void clear_has_clip_weights();
  void set_has_snapshot();
  void clear_has_snapshot();
  void set_has_snapshot_prefix();
  void clear_has_snapshot_prefix();
  void set_has_snapshot_diff();
  void clear_has_snapshot_diff();
  void set_has_snapshot_format();
  void clear_has_snapshot_format();
  void set_has_solver_mode();
  void clear_has_solver_mode();
  void set_has_device_id();
  void clear_has_device_id();
  void set_has_random_seed();
  void clear_has_random_seed();
  void set_has_type();
  void clear_has_type();
  void set_has_delta();
  void clear_has_delta();
  void set_has_momentum2();
  void clear_has_momentum2();
  void set_has_rms_decay();
  void clear_has_rms_decay();
  void set_has_debug_info();
  void clear_has_debug_info();
  void set_has_snapshot_after_train();
  void clear_has_snapshot_after_train();
  void set_has_solver_type();
  void clear_has_solver_type();
  void set_has_layer_wise_reduce();
  void clear_has_layer_wise_reduce();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  ::google::protobuf::internal::ArenaStringPtr train_net_;
  ::google::protobuf::internal::ArenaStringPtr lr_policy_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_prefix_;
  ::google::protobuf::internal::ArenaStringPtr net_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_regularization_type_;
  ::google::protobuf::internal::ArenaStringPtr regularization_type_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::NetParameter* train_net_param_;
  ::caffe::NetParameter* net_param_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::int32 test_interval_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 max_iter_;
  float gamma_;
  float power_;
  float momentum_;
  float weight_decay_;
  ::google::protobuf::int32 stepsize_;
  ::google::protobuf::int32 snapshot_;
  ::google::protobuf::int32 device_id_;
  bool test_compute_loss_;
  bool snapshot_diff_;
  bool debug_info_;
  int solver_type_;
  ::google::protobuf::int64 random_seed_;
  int solver_mode_;
  float delta_;
  ::google::protobuf::int32 average_loss_;
  bool test_initialization_;
  bool snapshot_after_train_;
  bool layer_wise_reduce_;
  float clip_gradients_;
  ::google::protobuf::int32 iter_size_;
  int snapshot_format_;
  float rms_decay_;
  float momentum2_;
  float clamp_weights_lower_;
  float clamp_weights_upper_;
  float clip_weights_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSolverParameterImpl();
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverState) */ {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolverState(SolverState&& from) noexcept
    : SolverState() {
    *this = ::std::move(from);
  }

  inline SolverState& operator=(SolverState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SolverState* other);
  friend void swap(SolverState& a, SolverState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolverState* New() const PROTOBUF_FINAL { return New(NULL); }

  SolverState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolverState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto history = 3;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 3;
  const ::caffe::BlobProto& history(int index) const;
  ::caffe::BlobProto* mutable_history(int index);
  ::caffe::BlobProto* add_history();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;

  // optional string learned_net = 2;
  bool has_learned_net() const;
  void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  const ::std::string& learned_net() const;
  void set_learned_net(const ::std::string& value);
  #if LANG_CXX11
  void set_learned_net(::std::string&& value);
  #endif
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  ::std::string* mutable_learned_net();
  ::std::string* release_learned_net();
  void set_allocated_learned_net(::std::string* learned_net);

  // optional int32 iter = 1;
  bool has_iter() const;
  void clear_iter();
  static const int kIterFieldNumber = 1;
  ::google::protobuf::int32 iter() const;
  void set_iter(::google::protobuf::int32 value);

  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  ::google::protobuf::int32 current_step() const;
  void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  void set_has_iter();
  void clear_has_iter();
  void set_has_learned_net();
  void clear_has_learned_net();
  void set_has_current_step();
  void clear_has_current_step();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;
  ::google::protobuf::internal::ArenaStringPtr learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSolverStateImpl();
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetState) */ {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetState(NetState&& from) noexcept
    : NetState() {
    *this = ::std::move(from);
  }

  inline NetState& operator=(NetState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(NetState* other);
  friend void swap(NetState& a, NetState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetState* New() const PROTOBUF_FINAL { return New(NULL); }

  NetState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 3;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stage(int index, ::std::string&& value);
  #endif
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_stage(::std::string&& value);
  #endif
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional .caffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_level();
  void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::int32 level_;
  int phase_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsNetStateImpl();
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetStateRule) */ {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetStateRule(NetStateRule&& from) noexcept
    : NetStateRule() {
    *this = ::std::move(from);
  }

  inline NetStateRule& operator=(NetStateRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetStateRule* internal_default_instance() {
    return reinterpret_cast<const NetStateRule*>(
               &_NetStateRule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NetStateRule* other);
  friend void swap(NetStateRule& a, NetStateRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetStateRule* New() const PROTOBUF_FINAL { return New(NULL); }

  NetStateRule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetStateRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 4;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 4;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stage(int index, ::std::string&& value);
  #endif
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_stage(::std::string&& value);
  #endif
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  int not_stage_size() const;
  void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  const ::std::string& not_stage(int index) const;
  ::std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_not_stage(int index, ::std::string&& value);
  #endif
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, size_t size);
  ::std::string* add_not_stage();
  void add_not_stage(const ::std::string& value);
  #if LANG_CXX11
  void add_not_stage(::std::string&& value);
  #endif
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // optional .caffe.Phase phase = 1;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  bool has_min_level() const;
  void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  ::google::protobuf::int32 min_level() const;
  void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  bool has_max_level() const;
  void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  ::google::protobuf::int32 max_level() const;
  void set_max_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  void set_has_phase();
  void clear_has_phase();
  void set_has_min_level();
  void clear_has_min_level();
  void set_has_max_level();
  void clear_has_max_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::int32 max_level_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsNetStateRuleImpl();
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParamSpec) */ {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamSpec(ParamSpec&& from) noexcept
    : ParamSpec() {
    *this = ::std::move(from);
  }

  inline ParamSpec& operator=(ParamSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ParamSpec* other);
  friend void swap(ParamSpec& a, ParamSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ParamSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParamSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  ::caffe::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  bool has_lr_mult() const;
  void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  float lr_mult() const;
  void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  bool has_decay_mult() const;
  void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  float decay_mult() const;
  void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_share_mode();
  void clear_has_share_mode();
  void set_has_lr_mult();
  void clear_has_lr_mult();
  void set_has_decay_mult();
  void clear_has_decay_mult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsParamSpecImpl();
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(LayerParameter* other);
  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bottom = 3;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bottom(int index, ::std::string&& value);
  #endif
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  #if LANG_CXX11
  void add_bottom(::std::string&& value);
  #endif
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 4;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_top(int index, ::std::string&& value);
  #endif
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  #if LANG_CXX11
  void add_top(::std::string&& value);
  #endif
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.ParamSpec param = 6;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 6;
  const ::caffe::ParamSpec& param(int index) const;
  ::caffe::ParamSpec* mutable_param(int index);
  ::caffe::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;

  // repeated .caffe.BlobProto blobs = 7;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated .caffe.NetStateRule include = 8;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 8;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 9;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // repeated bool propagate_down = 11;
  int propagate_down_size() const;
  void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .caffe.TransformationParameter transform_param = 100;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* release_transform_param();
  ::caffe::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* release_loss_param();
  ::caffe::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* release_accuracy_param();
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* release_argmax_param();
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* release_concat_param();
  ::caffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* release_convolution_param();
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 107;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* release_data_param();
  ::caffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* release_dropout_param();
  ::caffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* release_dummy_data_param();
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* release_eltwise_param();
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ExpParameter exp_param = 111;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* release_exp_param();
  ::caffe::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* release_image_data_param();
  ::caffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* release_inner_product_param();
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* release_lrn_param();
  ::caffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* release_memory_data_param();
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* release_mvn_param();
  ::caffe::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* release_pooling_param();
  ::caffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* release_power_param();
  ::caffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* release_relu_param();
  ::caffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* release_sigmoid_param();
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* release_softmax_param();
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SliceParameter slice_param = 126;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* release_slice_param();
  ::caffe::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* release_tanh_param();
  ::caffe::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* release_threshold_param();
  ::caffe::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* release_window_data_param();
  ::caffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.PythonParameter python_param = 130;
  bool has_python_param() const;
  void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  const ::caffe::PythonParameter& python_param() const;
  ::caffe::PythonParameter* release_python_param();
  ::caffe::PythonParameter* mutable_python_param();
  void set_allocated_python_param(::caffe::PythonParameter* python_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  const ::caffe::PReLUParameter& prelu_param() const;
  ::caffe::PReLUParameter* release_prelu_param();
  ::caffe::PReLUParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.SPPParameter spp_param = 132;
  bool has_spp_param() const;
  void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  const ::caffe::SPPParameter& spp_param() const;
  ::caffe::SPPParameter* release_spp_param();
  ::caffe::SPPParameter* mutable_spp_param();
  void set_allocated_spp_param(::caffe::SPPParameter* spp_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  bool has_reshape_param() const;
  void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  const ::caffe::ReshapeParameter& reshape_param() const;
  ::caffe::ReshapeParameter* release_reshape_param();
  ::caffe::ReshapeParameter* mutable_reshape_param();
  void set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param);

  // optional .caffe.LogParameter log_param = 134;
  bool has_log_param() const;
  void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  const ::caffe::LogParameter& log_param() const;
  ::caffe::LogParameter* release_log_param();
  ::caffe::LogParameter* mutable_log_param();
  void set_allocated_log_param(::caffe::LogParameter* log_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  bool has_flatten_param() const;
  void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  const ::caffe::FlattenParameter& flatten_param() const;
  ::caffe::FlattenParameter* release_flatten_param();
  ::caffe::FlattenParameter* mutable_flatten_param();
  void set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  bool has_reduction_param() const;
  void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  const ::caffe::ReductionParameter& reduction_param() const;
  ::caffe::ReductionParameter* release_reduction_param();
  ::caffe::ReductionParameter* mutable_reduction_param();
  void set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param);

  // optional .caffe.EmbedParameter embed_param = 137;
  bool has_embed_param() const;
  void clear_embed_param();
  static const int kEmbedParamFieldNumber = 137;
  const ::caffe::EmbedParameter& embed_param() const;
  ::caffe::EmbedParameter* release_embed_param();
  ::caffe::EmbedParameter* mutable_embed_param();
  void set_allocated_embed_param(::caffe::EmbedParameter* embed_param);

  // optional .caffe.TileParameter tile_param = 138;
  bool has_tile_param() const;
  void clear_tile_param();
  static const int kTileParamFieldNumber = 138;
  const ::caffe::TileParameter& tile_param() const;
  ::caffe::TileParameter* release_tile_param();
  ::caffe::TileParameter* mutable_tile_param();
  void set_allocated_tile_param(::caffe::TileParameter* tile_param);

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  bool has_batch_norm_param() const;
  void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 139;
  const ::caffe::BatchNormParameter& batch_norm_param() const;
  ::caffe::BatchNormParameter* release_batch_norm_param();
  ::caffe::BatchNormParameter* mutable_batch_norm_param();
  void set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param);

  // optional .caffe.ELUParameter elu_param = 140;
  bool has_elu_param() const;
  void clear_elu_param();
  static const int kEluParamFieldNumber = 140;
  const ::caffe::ELUParameter& elu_param() const;
  ::caffe::ELUParameter* release_elu_param();
  ::caffe::ELUParameter* mutable_elu_param();
  void set_allocated_elu_param(::caffe::ELUParameter* elu_param);

  // optional .caffe.BiasParameter bias_param = 141;
  bool has_bias_param() const;
  void clear_bias_param();
  static const int kBiasParamFieldNumber = 141;
  const ::caffe::BiasParameter& bias_param() const;
  ::caffe::BiasParameter* release_bias_param();
  ::caffe::BiasParameter* mutable_bias_param();
  void set_allocated_bias_param(::caffe::BiasParameter* bias_param);

  // optional .caffe.ScaleParameter scale_param = 142;
  bool has_scale_param() const;
  void clear_scale_param();
  static const int kScaleParamFieldNumber = 142;
  const ::caffe::ScaleParameter& scale_param() const;
  ::caffe::ScaleParameter* release_scale_param();
  ::caffe::ScaleParameter* mutable_scale_param();
  void set_allocated_scale_param(::caffe::ScaleParameter* scale_param);

  // optional .caffe.InputParameter input_param = 143;
  bool has_input_param() const;
  void clear_input_param();
  static const int kInputParamFieldNumber = 143;
  const ::caffe::InputParameter& input_param() const;
  ::caffe::InputParameter* release_input_param();
  ::caffe::InputParameter* mutable_input_param();
  void set_allocated_input_param(::caffe::InputParameter* input_param);

  // optional .caffe.CropParameter crop_param = 144;
  bool has_crop_param() const;
  void clear_crop_param();
  static const int kCropParamFieldNumber = 144;
  const ::caffe::CropParameter& crop_param() const;
  ::caffe::CropParameter* release_crop_param();
  ::caffe::CropParameter* mutable_crop_param();
  void set_allocated_crop_param(::caffe::CropParameter* crop_param);

  // optional .caffe.ParameterParameter parameter_param = 145;
  bool has_parameter_param() const;
  void clear_parameter_param();
  static const int kParameterParamFieldNumber = 145;
  const ::caffe::ParameterParameter& parameter_param() const;
  ::caffe::ParameterParameter* release_parameter_param();
  ::caffe::ParameterParameter* mutable_parameter_param();
  void set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param);

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  bool has_recurrent_param() const;
  void clear_recurrent_param();
  static const int kRecurrentParamFieldNumber = 146;
  const ::caffe::RecurrentParameter& recurrent_param() const;
  ::caffe::RecurrentParameter* release_recurrent_param();
  ::caffe::RecurrentParameter* mutable_recurrent_param();
  void set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param);

  // optional .caffe.BNParameter bn_param = 200;
  bool has_bn_param() const;
  void clear_bn_param();
  static const int kBnParamFieldNumber = 200;
  const ::caffe::BNParameter& bn_param() const;
  ::caffe::BNParameter* release_bn_param();
  ::caffe::BNParameter* mutable_bn_param();
  void set_allocated_bn_param(::caffe::BNParameter* bn_param);

  // optional .caffe.LocalParameter local_param = 201;
  bool has_local_param() const;
  void clear_local_param();
  static const int kLocalParamFieldNumber = 201;
  const ::caffe::LocalParameter& local_param() const;
  ::caffe::LocalParameter* release_local_param();
  ::caffe::LocalParameter* mutable_local_param();
  void set_allocated_local_param(::caffe::LocalParameter* local_param);

  // optional .caffe.InsanityParameter insanity_param = 202;
  bool has_insanity_param() const;
  void clear_insanity_param();
  static const int kInsanityParamFieldNumber = 202;
  const ::caffe::InsanityParameter& insanity_param() const;
  ::caffe::InsanityParameter* release_insanity_param();
  ::caffe::InsanityParameter* mutable_insanity_param();
  void set_allocated_insanity_param(::caffe::InsanityParameter* insanity_param);

  // optional .caffe.TripletLossParameter triplet_loss_param = 203;
  bool has_triplet_loss_param() const;
  void clear_triplet_loss_param();
  static const int kTripletLossParamFieldNumber = 203;
  const ::caffe::TripletLossParameter& triplet_loss_param() const;
  ::caffe::TripletLossParameter* release_triplet_loss_param();
  ::caffe::TripletLossParameter* mutable_triplet_loss_param();
  void set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param);

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 204;
  bool has_roi_pooling_param() const;
  void clear_roi_pooling_param();
  static const int kRoiPoolingParamFieldNumber = 204;
  const ::caffe::ROIPoolingParameter& roi_pooling_param() const;
  ::caffe::ROIPoolingParameter* release_roi_pooling_param();
  ::caffe::ROIPoolingParameter* mutable_roi_pooling_param();
  void set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param);

  // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 205;
  bool has_eltwise_affine_param() const;
  void clear_eltwise_affine_param();
  static const int kEltwiseAffineParamFieldNumber = 205;
  const ::caffe::EltwiseAffineParameter& eltwise_affine_param() const;
  ::caffe::EltwiseAffineParameter* release_eltwise_affine_param();
  ::caffe::EltwiseAffineParameter* mutable_eltwise_affine_param();
  void set_allocated_eltwise_affine_param(::caffe::EltwiseAffineParameter* eltwise_affine_param);

  // optional .caffe.SubRegionParameter sub_region_param = 206;
  bool has_sub_region_param() const;
  void clear_sub_region_param();
  static const int kSubRegionParamFieldNumber = 206;
  const ::caffe::SubRegionParameter& sub_region_param() const;
  ::caffe::SubRegionParameter* release_sub_region_param();
  ::caffe::SubRegionParameter* mutable_sub_region_param();
  void set_allocated_sub_region_param(::caffe::SubRegionParameter* sub_region_param);

  // optional .caffe.NoiseParameter noise_param = 207;
  bool has_noise_param() const;
  void clear_noise_param();
  static const int kNoiseParamFieldNumber = 207;
  const ::caffe::NoiseParameter& noise_param() const;
  ::caffe::NoiseParameter* release_noise_param();
  ::caffe::NoiseParameter* mutable_noise_param();
  void set_allocated_noise_param(::caffe::NoiseParameter* noise_param);

  // optional .caffe.HotspotParameter hotspot_param = 208;
  bool has_hotspot_param() const;
  void clear_hotspot_param();
  static const int kHotspotParamFieldNumber = 208;
  const ::caffe::HotspotParameter& hotspot_param() const;
  ::caffe::HotspotParameter* release_hotspot_param();
  ::caffe::HotspotParameter* mutable_hotspot_param();
  void set_allocated_hotspot_param(::caffe::HotspotParameter* hotspot_param);

  // optional .caffe.PredictBoxParameter predict_box_param = 209;
  bool has_predict_box_param() const;
  void clear_predict_box_param();
  static const int kPredictBoxParamFieldNumber = 209;
  const ::caffe::PredictBoxParameter& predict_box_param() const;
  ::caffe::PredictBoxParameter* release_predict_box_param();
  ::caffe::PredictBoxParameter* mutable_predict_box_param();
  void set_allocated_predict_box_param(::caffe::PredictBoxParameter* predict_box_param);

  // optional .caffe.FCNDataParameter fcn_data_param = 210;
  bool has_fcn_data_param() const;
  void clear_fcn_data_param();
  static const int kFcnDataParamFieldNumber = 210;
  const ::caffe::FCNDataParameter& fcn_data_param() const;
  ::caffe::FCNDataParameter* release_fcn_data_param();
  ::caffe::FCNDataParameter* mutable_fcn_data_param();
  void set_allocated_fcn_data_param(::caffe::FCNDataParameter* fcn_data_param);

  // optional .caffe.CenterLossParameter center_loss_param = 211;
  bool has_center_loss_param() const;
  void clear_center_loss_param();
  static const int kCenterLossParamFieldNumber = 211;
  const ::caffe::CenterLossParameter& center_loss_param() const;
  ::caffe::CenterLossParameter* release_center_loss_param();
  ::caffe::CenterLossParameter* mutable_center_loss_param();
  void set_allocated_center_loss_param(::caffe::CenterLossParameter* center_loss_param);

  // optional .caffe.FlipParameter flip_param = 212;
  bool has_flip_param() const;
  void clear_flip_param();
  static const int kFlipParamFieldNumber = 212;
  const ::caffe::FlipParameter& flip_param() const;
  ::caffe::FlipParameter* release_flip_param();
  ::caffe::FlipParameter* mutable_flip_param();
  void set_allocated_flip_param(::caffe::FlipParameter* flip_param);

  // optional .caffe.InnerDistanceParameter inner_distance_param = 213;
  bool has_inner_distance_param() const;
  void clear_inner_distance_param();
  static const int kInnerDistanceParamFieldNumber = 213;
  const ::caffe::InnerDistanceParameter& inner_distance_param() const;
  ::caffe::InnerDistanceParameter* release_inner_distance_param();
  ::caffe::InnerDistanceParameter* mutable_inner_distance_param();
  void set_allocated_inner_distance_param(::caffe::InnerDistanceParameter* inner_distance_param);

  // optional .caffe.NormalizeParameter normalize_param = 214;
  bool has_normalize_param() const;
  void clear_normalize_param();
  static const int kNormalizeParamFieldNumber = 214;
  const ::caffe::NormalizeParameter& normalize_param() const;
  ::caffe::NormalizeParameter* release_normalize_param();
  ::caffe::NormalizeParameter* mutable_normalize_param();
  void set_allocated_normalize_param(::caffe::NormalizeParameter* normalize_param);

  // optional .caffe.GeneralContrastiveParameter general_contrastive_loss_param = 215;
  bool has_general_contrastive_loss_param() const;
  void clear_general_contrastive_loss_param();
  static const int kGeneralContrastiveLossParamFieldNumber = 215;
  const ::caffe::GeneralContrastiveParameter& general_contrastive_loss_param() const;
  ::caffe::GeneralContrastiveParameter* release_general_contrastive_loss_param();
  ::caffe::GeneralContrastiveParameter* mutable_general_contrastive_loss_param();
  void set_allocated_general_contrastive_loss_param(::caffe::GeneralContrastiveParameter* general_contrastive_loss_param);

  // optional .caffe.SoftContrastiveParameter soft_contrastive_loss_param = 216;
  bool has_soft_contrastive_loss_param() const;
  void clear_soft_contrastive_loss_param();
  static const int kSoftContrastiveLossParamFieldNumber = 216;
  const ::caffe::SoftContrastiveParameter& soft_contrastive_loss_param() const;
  ::caffe::SoftContrastiveParameter* release_soft_contrastive_loss_param();
  ::caffe::SoftContrastiveParameter* mutable_soft_contrastive_loss_param();
  void set_allocated_soft_contrastive_loss_param(::caffe::SoftContrastiveParameter* soft_contrastive_loss_param);

  // optional .caffe.GeneralTripletParameter general_triplet_loss_param = 217;
  bool has_general_triplet_loss_param() const;
  void clear_general_triplet_loss_param();
  static const int kGeneralTripletLossParamFieldNumber = 217;
  const ::caffe::GeneralTripletParameter& general_triplet_loss_param() const;
  ::caffe::GeneralTripletParameter* release_general_triplet_loss_param();
  ::caffe::GeneralTripletParameter* mutable_general_triplet_loss_param();
  void set_allocated_general_triplet_loss_param(::caffe::GeneralTripletParameter* general_triplet_loss_param);

  // optional .caffe.SoftTruncationParameter soft_truncation_param = 218;
  bool has_soft_truncation_param() const;
  void clear_soft_truncation_param();
  static const int kSoftTruncationParamFieldNumber = 218;
  const ::caffe::SoftTruncationParameter& soft_truncation_param() const;
  ::caffe::SoftTruncationParameter* release_soft_truncation_param();
  ::caffe::SoftTruncationParameter* mutable_soft_truncation_param();
  void set_allocated_soft_truncation_param(::caffe::SoftTruncationParameter* soft_truncation_param);

  // optional .caffe.ProposalParameter proposal_param = 219;
  bool has_proposal_param() const;
  void clear_proposal_param();
  static const int kProposalParamFieldNumber = 219;
  const ::caffe::ProposalParameter& proposal_param() const;
  ::caffe::ProposalParameter* release_proposal_param();
  ::caffe::ProposalParameter* mutable_proposal_param();
  void set_allocated_proposal_param(::caffe::ProposalParameter* proposal_param);

  // optional .caffe.PSROIPoolingParameter psroi_pooling_param = 220;
  bool has_psroi_pooling_param() const;
  void clear_psroi_pooling_param();
  static const int kPsroiPoolingParamFieldNumber = 220;
  const ::caffe::PSROIPoolingParameter& psroi_pooling_param() const;
  ::caffe::PSROIPoolingParameter* release_psroi_pooling_param();
  ::caffe::PSROIPoolingParameter* mutable_psroi_pooling_param();
  void set_allocated_psroi_pooling_param(::caffe::PSROIPoolingParameter* psroi_pooling_param);

  // optional .caffe.PairwiseParameter pairwise_param = 221;
  bool has_pairwise_param() const;
  void clear_pairwise_param();
  static const int kPairwiseParamFieldNumber = 221;
  const ::caffe::PairwiseParameter& pairwise_param() const;
  ::caffe::PairwiseParameter* release_pairwise_param();
  ::caffe::PairwiseParameter* mutable_pairwise_param();
  void set_allocated_pairwise_param(::caffe::PairwiseParameter* pairwise_param);

  // optional .caffe.SmoothL1Parameter smoothl1_param = 222;
  bool has_smoothl1_param() const;
  void clear_smoothl1_param();
  static const int kSmoothl1ParamFieldNumber = 222;
  const ::caffe::SmoothL1Parameter& smoothl1_param() const;
  ::caffe::SmoothL1Parameter* release_smoothl1_param();
  ::caffe::SmoothL1Parameter* mutable_smoothl1_param();
  void set_allocated_smoothl1_param(::caffe::SmoothL1Parameter* smoothl1_param);

  // optional .caffe.BatchContrastiveParameter batch_contrastive_loss_param = 223;
  bool has_batch_contrastive_loss_param() const;
  void clear_batch_contrastive_loss_param();
  static const int kBatchContrastiveLossParamFieldNumber = 223;
  const ::caffe::BatchContrastiveParameter& batch_contrastive_loss_param() const;
  ::caffe::BatchContrastiveParameter* release_batch_contrastive_loss_param();
  ::caffe::BatchContrastiveParameter* mutable_batch_contrastive_loss_param();
  void set_allocated_batch_contrastive_loss_param(::caffe::BatchContrastiveParameter* batch_contrastive_loss_param);

  // optional .caffe.PermuteParameter permute_param = 224;
  bool has_permute_param() const;
  void clear_permute_param();
  static const int kPermuteParamFieldNumber = 224;
  const ::caffe::PermuteParameter& permute_param() const;
  ::caffe::PermuteParameter* release_permute_param();
  ::caffe::PermuteParameter* mutable_permute_param();
  void set_allocated_permute_param(::caffe::PermuteParameter* permute_param);

  // optional .caffe.TruncationParameter truncation_param = 225;
  bool has_truncation_param() const;
  void clear_truncation_param();
  static const int kTruncationParamFieldNumber = 225;
  const ::caffe::TruncationParameter& truncation_param() const;
  ::caffe::TruncationParameter* release_truncation_param();
  ::caffe::TruncationParameter* mutable_truncation_param();
  void set_allocated_truncation_param(::caffe::TruncationParameter* truncation_param);

  // optional .caffe.NCAParameter nca_param = 226;
  bool has_nca_param() const;
  void clear_nca_param();
  static const int kNcaParamFieldNumber = 226;
  const ::caffe::NCAParameter& nca_param() const;
  ::caffe::NCAParameter* release_nca_param();
  ::caffe::NCAParameter* mutable_nca_param();
  void set_allocated_nca_param(::caffe::NCAParameter* nca_param);

  // optional .caffe.LargeMarginInnerProductParameter largemargin_inner_product_param = 227;
  bool has_largemargin_inner_product_param() const;
  void clear_largemargin_inner_product_param();
  static const int kLargemarginInnerProductParamFieldNumber = 227;
  const ::caffe::LargeMarginInnerProductParameter& largemargin_inner_product_param() const;
  ::caffe::LargeMarginInnerProductParameter* release_largemargin_inner_product_param();
  ::caffe::LargeMarginInnerProductParameter* mutable_largemargin_inner_product_param();
  void set_allocated_largemargin_inner_product_param(::caffe::LargeMarginInnerProductParameter* largemargin_inner_product_param);

  // optional .caffe.LabelSpecificRescaleParameter label_specific_rescale_param = 228;
  bool has_label_specific_rescale_param() const;
  void clear_label_specific_rescale_param();
  static const int kLabelSpecificRescaleParamFieldNumber = 228;
  const ::caffe::LabelSpecificRescaleParameter& label_specific_rescale_param() const;
  ::caffe::LabelSpecificRescaleParameter* release_label_specific_rescale_param();
  ::caffe::LabelSpecificRescaleParameter* mutable_label_specific_rescale_param();
  void set_allocated_label_specific_rescale_param(::caffe::LabelSpecificRescaleParameter* label_specific_rescale_param);

  // optional .caffe.InfimumLossParamter infimum_loss_param = 229;
  bool has_infimum_loss_param() const;
  void clear_infimum_loss_param();
  static const int kInfimumLossParamFieldNumber = 229;
  const ::caffe::InfimumLossParamter& infimum_loss_param() const;
  ::caffe::InfimumLossParamter* release_infimum_loss_param();
  ::caffe::InfimumLossParamter* mutable_infimum_loss_param();
  void set_allocated_infimum_loss_param(::caffe::InfimumLossParamter* infimum_loss_param);

  // optional .caffe.OrdinalRegressionParameter ordinal_regression_loss_param = 230;
  bool has_ordinal_regression_loss_param() const;
  void clear_ordinal_regression_loss_param();
  static const int kOrdinalRegressionLossParamFieldNumber = 230;
  const ::caffe::OrdinalRegressionParameter& ordinal_regression_loss_param() const;
  ::caffe::OrdinalRegressionParameter* release_ordinal_regression_loss_param();
  ::caffe::OrdinalRegressionParameter* mutable_ordinal_regression_loss_param();
  void set_allocated_ordinal_regression_loss_param(::caffe::OrdinalRegressionParameter* ordinal_regression_loss_param);

  // optional .caffe.ResizeParameter resize_param = 231;
  bool has_resize_param() const;
  void clear_resize_param();
  static const int kResizeParamFieldNumber = 231;
  const ::caffe::ResizeParameter& resize_param() const;
  ::caffe::ResizeParameter* release_resize_param();
  ::caffe::ResizeParameter* mutable_resize_param();
  void set_allocated_resize_param(::caffe::ResizeParameter* resize_param);

  // optional .caffe.MarginInnerProductParameter margin_inner_product_param = 232;
  bool has_margin_inner_product_param() const;
  void clear_margin_inner_product_param();
  static const int kMarginInnerProductParamFieldNumber = 232;
  const ::caffe::MarginInnerProductParameter& margin_inner_product_param() const;
  ::caffe::MarginInnerProductParameter* release_margin_inner_product_param();
  ::caffe::MarginInnerProductParameter* mutable_margin_inner_product_param();
  void set_allocated_margin_inner_product_param(::caffe::MarginInnerProductParameter* margin_inner_product_param);

  // optional .caffe.FeatureDecayLossParameter feature_decay_loss_param = 233;
  bool has_feature_decay_loss_param() const;
  void clear_feature_decay_loss_param();
  static const int kFeatureDecayLossParamFieldNumber = 233;
  const ::caffe::FeatureDecayLossParameter& feature_decay_loss_param() const;
  ::caffe::FeatureDecayLossParameter* release_feature_decay_loss_param();
  ::caffe::FeatureDecayLossParameter* mutable_feature_decay_loss_param();
  void set_allocated_feature_decay_loss_param(::caffe::FeatureDecayLossParameter* feature_decay_loss_param);

  // optional .caffe.ConfidencePenaltyLossParameter confidence_penalty_loss_param = 234;
  bool has_confidence_penalty_loss_param() const;
  void clear_confidence_penalty_loss_param();
  static const int kConfidencePenaltyLossParamFieldNumber = 234;
  const ::caffe::ConfidencePenaltyLossParameter& confidence_penalty_loss_param() const;
  ::caffe::ConfidencePenaltyLossParameter* release_confidence_penalty_loss_param();
  ::caffe::ConfidencePenaltyLossParameter* mutable_confidence_penalty_loss_param();
  void set_allocated_confidence_penalty_loss_param(::caffe::ConfidencePenaltyLossParameter* confidence_penalty_loss_param);

  // optional .caffe.FocalLossParameter focal_loss_param = 235;
  bool has_focal_loss_param() const;
  void clear_focal_loss_param();
  static const int kFocalLossParamFieldNumber = 235;
  const ::caffe::FocalLossParameter& focal_loss_param() const;
  ::caffe::FocalLossParameter* release_focal_loss_param();
  ::caffe::FocalLossParameter* mutable_focal_loss_param();
  void set_allocated_focal_loss_param(::caffe::FocalLossParameter* focal_loss_param);

  // optional .caffe.LabelSpecificMarginParameter label_specific_margin_param = 236;
  bool has_label_specific_margin_param() const;
  void clear_label_specific_margin_param();
  static const int kLabelSpecificMarginParamFieldNumber = 236;
  const ::caffe::LabelSpecificMarginParameter& label_specific_margin_param() const;
  ::caffe::LabelSpecificMarginParameter* release_label_specific_margin_param();
  ::caffe::LabelSpecificMarginParameter* mutable_label_specific_margin_param();
  void set_allocated_label_specific_margin_param(::caffe::LabelSpecificMarginParameter* label_specific_margin_param);

  // optional .caffe.ChannelScaleParameter channel_scale_param = 237;
  bool has_channel_scale_param() const;
  void clear_channel_scale_param();
  static const int kChannelScaleParamFieldNumber = 237;
  const ::caffe::ChannelScaleParameter& channel_scale_param() const;
  ::caffe::ChannelScaleParameter* release_channel_scale_param();
  ::caffe::ChannelScaleParameter* mutable_channel_scale_param();
  void set_allocated_channel_scale_param(::caffe::ChannelScaleParameter* channel_scale_param);

  // optional .caffe.LabelSpecificAffineParameter label_specific_affine_param = 238;
  bool has_label_specific_affine_param() const;
  void clear_label_specific_affine_param();
  static const int kLabelSpecificAffineParamFieldNumber = 238;
  const ::caffe::LabelSpecificAffineParameter& label_specific_affine_param() const;
  ::caffe::LabelSpecificAffineParameter* release_label_specific_affine_param();
  ::caffe::LabelSpecificAffineParameter* mutable_label_specific_affine_param();
  void set_allocated_label_specific_affine_param(::caffe::LabelSpecificAffineParameter* label_specific_affine_param);

  // optional .caffe.LabelSpecificHardMarginParameter label_specific_hard_margin_param = 239;
  bool has_label_specific_hard_margin_param() const;
  void clear_label_specific_hard_margin_param();
  static const int kLabelSpecificHardMarginParamFieldNumber = 239;
  const ::caffe::LabelSpecificHardMarginParameter& label_specific_hard_margin_param() const;
  ::caffe::LabelSpecificHardMarginParameter* release_label_specific_hard_margin_param();
  ::caffe::LabelSpecificHardMarginParameter* mutable_label_specific_hard_margin_param();
  void set_allocated_label_specific_hard_margin_param(::caffe::LabelSpecificHardMarginParameter* label_specific_hard_margin_param);

  // optional .caffe.LabelSpecificAddParameter label_specific_add_param = 241;
  bool has_label_specific_add_param() const;
  void clear_label_specific_add_param();
  static const int kLabelSpecificAddParamFieldNumber = 241;
  const ::caffe::LabelSpecificAddParameter& label_specific_add_param() const;
  ::caffe::LabelSpecificAddParameter* release_label_specific_add_param();
  ::caffe::LabelSpecificAddParameter* mutable_label_specific_add_param();
  void set_allocated_label_specific_add_param(::caffe::LabelSpecificAddParameter* label_specific_add_param);

  // optional .caffe.MILDataParameter mil_data_param = 5065028;
  bool has_mil_data_param() const;
  void clear_mil_data_param();
  static const int kMilDataParamFieldNumber = 5065028;
  const ::caffe::MILDataParameter& mil_data_param() const;
  ::caffe::MILDataParameter* release_mil_data_param();
  ::caffe::MILDataParameter* mutable_mil_data_param();
  void set_allocated_mil_data_param(::caffe::MILDataParameter* mil_data_param);

  // optional .caffe.MILParameter mil_param = 5065036;
  bool has_mil_param() const;
  void clear_mil_param();
  static const int kMilParamFieldNumber = 5065036;
  const ::caffe::MILParameter& mil_param() const;
  ::caffe::MILParameter* release_mil_param();
  ::caffe::MILParameter* mutable_mil_param();
  void set_allocated_mil_param(::caffe::MILParameter* mil_param);

  // optional .caffe.Phase phase = 10;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 10;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_phase();
  void clear_has_phase();
  void set_has_transform_param();
  void clear_has_transform_param();
  void set_has_loss_param();
  void clear_has_loss_param();
  void set_has_accuracy_param();
  void clear_has_accuracy_param();
  void set_has_argmax_param();
  void clear_has_argmax_param();
  void set_has_batch_norm_param();
  void clear_has_batch_norm_param();
  void set_has_bias_param();
  void clear_has_bias_param();
  void set_has_concat_param();
  void clear_has_concat_param();
  void set_has_contrastive_loss_param();
  void clear_has_contrastive_loss_param();
  void set_has_convolution_param();
  void clear_has_convolution_param();
  void set_has_crop_param();
  void clear_has_crop_param();
  void set_has_data_param();
  void clear_has_data_param();
  void set_has_dropout_param();
  void clear_has_dropout_param();
  void set_has_dummy_data_param();
  void clear_has_dummy_data_param();
  void set_has_eltwise_param();
  void clear_has_eltwise_param();
  void set_has_elu_param();
  void clear_has_elu_param();
  void set_has_embed_param();
  void clear_has_embed_param();
  void set_has_exp_param();
  void clear_has_exp_param();
  void set_has_flatten_param();
  void clear_has_flatten_param();
  void set_has_hdf5_data_param();
  void clear_has_hdf5_data_param();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();
  void set_has_hinge_loss_param();
  void clear_has_hinge_loss_param();
  void set_has_image_data_param();
  void clear_has_image_data_param();
  void set_has_infogain_loss_param();
  void clear_has_infogain_loss_param();
  void set_has_inner_product_param();
  void clear_has_inner_product_param();
  void set_has_input_param();
  void clear_has_input_param();
  void set_has_log_param();
  void clear_has_log_param();
  void set_has_lrn_param();
  void clear_has_lrn_param();
  void set_has_memory_data_param();
  void clear_has_memory_data_param();
  void set_has_mvn_param();
  void clear_has_mvn_param();
  void set_has_parameter_param();
  void clear_has_parameter_param();
  void set_has_pooling_param();
  void clear_has_pooling_param();
  void set_has_power_param();
  void clear_has_power_param();
  void set_has_prelu_param();
  void clear_has_prelu_param();
  void set_has_python_param();
  void clear_has_python_param();
  void set_has_recurrent_param();
  void clear_has_recurrent_param();
  void set_has_reduction_param();
  void clear_has_reduction_param();
  void set_has_relu_param();
  void clear_has_relu_param();
  void set_has_reshape_param();
  void clear_has_reshape_param();
  void set_has_scale_param();
  void clear_has_scale_param();
  void set_has_sigmoid_param();
  void clear_has_sigmoid_param();
  void set_has_softmax_param();
  void clear_has_softmax_param();
  void set_has_spp_param();
  void clear_has_spp_param();
  void set_has_slice_param();
  void clear_has_slice_param();
  void set_has_tanh_param();
  void clear_has_tanh_param();
  void set_has_threshold_param();
  void clear_has_threshold_param();
  void set_has_tile_param();
  void clear_has_tile_param();
  void set_has_window_data_param();
  void clear_has_window_data_param();
  void set_has_bn_param();
  void clear_has_bn_param();
  void set_has_local_param();
  void clear_has_local_param();
  void set_has_insanity_param();
  void clear_has_insanity_param();
  void set_has_triplet_loss_param();
  void clear_has_triplet_loss_param();
  void set_has_roi_pooling_param();
  void clear_has_roi_pooling_param();
  void set_has_eltwise_affine_param();
  void clear_has_eltwise_affine_param();
  void set_has_sub_region_param();
  void clear_has_sub_region_param();
  void set_has_noise_param();
  void clear_has_noise_param();
  void set_has_hotspot_param();
  void clear_has_hotspot_param();
  void set_has_predict_box_param();
  void clear_has_predict_box_param();
  void set_has_mil_data_param();
  void clear_has_mil_data_param();
  void set_has_mil_param();
  void clear_has_mil_param();
  void set_has_fcn_data_param();
  void clear_has_fcn_data_param();
  void set_has_center_loss_param();
  void clear_has_center_loss_param();
  void set_has_flip_param();
  void clear_has_flip_param();
  void set_has_inner_distance_param();
  void clear_has_inner_distance_param();
  void set_has_normalize_param();
  void clear_has_normalize_param();
  void set_has_general_contrastive_loss_param();
  void clear_has_general_contrastive_loss_param();
  void set_has_soft_contrastive_loss_param();
  void clear_has_soft_contrastive_loss_param();
  void set_has_general_triplet_loss_param();
  void clear_has_general_triplet_loss_param();
  void set_has_soft_truncation_param();
  void clear_has_soft_truncation_param();
  void set_has_proposal_param();
  void clear_has_proposal_param();
  void set_has_psroi_pooling_param();
  void clear_has_psroi_pooling_param();
  void set_has_pairwise_param();
  void clear_has_pairwise_param();
  void set_has_smoothl1_param();
  void clear_has_smoothl1_param();
  void set_has_batch_contrastive_loss_param();
  void clear_has_batch_contrastive_loss_param();
  void set_has_permute_param();
  void clear_has_permute_param();
  void set_has_truncation_param();
  void clear_has_truncation_param();
  void set_has_nca_param();
  void clear_has_nca_param();
  void set_has_largemargin_inner_product_param();
  void clear_has_largemargin_inner_product_param();
  void set_has_label_specific_rescale_param();
  void clear_has_label_specific_rescale_param();
  void set_has_infimum_loss_param();
  void clear_has_infimum_loss_param();
  void set_has_ordinal_regression_loss_param();
  void clear_has_ordinal_regression_loss_param();
  void set_has_resize_param();
  void clear_has_resize_param();
  void set_has_margin_inner_product_param();
  void clear_has_margin_inner_product_param();
  void set_has_feature_decay_loss_param();
  void clear_has_feature_decay_loss_param();
  void set_has_confidence_penalty_loss_param();
  void clear_has_confidence_penalty_loss_param();
  void set_has_focal_loss_param();
  void clear_has_focal_loss_param();
  void set_has_label_specific_margin_param();
  void clear_has_label_specific_margin_param();
  void set_has_channel_scale_param();
  void clear_has_channel_scale_param();
  void set_has_label_specific_affine_param();
  void clear_has_label_specific_affine_param();
  void set_has_label_specific_hard_margin_param();
  void clear_has_label_specific_hard_margin_param();
  void set_has_label_specific_add_param();
  void clear_has_label_specific_add_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::PythonParameter* python_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::SPPParameter* spp_param_;
  ::caffe::ReshapeParameter* reshape_param_;
  ::caffe::LogParameter* log_param_;
  ::caffe::FlattenParameter* flatten_param_;
  ::caffe::ReductionParameter* reduction_param_;
  ::caffe::EmbedParameter* embed_param_;
  ::caffe::TileParameter* tile_param_;
  ::caffe::BatchNormParameter* batch_norm_param_;
  ::caffe::ELUParameter* elu_param_;
  ::caffe::BiasParameter* bias_param_;
  ::caffe::ScaleParameter* scale_param_;
  ::caffe::InputParameter* input_param_;
  ::caffe::CropParameter* crop_param_;
  ::caffe::ParameterParameter* parameter_param_;
  ::caffe::RecurrentParameter* recurrent_param_;
  ::caffe::BNParameter* bn_param_;
  ::caffe::LocalParameter* local_param_;
  ::caffe::InsanityParameter* insanity_param_;
  ::caffe::TripletLossParameter* triplet_loss_param_;
  ::caffe::ROIPoolingParameter* roi_pooling_param_;
  ::caffe::EltwiseAffineParameter* eltwise_affine_param_;
  ::caffe::SubRegionParameter* sub_region_param_;
  ::caffe::NoiseParameter* noise_param_;
  ::caffe::HotspotParameter* hotspot_param_;
  ::caffe::PredictBoxParameter* predict_box_param_;
  ::caffe::FCNDataParameter* fcn_data_param_;
  ::caffe::CenterLossParameter* center_loss_param_;
  ::caffe::FlipParameter* flip_param_;
  ::caffe::InnerDistanceParameter* inner_distance_param_;
  ::caffe::NormalizeParameter* normalize_param_;
  ::caffe::GeneralContrastiveParameter* general_contrastive_loss_param_;
  ::caffe::SoftContrastiveParameter* soft_contrastive_loss_param_;
  ::caffe::GeneralTripletParameter* general_triplet_loss_param_;
  ::caffe::SoftTruncationParameter* soft_truncation_param_;
  ::caffe::ProposalParameter* proposal_param_;
  ::caffe::PSROIPoolingParameter* psroi_pooling_param_;
  ::caffe::PairwiseParameter* pairwise_param_;
  ::caffe::SmoothL1Parameter* smoothl1_param_;
  ::caffe::BatchContrastiveParameter* batch_contrastive_loss_param_;
  ::caffe::PermuteParameter* permute_param_;
  ::caffe::TruncationParameter* truncation_param_;
  ::caffe::NCAParameter* nca_param_;
  ::caffe::LargeMarginInnerProductParameter* largemargin_inner_product_param_;
  ::caffe::LabelSpecificRescaleParameter* label_specific_rescale_param_;
  ::caffe::InfimumLossParamter* infimum_loss_param_;
  ::caffe::OrdinalRegressionParameter* ordinal_regression_loss_param_;
  ::caffe::ResizeParameter* resize_param_;
  ::caffe::MarginInnerProductParameter* margin_inner_product_param_;
  ::caffe::FeatureDecayLossParameter* feature_decay_loss_param_;
  ::caffe::ConfidencePenaltyLossParameter* confidence_penalty_loss_param_;
  ::caffe::FocalLossParameter* focal_loss_param_;
  ::caffe::LabelSpecificMarginParameter* label_specific_margin_param_;
  ::caffe::ChannelScaleParameter* channel_scale_param_;
  ::caffe::LabelSpecificAffineParameter* label_specific_affine_param_;
  ::caffe::LabelSpecificHardMarginParameter* label_specific_hard_margin_param_;
  ::caffe::LabelSpecificAddParameter* label_specific_add_param_;
  ::caffe::MILDataParameter* mil_data_param_;
  ::caffe::MILParameter* mil_param_;
  int phase_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLayerParameterImpl();
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TransformationParameter) */ {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformationParameter(TransformationParameter&& from) noexcept
    : TransformationParameter() {
    *this = ::std::move(from);
  }

  inline TransformationParameter& operator=(TransformationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformationParameter* internal_default_instance() {
    return reinterpret_cast<const TransformationParameter*>(
               &_TransformationParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TransformationParameter* other);
  friend void swap(TransformationParameter& a, TransformationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformationParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TransformationParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mean_value = 5;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional string mean_file = 4;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool force_color = 6 [default = false];
  bool has_force_color() const;
  void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  bool force_color() const;
  void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  bool has_force_gray() const;
  void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  bool force_gray() const;
  void set_force_gray(bool value);

  // optional bool center_crop = 10 [default = false];
  bool has_center_crop() const;
  void clear_center_crop();
  static const int kCenterCropFieldNumber = 10;
  bool center_crop() const;
  void set_center_crop(bool value);

  // optional uint32 crop_h = 8 [default = 0];
  bool has_crop_h() const;
  void clear_crop_h();
  static const int kCropHFieldNumber = 8;
  ::google::protobuf::uint32 crop_h() const;
  void set_crop_h(::google::protobuf::uint32 value);

  // optional uint32 crop_w = 9 [default = 0];
  bool has_crop_w() const;
  void clear_crop_w();
  static const int kCropWFieldNumber = 9;
  ::google::protobuf::uint32 crop_w() const;
  void set_crop_w(::google::protobuf::uint32 value);

  // optional float erase_ratio = 11 [default = 0];
  bool has_erase_ratio() const;
  void clear_erase_ratio();
  static const int kEraseRatioFieldNumber = 11;
  float erase_ratio() const;
  void set_erase_ratio(float value);

  // optional float aspect_max = 15 [default = 3];
  bool has_aspect_max() const;
  void clear_aspect_max();
  static const int kAspectMaxFieldNumber = 15;
  float aspect_max() const;
  void set_aspect_max(float value);

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // optional float scale_min = 12 [default = 0.02];
  bool has_scale_min() const;
  void clear_scale_min();
  static const int kScaleMinFieldNumber = 12;
  float scale_min() const;
  void set_scale_min(float value);

  // optional float scale_max = 13 [default = 0.4];
  bool has_scale_max() const;
  void clear_scale_max();
  static const int kScaleMaxFieldNumber = 13;
  float scale_max() const;
  void set_scale_max(float value);

  // optional float aspect_min = 14 [default = 0.33];
  bool has_aspect_min() const;
  void clear_aspect_min();
  static const int kAspectMinFieldNumber = 14;
  float aspect_min() const;
  void set_aspect_min(float value);

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  void set_has_scale();
  void clear_has_scale();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_force_color();
  void clear_has_force_color();
  void set_has_force_gray();
  void clear_has_force_gray();
  void set_has_crop_h();
  void clear_has_crop_h();
  void set_has_crop_w();
  void clear_has_crop_w();
  void set_has_center_crop();
  void clear_has_center_crop();
  void set_has_erase_ratio();
  void clear_has_erase_ratio();
  void set_has_scale_min();
  void clear_has_scale_min();
  void set_has_scale_max();
  void clear_has_scale_max();
  void set_has_aspect_min();
  void clear_has_aspect_min();
  void set_has_aspect_max();
  void clear_has_aspect_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  bool center_crop_;
  ::google::protobuf::uint32 crop_h_;
  ::google::protobuf::uint32 crop_w_;
  float erase_ratio_;
  float aspect_max_;
  float scale_;
  float scale_min_;
  float scale_max_;
  float aspect_min_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsTransformationParameterImpl();
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LossParameter) */ {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LossParameter(LossParameter&& from) noexcept
    : LossParameter() {
    *this = ::std::move(from);
  }

  inline LossParameter& operator=(LossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossParameter* internal_default_instance() {
    return reinterpret_cast<const LossParameter*>(
               &_LossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(LossParameter* other);
  friend void swap(LossParameter& a, LossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static const NormalizationMode FULL =
    LossParameter_NormalizationMode_FULL;
  static const NormalizationMode VALID =
    LossParameter_NormalizationMode_VALID;
  static const NormalizationMode BATCH_SIZE =
    LossParameter_NormalizationMode_BATCH_SIZE;
  static const NormalizationMode NONE =
    LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static const NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static const NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static const int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  static inline const ::std::string& NormalizationMode_Name(NormalizationMode value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(const ::std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // optional bool normalize = 2;
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  bool normalize() const;
  void set_normalize(bool value);

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  bool has_normalization() const;
  void clear_normalization();
  static const int kNormalizationFieldNumber = 3;
  ::caffe::LossParameter_NormalizationMode normalization() const;
  void set_normalization(::caffe::LossParameter_NormalizationMode value);

  // @@protoc_insertion_point(class_scope:caffe.LossParameter)
 private:
  void set_has_ignore_label();
  void clear_has_ignore_label();
  void set_has_normalization();
  void clear_has_normalization();
  void set_has_normalize();
  void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  bool normalize_;
  int normalization_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLossParameterImpl();
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AccuracyParameter) */ {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccuracyParameter(AccuracyParameter&& from) noexcept
    : AccuracyParameter() {
    *this = ::std::move(from);
  }

  inline AccuracyParameter& operator=(AccuracyParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const AccuracyParameter*>(
               &_AccuracyParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(AccuracyParameter* other);
  friend void swap(AccuracyParameter& a, AccuracyParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccuracyParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  AccuracyParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccuracyParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 3;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // optional bool min_is_better = 4 [default = false];
  bool has_min_is_better() const;
  void clear_min_is_better();
  static const int kMinIsBetterFieldNumber = 4;
  bool min_is_better() const;
  void set_min_is_better(bool value);

  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 1;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  void set_has_top_k();
  void clear_has_top_k();
  void set_has_axis();
  void clear_has_axis();
  void set_has_ignore_label();
  void clear_has_ignore_label();
  void set_has_min_is_better();
  void clear_has_min_is_better();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  bool min_is_better_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsAccuracyParameterImpl();
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ArgMaxParameter) */ {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgMaxParameter(ArgMaxParameter&& from) noexcept
    : ArgMaxParameter() {
    *this = ::std::move(from);
  }

  inline ArgMaxParameter& operator=(ArgMaxParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgMaxParameter* internal_default_instance() {
    return reinterpret_cast<const ArgMaxParameter*>(
               &_ArgMaxParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ArgMaxParameter* other);
  friend void swap(ArgMaxParameter& a, ArgMaxParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgMaxParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ArgMaxParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArgMaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  bool out_max_val() const;
  void set_out_max_val(bool value);

  // optional int32 axis = 3;
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  void set_has_out_max_val();
  void clear_has_out_max_val();
  void set_has_top_k();
  void clear_has_top_k();
  void set_has_axis();
  void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool out_max_val_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 top_k_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsArgMaxParameterImpl();
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConcatParameter) */ {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConcatParameter(ConcatParameter&& from) noexcept
    : ConcatParameter() {
    *this = ::std::move(from);
  }

  inline ConcatParameter& operator=(ConcatParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ConcatParameter* other);
  friend void swap(ConcatParameter& a, ConcatParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConcatParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ConcatParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConcatParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_concat_dim();
  void clear_has_concat_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 concat_dim_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsConcatParameterImpl();
};
// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchNormParameter) */ {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchNormParameter(BatchNormParameter&& from) noexcept
    : BatchNormParameter() {
    *this = ::std::move(from);
  }

  inline BatchNormParameter& operator=(BatchNormParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchNormParameter* internal_default_instance() {
    return reinterpret_cast<const BatchNormParameter*>(
               &_BatchNormParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(BatchNormParameter* other);
  friend void swap(BatchNormParameter& a, BatchNormParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchNormParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchNormParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchNormParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BatchNormParameter_Engine Engine;
  static const Engine DEFAULT =
    BatchNormParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    BatchNormParameter_Engine_CAFFE;
  static const Engine CUDNN =
    BatchNormParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return BatchNormParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    BatchNormParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    BatchNormParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    BatchNormParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return BatchNormParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return BatchNormParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return BatchNormParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter scale_filler = 7;
  bool has_scale_filler() const;
  void clear_scale_filler();
  static const int kScaleFillerFieldNumber = 7;
  const ::caffe::FillerParameter& scale_filler() const;
  ::caffe::FillerParameter* release_scale_filler();
  ::caffe::FillerParameter* mutable_scale_filler();
  void set_allocated_scale_filler(::caffe::FillerParameter* scale_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool use_global_stats = 1;
  bool has_use_global_stats() const;
  void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  bool use_global_stats() const;
  void set_use_global_stats(bool value);

  // optional bool disable_mean = 4 [default = false];
  bool has_disable_mean() const;
  void clear_disable_mean();
  static const int kDisableMeanFieldNumber = 4;
  bool disable_mean() const;
  void set_disable_mean(bool value);

  // optional bool disable_variance = 5 [default = false];
  bool has_disable_variance() const;
  void clear_disable_variance();
  static const int kDisableVarianceFieldNumber = 5;
  bool disable_variance() const;
  void set_disable_variance(bool value);

  // optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::BatchNormParameter_Engine engine() const;
  void set_engine(::caffe::BatchNormParameter_Engine value);

  // optional float moving_average_fraction = 2 [default = 0.99];
  bool has_moving_average_fraction() const;
  void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-005];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)
 private:
  void set_has_use_global_stats();
  void clear_has_use_global_stats();
  void set_has_moving_average_fraction();
  void clear_has_moving_average_fraction();
  void set_has_eps();
  void clear_has_eps();
  void set_has_disable_mean();
  void clear_has_disable_mean();
  void set_has_disable_variance();
  void clear_has_disable_variance();
  void set_has_scale_filler();
  void clear_has_scale_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* scale_filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool use_global_stats_;
  bool disable_mean_;
  bool disable_variance_;
  int engine_;
  float moving_average_fraction_;
  float eps_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsBatchNormParameterImpl();
};
// -------------------------------------------------------------------

class BiasParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BiasParameter) */ {
 public:
  BiasParameter();
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BiasParameter(BiasParameter&& from) noexcept
    : BiasParameter() {
    *this = ::std::move(from);
  }

  inline BiasParameter& operator=(BiasParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiasParameter* internal_default_instance() {
    return reinterpret_cast<const BiasParameter*>(
               &_BiasParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(BiasParameter* other);
  friend void swap(BiasParameter& a, BiasParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BiasParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BiasParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BiasParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* release_filler();
  ::caffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BiasParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_num_axes();
  void clear_has_num_axes();
  void set_has_filler();
  void clear_has_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsBiasParameterImpl();
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ContrastiveLossParameter) */ {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContrastiveLossParameter(ContrastiveLossParameter&& from) noexcept
    : ContrastiveLossParameter() {
    *this = ::std::move(from);
  }

  inline ContrastiveLossParameter& operator=(ContrastiveLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContrastiveLossParameter* internal_default_instance() {
    return reinterpret_cast<const ContrastiveLossParameter*>(
               &_ContrastiveLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ContrastiveLossParameter* other);
  friend void swap(ContrastiveLossParameter& a, ContrastiveLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContrastiveLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ContrastiveLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContrastiveLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool legacy_version = 2 [default = false];
  bool has_legacy_version() const;
  void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  bool legacy_version() const;
  void set_legacy_version(bool value);

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 1;
  float margin() const;
  void set_margin(float value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  void set_has_margin();
  void clear_has_margin();
  void set_has_legacy_version();
  void clear_has_legacy_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool legacy_version_;
  float margin_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsContrastiveLossParameterImpl();
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvolutionParameter(ConvolutionParameter&& from) noexcept
    : ConvolutionParameter() {
    *this = ::std::move(from);
  }

  inline ConvolutionParameter& operator=(ConvolutionParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ConvolutionParameter* other);
  friend void swap(ConvolutionParameter& a, ConvolutionParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolutionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolutionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  typedef ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker;
  static const CuDNNConvolutionAlgorithmSeeker GET =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET;
  static const CuDNNConvolutionAlgorithmSeeker FINDEX =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX;
  static inline bool CuDNNConvolutionAlgorithmSeeker_IsValid(int value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value);
  }
  static const CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker_MIN =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MIN;
  static const CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker_MAX =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX;
  static const int CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CuDNNConvolutionAlgorithmSeeker_descriptor() {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
  }
  static inline const ::std::string& CuDNNConvolutionAlgorithmSeeker_Name(CuDNNConvolutionAlgorithmSeeker value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Name(value);
  }
  static inline bool CuDNNConvolutionAlgorithmSeeker_Parse(const ::std::string& name,
      CuDNNConvolutionAlgorithmSeeker* value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 pad = 3;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::uint32 value);
  void add_pad(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size(int index) const;
  void set_kernel_size(int index, ::google::protobuf::uint32 value);
  void add_kernel_size(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  int dilation_size() const;
  void clear_dilation();
  static const int kDilationFieldNumber = 18;
  ::google::protobuf::uint32 dilation(int index) const;
  void set_dilation(int index, ::google::protobuf::uint32 value);
  void add_dilation(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // repeated uint32 shape_offset = 20;
  int shape_offset_size() const;
  void clear_shape_offset();
  static const int kShapeOffsetFieldNumber = 20;
  ::google::protobuf::uint32 shape_offset(int index) const;
  void set_shape_offset(int index, ::google::protobuf::uint32 value);
  void add_shape_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shape_offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shape_offset();

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::ConvolutionParameter_Engine engine() const;
  void set_engine(::caffe::ConvolutionParameter_Engine value);

  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 16;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
  bool has_cudnn_convolution_algo_seeker() const;
  void clear_cudnn_convolution_algo_seeker();
  static const int kCudnnConvolutionAlgoSeekerFieldNumber = 19;
  ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker() const;
  void set_cudnn_convolution_algo_seeker(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_group();
  void clear_has_group();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_engine();
  void clear_has_engine();
  void set_has_axis();
  void clear_has_axis();
  void set_has_force_nd_im2col();
  void clear_has_force_nd_im2col();
  void set_has_cudnn_convolution_algo_seeker();
  void clear_has_cudnn_convolution_algo_seeker();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shape_offset_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool force_nd_im2col_;
  bool bias_term_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::int32 axis_;
  int cudnn_convolution_algo_seeker_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsConvolutionParameterImpl();
};
// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CropParameter) */ {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CropParameter(CropParameter&& from) noexcept
    : CropParameter() {
    *this = ::std::move(from);
  }

  inline CropParameter& operator=(CropParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CropParameter* internal_default_instance() {
    return reinterpret_cast<const CropParameter*>(
               &_CropParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CropParameter* other);
  friend void swap(CropParameter& a, CropParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CropParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  CropParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CropParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 offset = 2;
  int offset_size() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset(int index) const;
  void set_offset(int index, ::google::protobuf::uint32 value);
  void add_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // optional int32 axis = 1 [default = 2];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.CropParameter)
 private:
  void set_has_axis();
  void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsCropParameterImpl();
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DataParameter) */ {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataParameter(DataParameter&& from) noexcept
    : DataParameter() {
    *this = ::std::move(from);
  }

  inline DataParameter& operator=(DataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(DataParameter* other);
  friend void swap(DataParameter& a, DataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB =
    DataParameter_DB_LEVELDB;
  static const DB LMDB =
    DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  bool has_force_encoded_color() const;
  void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  bool force_encoded_color() const;
  void set_force_encoded_color(bool value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  void clear_backend();
  static const int kBackendFieldNumber = 8;
  ::caffe::DataParameter_DB backend() const;
  void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional uint32 prefetch = 10 [default = 4];
  bool has_prefetch() const;
  void clear_prefetch();
  static const int kPrefetchFieldNumber = 10;
  ::google::protobuf::uint32 prefetch() const;
  void set_prefetch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_backend();
  void clear_has_backend();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_force_encoded_color();
  void clear_has_force_encoded_color();
  void set_has_prefetch();
  void clear_has_prefetch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 rand_skip_;
  bool mirror_;
  bool force_encoded_color_;
  int backend_;
  float scale_;
  ::google::protobuf::uint32 prefetch_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsDataParameterImpl();
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DropoutParameter) */ {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropoutParameter(DropoutParameter&& from) noexcept
    : DropoutParameter() {
    *this = ::std::move(from);
  }

  inline DropoutParameter& operator=(DropoutParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(DropoutParameter* other);
  friend void swap(DropoutParameter& a, DropoutParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropoutParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DropoutParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DropoutParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool sqrt_scale = 2 [default = false];
  bool has_sqrt_scale() const;
  void clear_sqrt_scale();
  static const int kSqrtScaleFieldNumber = 2;
  bool sqrt_scale() const;
  void set_sqrt_scale(bool value);

  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  void set_has_dropout_ratio();
  void clear_has_dropout_ratio();
  void set_has_sqrt_scale();
  void clear_has_sqrt_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool sqrt_scale_;
  float dropout_ratio_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsDropoutParameterImpl();
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DummyDataParameter) */ {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DummyDataParameter(DummyDataParameter&& from) noexcept
    : DummyDataParameter() {
    *this = ::std::move(from);
  }

  inline DummyDataParameter& operator=(DummyDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DummyDataParameter* internal_default_instance() {
    return reinterpret_cast<const DummyDataParameter*>(
               &_DummyDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(DummyDataParameter* other);
  friend void swap(DummyDataParameter& a, DummyDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DummyDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  DummyDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DummyDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  int data_filler_size() const;
  void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  const ::caffe::FillerParameter& data_filler(int index) const;
  ::caffe::FillerParameter* mutable_data_filler(int index);
  ::caffe::FillerParameter* add_data_filler();
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;

  // repeated uint32 num = 2;
  int num_size() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num(int index) const;
  void set_num(int index, ::google::protobuf::uint32 value);
  void add_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  ::google::protobuf::uint32 channels(int index) const;
  void set_channels(int index, ::google::protobuf::uint32 value);
  void add_channels(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  int height_size() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height(int index) const;
  void set_height(int index, ::google::protobuf::uint32 value);
  void add_height(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  int width_size() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width(int index) const;
  void set_width(int index, ::google::protobuf::uint32 value);
  void add_width(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // repeated .caffe.BlobShape shape = 6;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 6;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsDummyDataParameterImpl();
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EltwiseParameter) */ {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EltwiseParameter(EltwiseParameter&& from) noexcept
    : EltwiseParameter() {
    *this = ::std::move(from);
  }

  inline EltwiseParameter& operator=(EltwiseParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EltwiseParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseParameter*>(
               &_EltwiseParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(EltwiseParameter* other);
  friend void swap(EltwiseParameter& a, EltwiseParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EltwiseParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  EltwiseParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EltwiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD =
    EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM =
    EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX =
    EltwiseParameter_EltwiseOp_MAX;
  static const EltwiseOp SORT =
    EltwiseParameter_EltwiseOp_SORT;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float coeff = 2;
  int coeff_size() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  void set_has_operation();
  void clear_has_operation();
  void set_has_stable_prod_grad();
  void clear_has_stable_prod_grad();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsEltwiseParameterImpl();
};
// -------------------------------------------------------------------

class ELUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ELUParameter) */ {
 public:
  ELUParameter();
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ELUParameter(ELUParameter&& from) noexcept
    : ELUParameter() {
    *this = ::std::move(from);
  }

  inline ELUParameter& operator=(ELUParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ELUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ELUParameter* internal_default_instance() {
    return reinterpret_cast<const ELUParameter*>(
               &_ELUParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ELUParameter* other);
  friend void swap(ELUParameter& a, ELUParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ELUParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ELUParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ELUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.ELUParameter)
 private:
  void set_has_alpha();
  void clear_has_alpha();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float alpha_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsELUParameterImpl();
};
// -------------------------------------------------------------------

class EmbedParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EmbedParameter) */ {
 public:
  EmbedParameter();
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmbedParameter(EmbedParameter&& from) noexcept
    : EmbedParameter() {
    *this = ::std::move(from);
  }

  inline EmbedParameter& operator=(EmbedParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmbedParameter* internal_default_instance() {
    return reinterpret_cast<const EmbedParameter*>(
               &_EmbedParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(EmbedParameter* other);
  friend void swap(EmbedParameter& a, EmbedParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmbedParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  EmbedParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmbedParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 4;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 4;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 2;
  bool has_input_dim() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 2;
  ::google::protobuf::uint32 input_dim() const;
  void set_input_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 3 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 3;
  bool bias_term() const;
  void set_bias_term(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EmbedParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_input_dim();
  void clear_has_input_dim();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 input_dim_;
  bool bias_term_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsEmbedParameterImpl();
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ExpParameter) */ {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExpParameter(ExpParameter&& from) noexcept
    : ExpParameter() {
    *this = ::std::move(from);
  }

  inline ExpParameter& operator=(ExpParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExpParameter* internal_default_instance() {
    return reinterpret_cast<const ExpParameter*>(
               &_ExpParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(ExpParameter* other);
  friend void swap(ExpParameter& a, ExpParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExpParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ExpParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExpParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsExpParameterImpl();
};
// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FlattenParameter) */ {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlattenParameter(FlattenParameter&& from) noexcept
    : FlattenParameter() {
    *this = ::std::move(from);
  }

  inline FlattenParameter& operator=(FlattenParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlattenParameter* internal_default_instance() {
    return reinterpret_cast<const FlattenParameter*>(
               &_FlattenParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(FlattenParameter* other);
  friend void swap(FlattenParameter& a, FlattenParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlattenParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FlattenParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlattenParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  bool has_end_axis() const;
  void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  ::google::protobuf::int32 end_axis() const;
  void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_end_axis();
  void clear_has_end_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsFlattenParameterImpl();
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5DataParameter) */ {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDF5DataParameter(HDF5DataParameter&& from) noexcept
    : HDF5DataParameter() {
    *this = ::std::move(from);
  }

  inline HDF5DataParameter& operator=(HDF5DataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(HDF5DataParameter* other);
  friend void swap(HDF5DataParameter& a, HDF5DataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDF5DataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  HDF5DataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDF5DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_shuffle();
  void clear_has_shuffle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsHDF5DataParameterImpl();
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5OutputParameter) */ {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDF5OutputParameter(HDF5OutputParameter&& from) noexcept
    : HDF5OutputParameter() {
    *this = ::std::move(from);
  }

  inline HDF5OutputParameter& operator=(HDF5OutputParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(HDF5OutputParameter* other);
  friend void swap(HDF5OutputParameter& a, HDF5OutputParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDF5OutputParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  HDF5OutputParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDF5OutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  void set_has_file_name();
  void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsHDF5OutputParameterImpl();
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HingeLossParameter) */ {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HingeLossParameter(HingeLossParameter&& from) noexcept
    : HingeLossParameter() {
    *this = ::std::move(from);
  }

  inline HingeLossParameter& operator=(HingeLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const HingeLossParameter*>(
               &_HingeLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(HingeLossParameter* other);
  friend void swap(HingeLossParameter& a, HingeLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HingeLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  HingeLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HingeLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 =
    HingeLossParameter_Norm_L1;
  static const Norm L2 =
    HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  void clear_norm();
  static const int kNormFieldNumber = 1;
  ::caffe::HingeLossParameter_Norm norm() const;
  void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  void set_has_norm();
  void clear_has_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int norm_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsHingeLossParameterImpl();
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDataParameter) */ {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageDataParameter(ImageDataParameter&& from) noexcept
    : ImageDataParameter() {
    *this = ::std::move(from);
  }

  inline ImageDataParameter& operator=(ImageDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ImageDataParameter* other);
  friend void swap(ImageDataParameter& a, ImageDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_root_folder(::std::string&& value);
  #endif
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  ::google::protobuf::uint32 new_height() const;
  void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  ::google::protobuf::uint32 new_width() const;
  void set_new_width(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional bool face_transform = 13 [default = false];
  bool has_face_transform() const;
  void clear_face_transform();
  static const int kFaceTransformFieldNumber = 13;
  bool face_transform() const;
  void set_face_transform(bool value);

  // optional bool face_mirror = 20 [default = false];
  bool has_face_mirror() const;
  void clear_face_mirror();
  static const int kFaceMirrorFieldNumber = 20;
  bool face_mirror() const;
  void set_face_mirror(bool value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional float max_shear_ratio = 14 [default = 0];
  bool has_max_shear_ratio() const;
  void clear_max_shear_ratio();
  static const int kMaxShearRatioFieldNumber = 14;
  float max_shear_ratio() const;
  void set_max_shear_ratio(float value);

  // optional float max_aspect_ratio = 15 [default = 0];
  bool has_max_aspect_ratio() const;
  void clear_max_aspect_ratio();
  static const int kMaxAspectRatioFieldNumber = 15;
  float max_aspect_ratio() const;
  void set_max_aspect_ratio(float value);

  // optional float max_rotate_angle = 16 [default = 0];
  bool has_max_rotate_angle() const;
  void clear_max_rotate_angle();
  static const int kMaxRotateAngleFieldNumber = 16;
  float max_rotate_angle() const;
  void set_max_rotate_angle(float value);

  // optional uint32 max_random_shift = 19 [default = 0];
  bool has_max_random_shift() const;
  void clear_max_random_shift();
  static const int kMaxRandomShiftFieldNumber = 19;
  ::google::protobuf::uint32 max_random_shift() const;
  void set_max_random_shift(::google::protobuf::uint32 value);

  // optional uint32 face_point_num = 21 [default = 0];
  bool has_face_point_num() const;
  void clear_face_point_num();
  static const int kFacePointNumFieldNumber = 21;
  ::google::protobuf::uint32 face_point_num() const;
  void set_face_point_num(::google::protobuf::uint32 value);

  // optional bool balance_class = 22 [default = false];
  bool has_balance_class() const;
  void clear_balance_class();
  static const int kBalanceClassFieldNumber = 22;
  bool balance_class() const;
  void set_balance_class(bool value);

  // optional uint32 balance_by = 23 [default = 0];
  bool has_balance_by() const;
  void clear_balance_by();
  static const int kBalanceByFieldNumber = 23;
  ::google::protobuf::uint32 balance_by() const;
  void set_balance_by(::google::protobuf::uint32 value);

  // optional uint32 label_cut_start = 24 [default = 0];
  bool has_label_cut_start() const;
  void clear_label_cut_start();
  static const int kLabelCutStartFieldNumber = 24;
  ::google::protobuf::uint32 label_cut_start() const;
  void set_label_cut_start(::google::protobuf::uint32 value);

  // optional uint32 label_cut_end = 25 [default = 0];
  bool has_label_cut_end() const;
  void clear_label_cut_end();
  static const int kLabelCutEndFieldNumber = 25;
  ::google::protobuf::uint32 label_cut_end() const;
  void set_label_cut_end(::google::protobuf::uint32 value);

  // optional float max_random_scale = 18 [default = 1];
  bool has_max_random_scale() const;
  void clear_max_random_scale();
  static const int kMaxRandomScaleFieldNumber = 18;
  float max_random_scale() const;
  void set_max_random_scale(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional uint32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  bool is_color() const;
  void set_is_color(bool value);

  // optional float min_random_scale = 17 [default = 1];
  bool has_min_random_scale() const;
  void clear_min_random_scale();
  static const int kMinRandomScaleFieldNumber = 17;
  float min_random_scale() const;
  void set_min_random_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_shuffle();
  void clear_has_shuffle();
  void set_has_new_height();
  void clear_has_new_height();
  void set_has_new_width();
  void clear_has_new_width();
  void set_has_is_color();
  void clear_has_is_color();
  void set_has_face_transform();
  void clear_has_face_transform();
  void set_has_max_shear_ratio();
  void clear_has_max_shear_ratio();
  void set_has_max_aspect_ratio();
  void clear_has_max_aspect_ratio();
  void set_has_max_rotate_angle();
  void clear_has_max_rotate_angle();
  void set_has_min_random_scale();
  void clear_has_min_random_scale();
  void set_has_max_random_scale();
  void clear_has_max_random_scale();
  void set_has_max_random_shift();
  void clear_has_max_random_shift();
  void set_has_face_mirror();
  void clear_has_face_mirror();
  void set_has_face_point_num();
  void clear_has_face_point_num();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_root_folder();
  void clear_has_root_folder();
  void set_has_balance_class();
  void clear_has_balance_class();
  void set_has_balance_by();
  void clear_has_balance_by();
  void set_has_label_cut_start();
  void clear_has_label_cut_start();
  void set_has_label_cut_end();
  void clear_has_label_cut_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool shuffle_;
  bool face_transform_;
  bool face_mirror_;
  bool mirror_;
  float max_shear_ratio_;
  float max_aspect_ratio_;
  float max_rotate_angle_;
  ::google::protobuf::uint32 max_random_shift_;
  ::google::protobuf::uint32 face_point_num_;
  bool balance_class_;
  ::google::protobuf::uint32 balance_by_;
  ::google::protobuf::uint32 label_cut_start_;
  ::google::protobuf::uint32 label_cut_end_;
  float max_random_scale_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  bool is_color_;
  float min_random_scale_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsImageDataParameterImpl();
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InfogainLossParameter) */ {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfogainLossParameter(InfogainLossParameter&& from) noexcept
    : InfogainLossParameter() {
    *this = ::std::move(from);
  }

  inline InfogainLossParameter& operator=(InfogainLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(InfogainLossParameter* other);
  friend void swap(InfogainLossParameter& a, InfogainLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfogainLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InfogainLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfogainLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_axis();
  void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsInfogainLossParameterImpl();
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InnerProductParameter) */ {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerProductParameter(InnerProductParameter&& from) noexcept
    : InnerProductParameter() {
    *this = ::std::move(from);
  }

  inline InnerProductParameter& operator=(InnerProductParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(InnerProductParameter* other);
  friend void swap(InnerProductParameter& a, InnerProductParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerProductParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InnerProductParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InnerProductParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool transpose = 6 [default = false];
  bool has_transpose() const;
  void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  bool transpose() const;
  void set_transpose(bool value);

  // optional bool normalize = 7 [default = false];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 7;
  bool normalize() const;
  void set_normalize(bool value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_axis();
  void clear_has_axis();
  void set_has_transpose();
  void clear_has_transpose();
  void set_has_normalize();
  void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool transpose_;
  bool normalize_;
  bool bias_term_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsInnerProductParameterImpl();
};
// -------------------------------------------------------------------

class InnerDistanceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InnerDistanceParameter) */ {
 public:
  InnerDistanceParameter();
  virtual ~InnerDistanceParameter();

  InnerDistanceParameter(const InnerDistanceParameter& from);

  inline InnerDistanceParameter& operator=(const InnerDistanceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InnerDistanceParameter(InnerDistanceParameter&& from) noexcept
    : InnerDistanceParameter() {
    *this = ::std::move(from);
  }

  inline InnerDistanceParameter& operator=(InnerDistanceParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerDistanceParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerDistanceParameter* internal_default_instance() {
    return reinterpret_cast<const InnerDistanceParameter*>(
               &_InnerDistanceParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(InnerDistanceParameter* other);
  friend void swap(InnerDistanceParameter& a, InnerDistanceParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerDistanceParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InnerDistanceParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InnerDistanceParameter& from);
  void MergeFrom(const InnerDistanceParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InnerDistanceParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string distance_type = 7 [default = "L2"];
  bool has_distance_type() const;
  void clear_distance_type();
  static const int kDistanceTypeFieldNumber = 7;
  const ::std::string& distance_type() const;
  void set_distance_type(const ::std::string& value);
  #if LANG_CXX11
  void set_distance_type(::std::string&& value);
  #endif
  void set_distance_type(const char* value);
  void set_distance_type(const char* value, size_t size);
  ::std::string* mutable_distance_type();
  ::std::string* release_distance_type();
  void set_allocated_distance_type(::std::string* distance_type);

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool transpose = 6 [default = false];
  bool has_transpose() const;
  void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  bool transpose() const;
  void set_transpose(bool value);

  // optional bool normalize = 8 [default = false];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 8;
  bool normalize() const;
  void set_normalize(bool value);

  // optional bool update_center_only = 9 [default = false];
  bool has_update_center_only() const;
  void clear_update_center_only();
  static const int kUpdateCenterOnlyFieldNumber = 9;
  bool update_center_only() const;
  void set_update_center_only(bool value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.InnerDistanceParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_axis();
  void clear_has_axis();
  void set_has_transpose();
  void clear_has_transpose();
  void set_has_distance_type();
  void clear_has_distance_type();
  void set_has_normalize();
  void clear_has_normalize();
  void set_has_update_center_only();
  void clear_has_update_center_only();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_distance_type_;
  ::google::protobuf::internal::ArenaStringPtr distance_type_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool transpose_;
  bool normalize_;
  bool update_center_only_;
  bool bias_term_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsInnerDistanceParameterImpl();
};
// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InputParameter) */ {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputParameter(InputParameter&& from) noexcept
    : InputParameter() {
    *this = ::std::move(from);
  }

  inline InputParameter& operator=(InputParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(InputParameter* other);
  friend void swap(InputParameter& a, InputParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InputParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobShape shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:caffe.InputParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsInputParameterImpl();
};
// -------------------------------------------------------------------

class LogParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LogParameter) */ {
 public:
  LogParameter();
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogParameter(LogParameter&& from) noexcept
    : LogParameter() {
    *this = ::std::move(from);
  }

  inline LogParameter& operator=(LogParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogParameter* internal_default_instance() {
    return reinterpret_cast<const LogParameter*>(
               &_LogParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(LogParameter* other);
  friend void swap(LogParameter& a, LogParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LogParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.LogParameter)
 private:
  void set_has_base();
  void clear_has_base();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float base_;
  float scale_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLogParameterImpl();
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LRNParameter) */ {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LRNParameter(LRNParameter&& from) noexcept
    : LRNParameter() {
    *this = ::std::move(from);
  }

  inline LRNParameter& operator=(LRNParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(LRNParameter* other);
  friend void swap(LRNParameter& a, LRNParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LRNParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LRNParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LRNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT =
    LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    LRNParameter_Engine_CAFFE;
  static const Engine CUDNN =
    LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  ::caffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::caffe::LRNParameter_NormRegion value);

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::LRNParameter_Engine engine() const;
  void set_engine(::caffe::LRNParameter_Engine value);

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 3;
  float beta() const;
  void set_beta(float value);

  // optional float k = 5 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 5;
  float k() const;
  void set_k(float value);

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_norm_region();
  void clear_has_norm_region();
  void set_has_k();
  void clear_has_k();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int norm_region_;
  int engine_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float k_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLRNParameterImpl();
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MemoryDataParameter) */ {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryDataParameter(MemoryDataParameter&& from) noexcept
    : MemoryDataParameter() {
    *this = ::std::move(from);
  }

  inline MemoryDataParameter& operator=(MemoryDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(MemoryDataParameter* other);
  friend void swap(MemoryDataParameter& a, MemoryDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MemoryDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemoryDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional bool transpose = 5 [default = false];
  bool has_transpose() const;
  void clear_transpose();
  static const int kTransposeFieldNumber = 5;
  bool transpose() const;
  void set_transpose(bool value);

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_channels();
  void clear_has_channels();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_transpose();
  void clear_has_transpose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  bool transpose_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsMemoryDataParameterImpl();
};
// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MVNParameter) */ {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MVNParameter(MVNParameter&& from) noexcept
    : MVNParameter() {
    *this = ::std::move(from);
  }

  inline MVNParameter& operator=(MVNParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MVNParameter* internal_default_instance() {
    return reinterpret_cast<const MVNParameter*>(
               &_MVNParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(MVNParameter* other);
  friend void swap(MVNParameter& a, MVNParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MVNParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MVNParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MVNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  bool across_channels() const;
  void set_across_channels(bool value);

  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  bool normalize_variance() const;
  void set_normalize_variance(bool value);

  // optional float eps = 3 [default = 1e-009];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
 private:
  void set_has_normalize_variance();
  void clear_has_normalize_variance();
  void set_has_across_channels();
  void clear_has_across_channels();
  void set_has_eps();
  void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool across_channels_;
  bool normalize_variance_;
  float eps_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsMVNParameterImpl();
};
// -------------------------------------------------------------------

class ParameterParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParameterParameter) */ {
 public:
  ParameterParameter();
  virtual ~ParameterParameter();

  ParameterParameter(const ParameterParameter& from);

  inline ParameterParameter& operator=(const ParameterParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParameterParameter(ParameterParameter&& from) noexcept
    : ParameterParameter() {
    *this = ::std::move(from);
  }

  inline ParameterParameter& operator=(ParameterParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterParameter* internal_default_instance() {
    return reinterpret_cast<const ParameterParameter*>(
               &_ParameterParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(ParameterParameter* other);
  friend void swap(ParameterParameter& a, ParameterParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParameterParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ParameterParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParameterParameter& from);
  void MergeFrom(const ParameterParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParameterParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* release_shape();
  ::caffe::BlobShape* mutable_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // optional .caffe.FillerParameter blob_filler = 2;
  bool has_blob_filler() const;
  void clear_blob_filler();
  static const int kBlobFillerFieldNumber = 2;
  const ::caffe::FillerParameter& blob_filler() const;
  ::caffe::FillerParameter* release_blob_filler();
  ::caffe::FillerParameter* mutable_blob_filler();
  void set_allocated_blob_filler(::caffe::FillerParameter* blob_filler);

  // @@protoc_insertion_point(class_scope:caffe.ParameterParameter)
 private:
  void set_has_shape();
  void clear_has_shape();
  void set_has_blob_filler();
  void clear_has_blob_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::caffe::FillerParameter* blob_filler_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsParameterParameterImpl();
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PoolingParameter(PoolingParameter&& from) noexcept
    : PoolingParameter() {
    *this = ::std::move(from);
  }

  inline PoolingParameter& operator=(PoolingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(PoolingParameter* other);
  friend void swap(PoolingParameter& a, PoolingParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static const PoolMethod DEF =
    PoolingParameter_PoolMethod_DEF;
  static const PoolMethod DEF_ALL =
    PoolingParameter_PoolMethod_DEF_ALL;
  static const PoolMethod DEF_ALL2 =
    PoolingParameter_PoolMethod_DEF_ALL2;
  static const PoolMethod DEF_ALL3 =
    PoolingParameter_PoolMethod_DEF_ALL3;
  static const PoolMethod DEF_ALL4 =
    PoolingParameter_PoolMethod_DEF_ALL4;
  static const PoolMethod LOWRES =
    PoolingParameter_PoolMethod_LOWRES;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe::PoolingParameter_Engine engine() const;
  void set_engine(::caffe::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // optional float blobs_lr = 13;
  bool has_blobs_lr() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 13;
  float blobs_lr() const;
  void set_blobs_lr(float value);

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional float blobs_a_min = 14 [default = 0.0001];
  bool has_blobs_a_min() const;
  void clear_blobs_a_min();
  static const int kBlobsAMinFieldNumber = 14;
  float blobs_a_min() const;
  void set_blobs_a_min(float value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  void set_has_pool();
  void clear_has_pool();
  void set_has_pad();
  void clear_has_pad();
  void set_has_pad_h();
  void clear_has_pad_h();
  void set_has_pad_w();
  void clear_has_pad_w();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_kernel_h();
  void clear_has_kernel_h();
  void set_has_kernel_w();
  void clear_has_kernel_w();
  void set_has_stride();
  void clear_has_stride();
  void set_has_stride_h();
  void clear_has_stride_h();
  void set_has_stride_w();
  void clear_has_stride_w();
  void set_has_engine();
  void clear_has_engine();
  void set_has_global_pooling();
  void clear_has_global_pooling();
  void set_has_blobs_lr();
  void clear_has_blobs_lr();
  void set_has_blobs_a_min();
  void clear_has_blobs_a_min();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  int engine_;
  bool global_pooling_;
  float blobs_lr_;
  ::google::protobuf::uint32 stride_;
  float blobs_a_min_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPoolingParameterImpl();
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PowerParameter) */ {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PowerParameter(PowerParameter&& from) noexcept
    : PowerParameter() {
    *this = ::std::move(from);
  }

  inline PowerParameter& operator=(PowerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(PowerParameter* other);
  friend void swap(PowerParameter& a, PowerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PowerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PowerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PowerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // optional float power = 1 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  float power() const;
  void set_power(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  void set_has_power();
  void clear_has_power();
  void set_has_scale();
  void clear_has_scale();
  void set_has_shift();
  void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float shift_;
  float power_;
  float scale_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPowerParameterImpl();
};
// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PythonParameter) */ {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PythonParameter(PythonParameter&& from) noexcept
    : PythonParameter() {
    *this = ::std::move(from);
  }

  inline PythonParameter& operator=(PythonParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PythonParameter* internal_default_instance() {
    return reinterpret_cast<const PythonParameter*>(
               &_PythonParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(PythonParameter* other);
  friend void swap(PythonParameter& a, PythonParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PythonParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PythonParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PythonParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  bool has_module() const;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  #if LANG_CXX11
  void set_module(::std::string&& value);
  #endif
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::std::string& layer() const;
  void set_layer(const ::std::string& value);
  #if LANG_CXX11
  void set_layer(::std::string&& value);
  #endif
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  ::std::string* mutable_layer();
  ::std::string* release_layer();
  void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  bool has_param_str() const;
  void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  const ::std::string& param_str() const;
  void set_param_str(const ::std::string& value);
  #if LANG_CXX11
  void set_param_str(::std::string&& value);
  #endif
  void set_param_str(const char* value);
  void set_param_str(const char* value, size_t size);
  ::std::string* mutable_param_str();
  ::std::string* release_param_str();
  void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  bool has_share_in_parallel() const;
  void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  bool share_in_parallel() const;
  void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PythonParameter)
 private:
  void set_has_module();
  void clear_has_module();
  void set_has_layer();
  void clear_has_layer();
  void set_has_param_str();
  void clear_has_param_str();
  void set_has_share_in_parallel();
  void clear_has_share_in_parallel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr layer_;
  ::google::protobuf::internal::ArenaStringPtr param_str_;
  bool share_in_parallel_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPythonParameterImpl();
};
// -------------------------------------------------------------------

class RecurrentParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RecurrentParameter) */ {
 public:
  RecurrentParameter();
  virtual ~RecurrentParameter();

  RecurrentParameter(const RecurrentParameter& from);

  inline RecurrentParameter& operator=(const RecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecurrentParameter(RecurrentParameter&& from) noexcept
    : RecurrentParameter() {
    *this = ::std::move(from);
  }

  inline RecurrentParameter& operator=(RecurrentParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecurrentParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecurrentParameter* internal_default_instance() {
    return reinterpret_cast<const RecurrentParameter*>(
               &_RecurrentParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(RecurrentParameter* other);
  friend void swap(RecurrentParameter& a, RecurrentParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecurrentParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  RecurrentParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RecurrentParameter& from);
  void MergeFrom(const RecurrentParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RecurrentParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 2;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 2;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 3;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 3;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1 [default = 0];
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool debug_info = 4 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 4;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional bool expose_hidden = 5 [default = false];
  bool has_expose_hidden() const;
  void clear_expose_hidden();
  static const int kExposeHiddenFieldNumber = 5;
  bool expose_hidden() const;
  void set_expose_hidden(bool value);

  // @@protoc_insertion_point(class_scope:caffe.RecurrentParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_debug_info();
  void clear_has_debug_info();
  void set_has_expose_hidden();
  void clear_has_expose_hidden();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool debug_info_;
  bool expose_hidden_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsRecurrentParameterImpl();
};
// -------------------------------------------------------------------

class ReductionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReductionParameter) */ {
 public:
  ReductionParameter();
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReductionParameter(ReductionParameter&& from) noexcept
    : ReductionParameter() {
    *this = ::std::move(from);
  }

  inline ReductionParameter& operator=(ReductionParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReductionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReductionParameter* internal_default_instance() {
    return reinterpret_cast<const ReductionParameter*>(
               &_ReductionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(ReductionParameter* other);
  friend void swap(ReductionParameter& a, ReductionParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReductionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReductionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReductionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM =
    ReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM =
    ReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ =
    ReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN =
    ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::ReductionParameter_ReductionOp operation() const;
  void set_operation(::caffe::ReductionParameter_ReductionOp value);

  // optional float coeff = 3 [default = 1];
  bool has_coeff() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  float coeff() const;
  void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:caffe.ReductionParameter)
 private:
  void set_has_operation();
  void clear_has_operation();
  void set_has_axis();
  void clear_has_axis();
  void set_has_coeff();
  void clear_has_coeff();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  int operation_;
  float coeff_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsReductionParameterImpl();
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReLUParameter) */ {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReLUParameter(ReLUParameter&& from) noexcept
    : ReLUParameter() {
    *this = ::std::move(from);
  }

  inline ReLUParameter& operator=(ReLUParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(ReLUParameter* other);
  friend void swap(ReLUParameter& a, ReLUParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReLUParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReLUParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  float negative_slope() const;
  void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 2;
  ::caffe::ReLUParameter_Engine engine() const;
  void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:
  void set_has_negative_slope();
  void clear_has_negative_slope();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float negative_slope_;
  int engine_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsReLUParameterImpl();
};
// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReshapeParameter) */ {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReshapeParameter(ReshapeParameter&& from) noexcept
    : ReshapeParameter() {
    *this = ::std::move(from);
  }

  inline ReshapeParameter& operator=(ReshapeParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReshapeParameter* internal_default_instance() {
    return reinterpret_cast<const ReshapeParameter*>(
               &_ReshapeParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(ReshapeParameter* other);
  friend void swap(ReshapeParameter& a, ReshapeParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReshapeParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ReshapeParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReshapeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* release_shape();
  ::caffe::BlobShape* mutable_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)
 private:
  void set_has_shape();
  void clear_has_shape();
  void set_has_axis();
  void clear_has_axis();
  void set_has_num_axes();
  void clear_has_num_axes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsReshapeParameterImpl();
};
// -------------------------------------------------------------------

class ScaleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ScaleParameter) */ {
 public:
  ScaleParameter();
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScaleParameter(ScaleParameter&& from) noexcept
    : ScaleParameter() {
    *this = ::std::move(from);
  }

  inline ScaleParameter& operator=(ScaleParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScaleParameter* internal_default_instance() {
    return reinterpret_cast<const ScaleParameter*>(
               &_ScaleParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(ScaleParameter* other);
  friend void swap(ScaleParameter& a, ScaleParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScaleParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ScaleParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScaleParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* release_filler();
  ::caffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool bias_term = 4 [default = false];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional float min_value = 6;
  bool has_min_value() const;
  void clear_min_value();
  static const int kMinValueFieldNumber = 6;
  float min_value() const;
  void set_min_value(float value);

  // optional float max_value = 7;
  bool has_max_value() const;
  void clear_max_value();
  static const int kMaxValueFieldNumber = 7;
  float max_value() const;
  void set_max_value(float value);

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ScaleParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_num_axes();
  void clear_has_num_axes();
  void set_has_filler();
  void clear_has_filler();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_min_value();
  void clear_has_min_value();
  void set_has_max_value();
  void clear_has_max_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;
  float min_value_;
  float max_value_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsScaleParameterImpl();
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SigmoidParameter) */ {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SigmoidParameter(SigmoidParameter&& from) noexcept
    : SigmoidParameter() {
    *this = ::std::move(from);
  }

  inline SigmoidParameter& operator=(SigmoidParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(SigmoidParameter* other);
  friend void swap(SigmoidParameter& a, SigmoidParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SigmoidParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SigmoidParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SigmoidParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SigmoidParameter_Engine engine() const;
  void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSigmoidParameterImpl();
};
// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SliceParameter) */ {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SliceParameter(SliceParameter&& from) noexcept
    : SliceParameter() {
    *this = ::std::move(from);
  }

  inline SliceParameter& operator=(SliceParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceParameter* internal_default_instance() {
    return reinterpret_cast<const SliceParameter*>(
               &_SliceParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(SliceParameter* other);
  friend void swap(SliceParameter& a, SliceParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SliceParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SliceParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SliceParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  ::google::protobuf::uint32 slice_point(int index) const;
  void set_slice_point(int index, ::google::protobuf::uint32 value);
  void add_slice_point(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  ::google::protobuf::uint32 slice_dim() const;
  void set_slice_dim(::google::protobuf::uint32 value);

  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_slice_dim();
  void clear_has_slice_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::uint32 slice_dim_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSliceParameterImpl();
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftmaxParameter) */ {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftmaxParameter(SoftmaxParameter&& from) noexcept
    : SoftmaxParameter() {
    *this = ::std::move(from);
  }

  inline SoftmaxParameter& operator=(SoftmaxParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftmaxParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxParameter*>(
               &_SoftmaxParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(SoftmaxParameter* other);
  friend void swap(SoftmaxParameter& a, SoftmaxParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftmaxParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftmaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT =
    SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float class_weight = 4;
  int class_weight_size() const;
  void clear_class_weight();
  static const int kClassWeightFieldNumber = 4;
  float class_weight(int index) const;
  void set_class_weight(int index, float value);
  void add_class_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      class_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_class_weight();

  // optional string normalize_type = 7 [default = "Softmax"];
  bool has_normalize_type() const;
  void clear_normalize_type();
  static const int kNormalizeTypeFieldNumber = 7;
  const ::std::string& normalize_type() const;
  void set_normalize_type(const ::std::string& value);
  #if LANG_CXX11
  void set_normalize_type(::std::string&& value);
  #endif
  void set_normalize_type(const char* value);
  void set_normalize_type(const char* value, size_t size);
  ::std::string* mutable_normalize_type();
  ::std::string* release_normalize_type();
  void set_allocated_normalize_type(::std::string* normalize_type);

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SoftmaxParameter_Engine engine() const;
  void set_engine(::caffe::SoftmaxParameter_Engine value);

  // optional int32 hard_mining_label = 5;
  bool has_hard_mining_label() const;
  void clear_hard_mining_label();
  static const int kHardMiningLabelFieldNumber = 5;
  ::google::protobuf::int32 hard_mining_label() const;
  void set_hard_mining_label(::google::protobuf::int32 value);

  // optional float cutting_point = 6;
  bool has_cutting_point() const;
  void clear_cutting_point();
  static const int kCuttingPointFieldNumber = 6;
  float cutting_point() const;
  void set_cutting_point(float value);

  // optional float label_smooth_factor = 8 [default = 0];
  bool has_label_smooth_factor() const;
  void clear_label_smooth_factor();
  static const int kLabelSmoothFactorFieldNumber = 8;
  float label_smooth_factor() const;
  void set_label_smooth_factor(float value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional float hard_ratio = 3 [default = 1];
  bool has_hard_ratio() const;
  void clear_hard_ratio();
  static const int kHardRatioFieldNumber = 3;
  float hard_ratio() const;
  void set_hard_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
 private:
  void set_has_engine();
  void clear_has_engine();
  void set_has_axis();
  void clear_has_axis();
  void set_has_hard_ratio();
  void clear_has_hard_ratio();
  void set_has_hard_mining_label();
  void clear_has_hard_mining_label();
  void set_has_cutting_point();
  void clear_has_cutting_point();
  void set_has_normalize_type();
  void clear_has_normalize_type();
  void set_has_label_smooth_factor();
  void clear_has_label_smooth_factor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > class_weight_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_normalize_type_;
  ::google::protobuf::internal::ArenaStringPtr normalize_type_;
  int engine_;
  ::google::protobuf::int32 hard_mining_label_;
  float cutting_point_;
  float label_smooth_factor_;
  ::google::protobuf::int32 axis_;
  float hard_ratio_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSoftmaxParameterImpl();
};
// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TanHParameter) */ {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TanHParameter(TanHParameter&& from) noexcept
    : TanHParameter() {
    *this = ::std::move(from);
  }

  inline TanHParameter& operator=(TanHParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TanHParameter* internal_default_instance() {
    return reinterpret_cast<const TanHParameter*>(
               &_TanHParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(TanHParameter* other);
  friend void swap(TanHParameter& a, TanHParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TanHParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TanHParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TanHParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT =
    TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    TanHParameter_Engine_CAFFE;
  static const Engine CUDNN =
    TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::TanHParameter_Engine engine() const;
  void set_engine(::caffe::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
 private:
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int engine_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsTanHParameterImpl();
};
// -------------------------------------------------------------------

class TileParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TileParameter) */ {
 public:
  TileParameter();
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TileParameter(TileParameter&& from) noexcept
    : TileParameter() {
    *this = ::std::move(from);
  }

  inline TileParameter& operator=(TileParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileParameter* internal_default_instance() {
    return reinterpret_cast<const TileParameter*>(
               &_TileParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(TileParameter* other);
  friend void swap(TileParameter& a, TileParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TileParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TileParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TileParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tiles = 2;
  bool has_tiles() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  ::google::protobuf::int32 tiles() const;
  void set_tiles(::google::protobuf::int32 value);

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TileParameter)
 private:
  void set_has_axis();
  void clear_has_axis();
  void set_has_tiles();
  void clear_has_tiles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tiles_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsTileParameterImpl();
};
// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ThresholdParameter) */ {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThresholdParameter(ThresholdParameter&& from) noexcept
    : ThresholdParameter() {
    *this = ::std::move(from);
  }

  inline ThresholdParameter& operator=(ThresholdParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThresholdParameter* internal_default_instance() {
    return reinterpret_cast<const ThresholdParameter*>(
               &_ThresholdParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(ThresholdParameter* other);
  friend void swap(ThresholdParameter& a, ThresholdParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThresholdParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ThresholdParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ThresholdParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
 private:
  void set_has_threshold();
  void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float threshold_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsThresholdParameterImpl();
};
// -------------------------------------------------------------------

class MILParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MILParameter) */ {
 public:
  MILParameter();
  virtual ~MILParameter();

  MILParameter(const MILParameter& from);

  inline MILParameter& operator=(const MILParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MILParameter(MILParameter&& from) noexcept
    : MILParameter() {
    *this = ::std::move(from);
  }

  inline MILParameter& operator=(MILParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MILParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MILParameter* internal_default_instance() {
    return reinterpret_cast<const MILParameter*>(
               &_MILParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(MILParameter* other);
  friend void swap(MILParameter& a, MILParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MILParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MILParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MILParameter& from);
  void MergeFrom(const MILParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MILParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MILParameter_MILType MILType;
  static const MILType MAX =
    MILParameter_MILType_MAX;
  static const MILType NOR =
    MILParameter_MILType_NOR;
  static inline bool MILType_IsValid(int value) {
    return MILParameter_MILType_IsValid(value);
  }
  static const MILType MILType_MIN =
    MILParameter_MILType_MILType_MIN;
  static const MILType MILType_MAX =
    MILParameter_MILType_MILType_MAX;
  static const int MILType_ARRAYSIZE =
    MILParameter_MILType_MILType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MILType_descriptor() {
    return MILParameter_MILType_descriptor();
  }
  static inline const ::std::string& MILType_Name(MILType value) {
    return MILParameter_MILType_Name(value);
  }
  static inline bool MILType_Parse(const ::std::string& name,
      MILType* value) {
    return MILParameter_MILType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.MILParameter.MILType type = 1 [default = MAX];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::caffe::MILParameter_MILType type() const;
  void set_type(::caffe::MILParameter_MILType value);

  // @@protoc_insertion_point(class_scope:caffe.MILParameter)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int type_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsMILParameterImpl();
};
// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.WindowDataParameter) */ {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WindowDataParameter(WindowDataParameter&& from) noexcept
    : WindowDataParameter() {
    *this = ::std::move(from);
  }

  inline WindowDataParameter& operator=(WindowDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(WindowDataParameter* other);
  friend void swap(WindowDataParameter& a, WindowDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WindowDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  WindowDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WindowDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  const ::std::string& crop_mode() const;
  void set_crop_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_crop_mode(::std::string&& value);
  #endif
  void set_crop_mode(const char* value);
  void set_crop_mode(const char* value, size_t size);
  ::std::string* mutable_crop_mode();
  ::std::string* release_crop_mode();
  void set_allocated_crop_mode(::std::string* crop_mode);

  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_root_folder(::std::string&& value);
  #endif
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  bool cache_images() const;
  void set_cache_images(bool value);

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  ::google::protobuf::uint32 context_pad() const;
  void set_context_pad(::google::protobuf::uint32 value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  float fg_threshold() const;
  void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  float bg_threshold() const;
  void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  float fg_fraction() const;
  void set_fg_fraction(float value);

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_crop_size();
  void clear_has_crop_size();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_fg_threshold();
  void clear_has_fg_threshold();
  void set_has_bg_threshold();
  void clear_has_bg_threshold();
  void set_has_fg_fraction();
  void clear_has_fg_fraction();
  void set_has_context_pad();
  void clear_has_context_pad();
  void set_has_crop_mode();
  void clear_has_crop_mode();
  void set_has_cache_images();
  void clear_has_cache_images();
  void set_has_root_folder();
  void clear_has_root_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  float scale_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsWindowDataParameterImpl();
};
// -------------------------------------------------------------------

class MILDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MILDataParameter) */ {
 public:
  MILDataParameter();
  virtual ~MILDataParameter();

  MILDataParameter(const MILDataParameter& from);

  inline MILDataParameter& operator=(const MILDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MILDataParameter(MILDataParameter&& from) noexcept
    : MILDataParameter() {
    *this = ::std::move(from);
  }

  inline MILDataParameter& operator=(MILDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MILDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MILDataParameter* internal_default_instance() {
    return reinterpret_cast<const MILDataParameter*>(
               &_MILDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(MILDataParameter* other);
  friend void swap(MILDataParameter& a, MILDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MILDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MILDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MILDataParameter& from);
  void MergeFrom(const MILDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MILDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string label_file = 7;
  bool has_label_file() const;
  void clear_label_file();
  static const int kLabelFileFieldNumber = 7;
  const ::std::string& label_file() const;
  void set_label_file(const ::std::string& value);
  #if LANG_CXX11
  void set_label_file(::std::string&& value);
  #endif
  void set_label_file(const char* value);
  void set_label_file(const char* value, size_t size);
  ::std::string* mutable_label_file();
  ::std::string* release_label_file();
  void set_allocated_label_file(::std::string* label_file);

  // optional string root_dir = 11;
  bool has_root_dir() const;
  void clear_root_dir();
  static const int kRootDirFieldNumber = 11;
  const ::std::string& root_dir() const;
  void set_root_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_root_dir(::std::string&& value);
  #endif
  void set_root_dir(const char* value);
  void set_root_dir(const char* value, size_t size);
  ::std::string* mutable_root_dir();
  ::std::string* release_root_dir();
  void set_allocated_root_dir(::std::string* root_dir);

  // optional string ext = 12;
  bool has_ext() const;
  void clear_ext();
  static const int kExtFieldNumber = 12;
  const ::std::string& ext() const;
  void set_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_ext(::std::string&& value);
  #endif
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  ::std::string* mutable_ext();
  ::std::string* release_ext();
  void set_allocated_ext(::std::string* ext);

  // optional uint32 images_per_batch = 3;
  bool has_images_per_batch() const;
  void clear_images_per_batch();
  static const int kImagesPerBatchFieldNumber = 3;
  ::google::protobuf::uint32 images_per_batch() const;
  void set_images_per_batch(::google::protobuf::uint32 value);

  // optional uint32 n_classes = 5;
  bool has_n_classes() const;
  void clear_n_classes();
  static const int kNClassesFieldNumber = 5;
  ::google::protobuf::uint32 n_classes() const;
  void set_n_classes(::google::protobuf::uint32 value);

  // optional uint32 num_scales = 2 [default = 1];
  bool has_num_scales() const;
  void clear_num_scales();
  static const int kNumScalesFieldNumber = 2;
  ::google::protobuf::uint32 num_scales() const;
  void set_num_scales(::google::protobuf::uint32 value);

  // optional uint32 channels = 4 [default = 3];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 4;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // optional float scale_factor = 6 [default = 1];
  bool has_scale_factor() const;
  void clear_scale_factor();
  static const int kScaleFactorFieldNumber = 6;
  float scale_factor() const;
  void set_scale_factor(float value);

  // optional bool randomize = 13 [default = true];
  bool has_randomize() const;
  void clear_randomize();
  static const int kRandomizeFieldNumber = 13;
  bool randomize() const;
  void set_randomize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.MILDataParameter)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_num_scales();
  void clear_has_num_scales();
  void set_has_scale_factor();
  void clear_has_scale_factor();
  void set_has_channels();
  void clear_has_channels();
  void set_has_images_per_batch();
  void clear_has_images_per_batch();
  void set_has_n_classes();
  void clear_has_n_classes();
  void set_has_label_file();
  void clear_has_label_file();
  void set_has_root_dir();
  void clear_has_root_dir();
  void set_has_ext();
  void clear_has_ext();
  void set_has_randomize();
  void clear_has_randomize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr label_file_;
  ::google::protobuf::internal::ArenaStringPtr root_dir_;
  ::google::protobuf::internal::ArenaStringPtr ext_;
  ::google::protobuf::uint32 images_per_batch_;
  ::google::protobuf::uint32 n_classes_;
  ::google::protobuf::uint32 num_scales_;
  ::google::protobuf::uint32 channels_;
  float scale_factor_;
  bool randomize_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsMILDataParameterImpl();
};
// -------------------------------------------------------------------

class SPPParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SPPParameter) */ {
 public:
  SPPParameter();
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SPPParameter(SPPParameter&& from) noexcept
    : SPPParameter() {
    *this = ::std::move(from);
  }

  inline SPPParameter& operator=(SPPParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPPParameter* internal_default_instance() {
    return reinterpret_cast<const SPPParameter*>(
               &_SPPParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(SPPParameter* other);
  friend void swap(SPPParameter& a, SPPParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SPPParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SPPParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SPPParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    SPPParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    SPPParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static const Engine DEFAULT =
    SPPParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SPPParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  bool has_pyramid_height() const;
  void clear_pyramid_height();
  static const int kPyramidHeightFieldNumber = 1;
  ::google::protobuf::uint32 pyramid_height() const;
  void set_pyramid_height(::google::protobuf::uint32 value);

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 2;
  ::caffe::SPPParameter_PoolMethod pool() const;
  void set_pool(::caffe::SPPParameter_PoolMethod value);

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::SPPParameter_Engine engine() const;
  void set_engine(::caffe::SPPParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SPPParameter)
 private:
  void set_has_pyramid_height();
  void clear_has_pyramid_height();
  void set_has_pool();
  void clear_has_pool();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 pyramid_height_;
  int pool_;
  int engine_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSPPParameterImpl();
};
// -------------------------------------------------------------------

class V1LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V1LayerParameter) */ {
 public:
  V1LayerParameter();
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V1LayerParameter(V1LayerParameter&& from) noexcept
    : V1LayerParameter() {
    *this = ::std::move(from);
  }

  inline V1LayerParameter& operator=(V1LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V1LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V1LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V1LayerParameter*>(
               &_V1LayerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(V1LayerParameter* other);
  friend void swap(V1LayerParameter& a, V1LayerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V1LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  V1LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(V1LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static const LayerType NONE =
    V1LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL =
    V1LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY =
    V1LayerParameter_LayerType_ACCURACY;
  static const LayerType ARGMAX =
    V1LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL =
    V1LayerParameter_LayerType_BNLL;
  static const LayerType CONCAT =
    V1LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS =
    V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION =
    V1LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA =
    V1LayerParameter_LayerType_DATA;
  static const LayerType DECONVOLUTION =
    V1LayerParameter_LayerType_DECONVOLUTION;
  static const LayerType DROPOUT =
    V1LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA =
    V1LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS =
    V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE =
    V1LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP =
    V1LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN =
    V1LayerParameter_LayerType_FLATTEN;
  static const LayerType HDF5_DATA =
    V1LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT =
    V1LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS =
    V1LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType IM2COL =
    V1LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA =
    V1LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType INFOGAIN_LOSS =
    V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT =
    V1LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType LRN =
    V1LayerParameter_LayerType_LRN;
  static const LayerType MEMORY_DATA =
    V1LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS =
    V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN =
    V1LayerParameter_LayerType_MVN;
  static const LayerType POOLING =
    V1LayerParameter_LayerType_POOLING;
  static const LayerType POWER =
    V1LayerParameter_LayerType_POWER;
  static const LayerType RELU =
    V1LayerParameter_LayerType_RELU;
  static const LayerType SIGMOID =
    V1LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE =
    V1LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX =
    V1LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS =
    V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT =
    V1LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE =
    V1LayerParameter_LayerType_SLICE;
  static const LayerType TANH =
    V1LayerParameter_LayerType_TANH;
  static const LayerType WINDOW_DATA =
    V1LayerParameter_LayerType_WINDOW_DATA;
  static const LayerType THRESHOLD =
    V1LayerParameter_LayerType_THRESHOLD;
  static const LayerType LOCAL =
    V1LayerParameter_LayerType_LOCAL;
  static const LayerType BN =
    V1LayerParameter_LayerType_BN;
  static const LayerType NORMALIZE =
    V1LayerParameter_LayerType_NORMALIZE;
  static const LayerType INSANITY =
    V1LayerParameter_LayerType_INSANITY;
  static const LayerType TRIPLET_LOSS =
    V1LayerParameter_LayerType_TRIPLET_LOSS;
  static const LayerType ROIPOOLING =
    V1LayerParameter_LayerType_ROIPOOLING;
  static const LayerType BATCH_NORM =
    V1LayerParameter_LayerType_BATCH_NORM;
  static const LayerType ELTWISE_AFFINE =
    V1LayerParameter_LayerType_ELTWISE_AFFINE;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    V1LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 2;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bottom(int index, ::std::string&& value);
  #endif
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  #if LANG_CXX11
  void add_bottom(::std::string&& value);
  #endif
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 3;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_top(int index, ::std::string&& value);
  #endif
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  #if LANG_CXX11
  void add_top(::std::string&& value);
  #endif
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // repeated .caffe.BlobProto blobs = 6;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated .caffe.NetStateRule include = 32;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 32;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 33;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated string param = 1001;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 1001;
  const ::std::string& param(int index) const;
  ::std::string* mutable_param(int index);
  void set_param(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_param(int index, ::std::string&& value);
  #endif
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, size_t size);
  ::std::string* add_param();
  void add_param(const ::std::string& value);
  #if LANG_CXX11
  void add_param(::std::string&& value);
  #endif
  void add_param(const char* value);
  void add_param(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  ::caffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value);
  const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  const ::caffe::V0LayerParameter& layer() const;
  ::caffe::V0LayerParameter* release_layer();
  ::caffe::V0LayerParameter* mutable_layer();
  void set_allocated_layer(::caffe::V0LayerParameter* layer);

  // optional .caffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* release_concat_param();
  ::caffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* release_convolution_param();
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* release_data_param();
  ::caffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* release_dropout_param();
  ::caffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* release_image_data_param();
  ::caffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* release_inner_product_param();
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* release_lrn_param();
  ::caffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* release_pooling_param();
  ::caffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* release_window_data_param();
  ::caffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* release_power_param();
  ::caffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* release_memory_data_param();
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* release_argmax_param();
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* release_eltwise_param();
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* release_threshold_param();
  ::caffe::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* release_dummy_data_param();
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* release_accuracy_param();
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* release_relu_param();
  ::caffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* release_slice_param();
  ::caffe::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* release_mvn_param();
  ::caffe::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* release_transform_param();
  ::caffe::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* release_tanh_param();
  ::caffe::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* release_sigmoid_param();
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* release_softmax_param();
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* release_exp_param();
  ::caffe::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.LossParameter loss_param = 42;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 42;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* release_loss_param();
  ::caffe::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.BNParameter bn_param = 43;
  bool has_bn_param() const;
  void clear_bn_param();
  static const int kBnParamFieldNumber = 43;
  const ::caffe::BNParameter& bn_param() const;
  ::caffe::BNParameter* release_bn_param();
  ::caffe::BNParameter* mutable_bn_param();
  void set_allocated_bn_param(::caffe::BNParameter* bn_param);

  // optional .caffe.LocalParameter local_param = 44;
  bool has_local_param() const;
  void clear_local_param();
  static const int kLocalParamFieldNumber = 44;
  const ::caffe::LocalParameter& local_param() const;
  ::caffe::LocalParameter* release_local_param();
  ::caffe::LocalParameter* mutable_local_param();
  void set_allocated_local_param(::caffe::LocalParameter* local_param);

  // optional .caffe.PReLUParameter prelu_param = 45;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 45;
  const ::caffe::PReLUParameter& prelu_param() const;
  ::caffe::PReLUParameter* release_prelu_param();
  ::caffe::PReLUParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.InsanityParameter insanity_param = 46;
  bool has_insanity_param() const;
  void clear_insanity_param();
  static const int kInsanityParamFieldNumber = 46;
  const ::caffe::InsanityParameter& insanity_param() const;
  ::caffe::InsanityParameter* release_insanity_param();
  ::caffe::InsanityParameter* mutable_insanity_param();
  void set_allocated_insanity_param(::caffe::InsanityParameter* insanity_param);

  // optional .caffe.TripletLossParameter triplet_loss_param = 47;
  bool has_triplet_loss_param() const;
  void clear_triplet_loss_param();
  static const int kTripletLossParamFieldNumber = 47;
  const ::caffe::TripletLossParameter& triplet_loss_param() const;
  ::caffe::TripletLossParameter* release_triplet_loss_param();
  ::caffe::TripletLossParameter* mutable_triplet_loss_param();
  void set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param);

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 48;
  bool has_roi_pooling_param() const;
  void clear_roi_pooling_param();
  static const int kRoiPoolingParamFieldNumber = 48;
  const ::caffe::ROIPoolingParameter& roi_pooling_param() const;
  ::caffe::ROIPoolingParameter* release_roi_pooling_param();
  ::caffe::ROIPoolingParameter* mutable_roi_pooling_param();
  void set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param);

  // optional .caffe.EltwiseAffineParameter eltwise_affine_param = 49;
  bool has_eltwise_affine_param() const;
  void clear_eltwise_affine_param();
  static const int kEltwiseAffineParamFieldNumber = 49;
  const ::caffe::EltwiseAffineParameter& eltwise_affine_param() const;
  ::caffe::EltwiseAffineParameter* release_eltwise_affine_param();
  ::caffe::EltwiseAffineParameter* mutable_eltwise_affine_param();
  void set_allocated_eltwise_affine_param(::caffe::EltwiseAffineParameter* eltwise_affine_param);

  // optional .caffe.SubRegionParameter sub_region_param = 50;
  bool has_sub_region_param() const;
  void clear_sub_region_param();
  static const int kSubRegionParamFieldNumber = 50;
  const ::caffe::SubRegionParameter& sub_region_param() const;
  ::caffe::SubRegionParameter* release_sub_region_param();
  ::caffe::SubRegionParameter* mutable_sub_region_param();
  void set_allocated_sub_region_param(::caffe::SubRegionParameter* sub_region_param);

  // optional .caffe.NoiseParameter noise_param = 51;
  bool has_noise_param() const;
  void clear_noise_param();
  static const int kNoiseParamFieldNumber = 51;
  const ::caffe::NoiseParameter& noise_param() const;
  ::caffe::NoiseParameter* release_noise_param();
  ::caffe::NoiseParameter* mutable_noise_param();
  void set_allocated_noise_param(::caffe::NoiseParameter* noise_param);

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::caffe::V1LayerParameter_LayerType type() const;
  void set_type(::caffe::V1LayerParameter_LayerType value);

  // @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_accuracy_param();
  void clear_has_accuracy_param();
  void set_has_argmax_param();
  void clear_has_argmax_param();
  void set_has_concat_param();
  void clear_has_concat_param();
  void set_has_contrastive_loss_param();
  void clear_has_contrastive_loss_param();
  void set_has_convolution_param();
  void clear_has_convolution_param();
  void set_has_data_param();
  void clear_has_data_param();
  void set_has_dropout_param();
  void clear_has_dropout_param();
  void set_has_dummy_data_param();
  void clear_has_dummy_data_param();
  void set_has_eltwise_param();
  void clear_has_eltwise_param();
  void set_has_exp_param();
  void clear_has_exp_param();
  void set_has_hdf5_data_param();
  void clear_has_hdf5_data_param();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();
  void set_has_hinge_loss_param();
  void clear_has_hinge_loss_param();
  void set_has_image_data_param();
  void clear_has_image_data_param();
  void set_has_infogain_loss_param();
  void clear_has_infogain_loss_param();
  void set_has_inner_product_param();
  void clear_has_inner_product_param();
  void set_has_lrn_param();
  void clear_has_lrn_param();
  void set_has_memory_data_param();
  void clear_has_memory_data_param();
  void set_has_mvn_param();
  void clear_has_mvn_param();
  void set_has_pooling_param();
  void clear_has_pooling_param();
  void set_has_power_param();
  void clear_has_power_param();
  void set_has_relu_param();
  void clear_has_relu_param();
  void set_has_sigmoid_param();
  void clear_has_sigmoid_param();
  void set_has_softmax_param();
  void clear_has_softmax_param();
  void set_has_slice_param();
  void clear_has_slice_param();
  void set_has_tanh_param();
  void clear_has_tanh_param();
  void set_has_threshold_param();
  void clear_has_threshold_param();
  void set_has_window_data_param();
  void clear_has_window_data_param();
  void set_has_transform_param();
  void clear_has_transform_param();
  void set_has_loss_param();
  void clear_has_loss_param();
  void set_has_layer();
  void clear_has_layer();
  void set_has_bn_param();
  void clear_has_bn_param();
  void set_has_local_param();
  void clear_has_local_param();
  void set_has_prelu_param();
  void clear_has_prelu_param();
  void set_has_insanity_param();
  void clear_has_insanity_param();
  void set_has_triplet_loss_param();
  void clear_has_triplet_loss_param();
  void set_has_roi_pooling_param();
  void clear_has_roi_pooling_param();
  void set_has_eltwise_affine_param();
  void clear_has_eltwise_affine_param();
  void set_has_sub_region_param();
  void clear_has_sub_region_param();
  void set_has_noise_param();
  void clear_has_noise_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe::V0LayerParameter* layer_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::BNParameter* bn_param_;
  ::caffe::LocalParameter* local_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::InsanityParameter* insanity_param_;
  ::caffe::TripletLossParameter* triplet_loss_param_;
  ::caffe::ROIPoolingParameter* roi_pooling_param_;
  ::caffe::EltwiseAffineParameter* eltwise_affine_param_;
  ::caffe::SubRegionParameter* sub_region_param_;
  ::caffe::NoiseParameter* noise_param_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsV1LayerParameterImpl();
};
// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V0LayerParameter) */ {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  V0LayerParameter(V0LayerParameter&& from) noexcept
    : V0LayerParameter() {
    *this = ::std::move(from);
  }

  inline V0LayerParameter& operator=(V0LayerParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(V0LayerParameter* other);
  friend void swap(V0LayerParameter& a, V0LayerParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline V0LayerParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  V0LayerParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(V0LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 50;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string source = 16;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 16;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string meanfile = 18;
  bool has_meanfile() const;
  void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  const ::std::string& meanfile() const;
  void set_meanfile(const ::std::string& value);
  #if LANG_CXX11
  void set_meanfile(::std::string&& value);
  #endif
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  ::std::string* mutable_meanfile();
  ::std::string* release_meanfile();
  void set_allocated_meanfile(::std::string* meanfile);

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  const ::std::string& det_crop_mode() const;
  void set_det_crop_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_det_crop_mode(::std::string&& value);
  #endif
  void set_det_crop_mode(const char* value);
  void set_det_crop_mode(const char* value, size_t size);
  ::std::string* mutable_det_crop_mode();
  ::std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional .caffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 7;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  ::google::protobuf::uint32 kernelsize() const;
  void set_kernelsize(::google::protobuf::uint32 value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 11;
  ::caffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::caffe::V0LayerParameter_PoolMethod value);

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  ::google::protobuf::uint32 batchsize() const;
  void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  ::google::protobuf::uint32 cropsize() const;
  void set_cropsize(::google::protobuf::uint32 value);

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  ::google::protobuf::int32 new_width() const;
  void set_new_width(::google::protobuf::int32 value);

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  bool shuffle_images() const;
  void set_shuffle_images(bool value);

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  ::google::protobuf::uint32 det_context_pad() const;
  void set_det_context_pad(::google::protobuf::uint32 value);

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  ::google::protobuf::int32 new_num() const;
  void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  ::google::protobuf::int32 new_channels() const;
  void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  ::google::protobuf::int32 new_height() const;
  void set_new_height(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  bool biasterm() const;
  void set_biasterm(bool value);

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 9;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 10;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 15;
  float beta() const;
  void set_beta(float value);

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 17;
  float scale() const;
  void set_scale(float value);

  // optional float k = 22 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 22;
  float k() const;
  void set_k(float value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_biasterm();
  void clear_has_biasterm();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_pad();
  void clear_has_pad();
  void set_has_kernelsize();
  void clear_has_kernelsize();
  void set_has_group();
  void clear_has_group();
  void set_has_stride();
  void clear_has_stride();
  void set_has_pool();
  void clear_has_pool();
  void set_has_dropout_ratio();
  void clear_has_dropout_ratio();
  void set_has_local_size();
  void clear_has_local_size();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();
  void set_has_k();
  void clear_has_k();
  void set_has_source();
  void clear_has_source();
  void set_has_scale();
  void clear_has_scale();
  void set_has_meanfile();
  void clear_has_meanfile();
  void set_has_batchsize();
  void clear_has_batchsize();
  void set_has_cropsize();
  void clear_has_cropsize();
  void set_has_mirror();
  void clear_has_mirror();
  void set_has_rand_skip();
  void clear_has_rand_skip();
  void set_has_det_fg_threshold();
  void clear_has_det_fg_threshold();
  void set_has_det_bg_threshold();
  void clear_has_det_bg_threshold();
  void set_has_det_fg_fraction();
  void clear_has_det_fg_fraction();
  void set_has_det_context_pad();
  void clear_has_det_context_pad();
  void set_has_det_crop_mode();
  void clear_has_det_crop_mode();
  void set_has_new_num();
  void clear_has_new_num();
  void set_has_new_channels();
  void clear_has_new_channels();
  void set_has_new_height();
  void clear_has_new_height();
  void set_has_new_width();
  void clear_has_new_width();
  void set_has_shuffle_images();
  void clear_has_shuffle_images();
  void set_has_concat_dim();
  void clear_has_concat_dim();
  void set_has_hdf5_output_param();
  void clear_has_hdf5_output_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr meanfile_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_det_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr det_crop_mode_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernelsize_;
  int pool_;
  ::google::protobuf::uint32 batchsize_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::int32 new_width_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 det_context_pad_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::uint32 concat_dim_;
  bool biasterm_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  float scale_;
  float k_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  mutable int _cached_size_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsV0LayerParameterImpl();
};
// -------------------------------------------------------------------

class TripletLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TripletLossParameter) */ {
 public:
  TripletLossParameter();
  virtual ~TripletLossParameter();

  TripletLossParameter(const TripletLossParameter& from);

  inline TripletLossParameter& operator=(const TripletLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TripletLossParameter(TripletLossParameter&& from) noexcept
    : TripletLossParameter() {
    *this = ::std::move(from);
  }

  inline TripletLossParameter& operator=(TripletLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripletLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TripletLossParameter* internal_default_instance() {
    return reinterpret_cast<const TripletLossParameter*>(
               &_TripletLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(TripletLossParameter* other);
  friend void swap(TripletLossParameter& a, TripletLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TripletLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TripletLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TripletLossParameter& from);
  void MergeFrom(const TripletLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TripletLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 1;
  float margin() const;
  void set_margin(float value);

  // @@protoc_insertion_point(class_scope:caffe.TripletLossParameter)
 private:
  void set_has_margin();
  void clear_has_margin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float margin_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsTripletLossParameterImpl();
};
// -------------------------------------------------------------------

class ROIPoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ROIPoolingParameter) */ {
 public:
  ROIPoolingParameter();
  virtual ~ROIPoolingParameter();

  ROIPoolingParameter(const ROIPoolingParameter& from);

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ROIPoolingParameter(ROIPoolingParameter&& from) noexcept
    : ROIPoolingParameter() {
    *this = ::std::move(from);
  }

  inline ROIPoolingParameter& operator=(ROIPoolingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIPoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParameter*>(
               &_ROIPoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(ROIPoolingParameter* other);
  friend void swap(ROIPoolingParameter& a, ROIPoolingParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ROIPoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ROIPoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROIPoolingParameter& from);
  void MergeFrom(const ROIPoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROIPoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pooled_h = 1 [default = 0];
  bool has_pooled_h() const;
  void clear_pooled_h();
  static const int kPooledHFieldNumber = 1;
  ::google::protobuf::uint32 pooled_h() const;
  void set_pooled_h(::google::protobuf::uint32 value);

  // optional uint32 pooled_w = 2 [default = 0];
  bool has_pooled_w() const;
  void clear_pooled_w();
  static const int kPooledWFieldNumber = 2;
  ::google::protobuf::uint32 pooled_w() const;
  void set_pooled_w(::google::protobuf::uint32 value);

  // optional float spatial_scale = 3 [default = 1];
  bool has_spatial_scale() const;
  void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 3;
  float spatial_scale() const;
  void set_spatial_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ROIPoolingParameter)
 private:
  void set_has_pooled_h();
  void clear_has_pooled_h();
  void set_has_pooled_w();
  void clear_has_pooled_w();
  void set_has_spatial_scale();
  void clear_has_spatial_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 pooled_h_;
  ::google::protobuf::uint32 pooled_w_;
  float spatial_scale_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsROIPoolingParameterImpl();
};
// -------------------------------------------------------------------

class InsanityParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InsanityParameter) */ {
 public:
  InsanityParameter();
  virtual ~InsanityParameter();

  InsanityParameter(const InsanityParameter& from);

  inline InsanityParameter& operator=(const InsanityParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsanityParameter(InsanityParameter&& from) noexcept
    : InsanityParameter() {
    *this = ::std::move(from);
  }

  inline InsanityParameter& operator=(InsanityParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsanityParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsanityParameter* internal_default_instance() {
    return reinterpret_cast<const InsanityParameter*>(
               &_InsanityParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(InsanityParameter* other);
  friend void swap(InsanityParameter& a, InsanityParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsanityParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  InsanityParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InsanityParameter& from);
  void MergeFrom(const InsanityParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InsanityParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float lb = 1 [default = 5];
  bool has_lb() const;
  void clear_lb();
  static const int kLbFieldNumber = 1;
  float lb() const;
  void set_lb(float value);

  // optional float ub = 2 [default = 10];
  bool has_ub() const;
  void clear_ub();
  static const int kUbFieldNumber = 2;
  float ub() const;
  void set_ub(float value);

  // @@protoc_insertion_point(class_scope:caffe.InsanityParameter)
 private:
  void set_has_lb();
  void clear_has_lb();
  void set_has_ub();
  void clear_has_ub();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float lb_;
  float ub_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsInsanityParameterImpl();
};
// -------------------------------------------------------------------

class PReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PReLUParameter) */ {
 public:
  PReLUParameter();
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PReLUParameter(PReLUParameter&& from) noexcept
    : PReLUParameter() {
    *this = ::std::move(from);
  }

  inline PReLUParameter& operator=(PReLUParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PReLUParameter* internal_default_instance() {
    return reinterpret_cast<const PReLUParameter*>(
               &_PReLUParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(PReLUParameter* other);
  friend void swap(PReLUParameter& a, PReLUParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PReLUParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PReLUParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 1;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 1;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* release_filler();
  ::caffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PReLUParameter)
 private:
  void set_has_filler();
  void clear_has_filler();
  void set_has_channel_shared();
  void clear_has_channel_shared();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  bool channel_shared_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPReLUParameterImpl();
};
// -------------------------------------------------------------------

class BNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BNParameter) */ {
 public:
  BNParameter();
  virtual ~BNParameter();

  BNParameter(const BNParameter& from);

  inline BNParameter& operator=(const BNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BNParameter(BNParameter&& from) noexcept
    : BNParameter() {
    *this = ::std::move(from);
  }

  inline BNParameter& operator=(BNParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BNParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BNParameter* internal_default_instance() {
    return reinterpret_cast<const BNParameter*>(
               &_BNParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(BNParameter* other);
  friend void swap(BNParameter& a, BNParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BNParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BNParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BNParameter& from);
  void MergeFrom(const BNParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BNParameter_Engine Engine;
  static const Engine DEFAULT =
    BNParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    BNParameter_Engine_CAFFE;
  static const Engine CUDNN =
    BNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return BNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    BNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    BNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    BNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return BNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return BNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return BNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter slope_filler = 1;
  bool has_slope_filler() const;
  void clear_slope_filler();
  static const int kSlopeFillerFieldNumber = 1;
  const ::caffe::FillerParameter& slope_filler() const;
  ::caffe::FillerParameter* release_slope_filler();
  ::caffe::FillerParameter* mutable_slope_filler();
  void set_allocated_slope_filler(::caffe::FillerParameter* slope_filler);

  // optional .caffe.FillerParameter bias_filler = 2;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 2;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool frozen = 5 [default = false];
  bool has_frozen() const;
  void clear_frozen();
  static const int kFrozenFieldNumber = 5;
  bool frozen() const;
  void set_frozen(bool value);

  // optional .caffe.BNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::BNParameter_Engine engine() const;
  void set_engine(::caffe::BNParameter_Engine value);

  // optional float momentum = 3 [default = 0.9];
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 3;
  float momentum() const;
  void set_momentum(float value);

  // optional float eps = 4 [default = 1e-005];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 4;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.BNParameter)
 private:
  void set_has_slope_filler();
  void clear_has_slope_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_momentum();
  void clear_has_momentum();
  void set_has_eps();
  void clear_has_eps();
  void set_has_frozen();
  void clear_has_frozen();
  void set_has_engine();
  void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* slope_filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool frozen_;
  int engine_;
  float momentum_;
  float eps_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsBNParameterImpl();
};
// -------------------------------------------------------------------

class LocalParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LocalParameter) */ {
 public:
  LocalParameter();
  virtual ~LocalParameter();

  LocalParameter(const LocalParameter& from);

  inline LocalParameter& operator=(const LocalParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalParameter(LocalParameter&& from) noexcept
    : LocalParameter() {
    *this = ::std::move(from);
  }

  inline LocalParameter& operator=(LocalParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalParameter* internal_default_instance() {
    return reinterpret_cast<const LocalParameter*>(
               &_LocalParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(LocalParameter* other);
  friend void swap(LocalParameter& a, LocalParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalParameter& from);
  void MergeFrom(const LocalParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 pad = 3 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 4;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional uint32 stride = 6 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.LocalParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_bias_term();
  void clear_has_bias_term();
  void set_has_pad();
  void clear_has_pad();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_stride();
  void clear_has_stride();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 kernel_size_;
  bool bias_term_;
  ::google::protobuf::uint32 stride_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLocalParameterImpl();
};
// -------------------------------------------------------------------

class EltwiseAffineParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EltwiseAffineParameter) */ {
 public:
  EltwiseAffineParameter();
  virtual ~EltwiseAffineParameter();

  EltwiseAffineParameter(const EltwiseAffineParameter& from);

  inline EltwiseAffineParameter& operator=(const EltwiseAffineParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EltwiseAffineParameter(EltwiseAffineParameter&& from) noexcept
    : EltwiseAffineParameter() {
    *this = ::std::move(from);
  }

  inline EltwiseAffineParameter& operator=(EltwiseAffineParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseAffineParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EltwiseAffineParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseAffineParameter*>(
               &_EltwiseAffineParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(EltwiseAffineParameter* other);
  friend void swap(EltwiseAffineParameter& a, EltwiseAffineParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EltwiseAffineParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  EltwiseAffineParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EltwiseAffineParameter& from);
  void MergeFrom(const EltwiseAffineParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EltwiseAffineParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter slope_filler = 1;
  bool has_slope_filler() const;
  void clear_slope_filler();
  static const int kSlopeFillerFieldNumber = 1;
  const ::caffe::FillerParameter& slope_filler() const;
  ::caffe::FillerParameter* release_slope_filler();
  ::caffe::FillerParameter* mutable_slope_filler();
  void set_allocated_slope_filler(::caffe::FillerParameter* slope_filler);

  // optional .caffe.FillerParameter bias_filler = 2;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 2;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* release_bias_filler();
  ::caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool channel_shared = 3 [default = false];
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 3;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseAffineParameter)
 private:
  void set_has_slope_filler();
  void clear_has_slope_filler();
  void set_has_bias_filler();
  void clear_has_bias_filler();
  void set_has_channel_shared();
  void clear_has_channel_shared();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* slope_filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool channel_shared_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsEltwiseAffineParameterImpl();
};
// -------------------------------------------------------------------

class SubRegionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SubRegionParameter) */ {
 public:
  SubRegionParameter();
  virtual ~SubRegionParameter();

  SubRegionParameter(const SubRegionParameter& from);

  inline SubRegionParameter& operator=(const SubRegionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubRegionParameter(SubRegionParameter&& from) noexcept
    : SubRegionParameter() {
    *this = ::std::move(from);
  }

  inline SubRegionParameter& operator=(SubRegionParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubRegionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubRegionParameter* internal_default_instance() {
    return reinterpret_cast<const SubRegionParameter*>(
               &_SubRegionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(SubRegionParameter* other);
  friend void swap(SubRegionParameter& a, SubRegionParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubRegionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SubRegionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubRegionParameter& from);
  void MergeFrom(const SubRegionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubRegionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 region_height = 1;
  bool has_region_height() const;
  void clear_region_height();
  static const int kRegionHeightFieldNumber = 1;
  ::google::protobuf::uint32 region_height() const;
  void set_region_height(::google::protobuf::uint32 value);

  // optional uint32 region_width = 2;
  bool has_region_width() const;
  void clear_region_width();
  static const int kRegionWidthFieldNumber = 2;
  ::google::protobuf::uint32 region_width() const;
  void set_region_width(::google::protobuf::uint32 value);

  // optional uint32 data_height = 3;
  bool has_data_height() const;
  void clear_data_height();
  static const int kDataHeightFieldNumber = 3;
  ::google::protobuf::uint32 data_height() const;
  void set_data_height(::google::protobuf::uint32 value);

  // optional uint32 data_width = 4;
  bool has_data_width() const;
  void clear_data_width();
  static const int kDataWidthFieldNumber = 4;
  ::google::protobuf::uint32 data_width() const;
  void set_data_width(::google::protobuf::uint32 value);

  // optional uint32 as_dim = 5 [default = 1];
  bool has_as_dim() const;
  void clear_as_dim();
  static const int kAsDimFieldNumber = 5;
  ::google::protobuf::uint32 as_dim() const;
  void set_as_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SubRegionParameter)
 private:
  void set_has_region_height();
  void clear_has_region_height();
  void set_has_region_width();
  void clear_has_region_width();
  void set_has_data_height();
  void clear_has_data_height();
  void set_has_data_width();
  void clear_has_data_width();
  void set_has_as_dim();
  void clear_has_as_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 region_height_;
  ::google::protobuf::uint32 region_width_;
  ::google::protobuf::uint32 data_height_;
  ::google::protobuf::uint32 data_width_;
  ::google::protobuf::uint32 as_dim_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSubRegionParameterImpl();
};
// -------------------------------------------------------------------

class NoiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NoiseParameter) */ {
 public:
  NoiseParameter();
  virtual ~NoiseParameter();

  NoiseParameter(const NoiseParameter& from);

  inline NoiseParameter& operator=(const NoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NoiseParameter(NoiseParameter&& from) noexcept
    : NoiseParameter() {
    *this = ::std::move(from);
  }

  inline NoiseParameter& operator=(NoiseParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoiseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoiseParameter* internal_default_instance() {
    return reinterpret_cast<const NoiseParameter*>(
               &_NoiseParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(NoiseParameter* other);
  friend void swap(NoiseParameter& a, NoiseParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoiseParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NoiseParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoiseParameter& from);
  void MergeFrom(const NoiseParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float gaussian_std = 1 [default = 0];
  bool has_gaussian_std() const;
  void clear_gaussian_std();
  static const int kGaussianStdFieldNumber = 1;
  float gaussian_std() const;
  void set_gaussian_std(float value);

  // optional float uniform_range = 2 [default = 0];
  bool has_uniform_range() const;
  void clear_uniform_range();
  static const int kUniformRangeFieldNumber = 2;
  float uniform_range() const;
  void set_uniform_range(float value);

  // optional float bias = 3 [default = 0];
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 3;
  float bias() const;
  void set_bias(float value);

  // @@protoc_insertion_point(class_scope:caffe.NoiseParameter)
 private:
  void set_has_gaussian_std();
  void clear_has_gaussian_std();
  void set_has_uniform_range();
  void clear_has_uniform_range();
  void set_has_bias();
  void clear_has_bias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float gaussian_std_;
  float uniform_range_;
  float bias_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsNoiseParameterImpl();
};
// -------------------------------------------------------------------

class HotspotParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HotspotParameter) */ {
 public:
  HotspotParameter();
  virtual ~HotspotParameter();

  HotspotParameter(const HotspotParameter& from);

  inline HotspotParameter& operator=(const HotspotParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HotspotParameter(HotspotParameter&& from) noexcept
    : HotspotParameter() {
    *this = ::std::move(from);
  }

  inline HotspotParameter& operator=(HotspotParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotspotParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HotspotParameter* internal_default_instance() {
    return reinterpret_cast<const HotspotParameter*>(
               &_HotspotParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(HotspotParameter* other);
  friend void swap(HotspotParameter& a, HotspotParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HotspotParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  HotspotParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HotspotParameter& from);
  void MergeFrom(const HotspotParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HotspotParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 output_height = 2 [default = 0];
  bool has_output_height() const;
  void clear_output_height();
  static const int kOutputHeightFieldNumber = 2;
  ::google::protobuf::uint32 output_height() const;
  void set_output_height(::google::protobuf::uint32 value);

  // optional uint32 output_width = 3 [default = 0];
  bool has_output_width() const;
  void clear_output_width();
  static const int kOutputWidthFieldNumber = 3;
  ::google::protobuf::uint32 output_width() const;
  void set_output_width(::google::protobuf::uint32 value);

  // optional uint32 data_height = 4 [default = 0];
  bool has_data_height() const;
  void clear_data_height();
  static const int kDataHeightFieldNumber = 4;
  ::google::protobuf::uint32 data_height() const;
  void set_data_height(::google::protobuf::uint32 value);

  // optional uint32 data_width = 5 [default = 0];
  bool has_data_width() const;
  void clear_data_width();
  static const int kDataWidthFieldNumber = 5;
  ::google::protobuf::uint32 data_width() const;
  void set_data_width(::google::protobuf::uint32 value);

  // optional float gaussian_std = 1 [default = 1];
  bool has_gaussian_std() const;
  void clear_gaussian_std();
  static const int kGaussianStdFieldNumber = 1;
  float gaussian_std() const;
  void set_gaussian_std(float value);

  // optional bool mean_removed = 6 [default = true];
  bool has_mean_removed() const;
  void clear_mean_removed();
  static const int kMeanRemovedFieldNumber = 6;
  bool mean_removed() const;
  void set_mean_removed(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HotspotParameter)
 private:
  void set_has_gaussian_std();
  void clear_has_gaussian_std();
  void set_has_output_height();
  void clear_has_output_height();
  void set_has_output_width();
  void clear_has_output_width();
  void set_has_data_height();
  void clear_has_data_height();
  void set_has_data_width();
  void clear_has_data_width();
  void set_has_mean_removed();
  void clear_has_mean_removed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 output_height_;
  ::google::protobuf::uint32 output_width_;
  ::google::protobuf::uint32 data_height_;
  ::google::protobuf::uint32 data_width_;
  float gaussian_std_;
  bool mean_removed_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsHotspotParameterImpl();
};
// -------------------------------------------------------------------

class PredictBoxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PredictBoxParameter) */ {
 public:
  PredictBoxParameter();
  virtual ~PredictBoxParameter();

  PredictBoxParameter(const PredictBoxParameter& from);

  inline PredictBoxParameter& operator=(const PredictBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictBoxParameter(PredictBoxParameter&& from) noexcept
    : PredictBoxParameter() {
    *this = ::std::move(from);
  }

  inline PredictBoxParameter& operator=(PredictBoxParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictBoxParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictBoxParameter* internal_default_instance() {
    return reinterpret_cast<const PredictBoxParameter*>(
               &_PredictBoxParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(PredictBoxParameter* other);
  friend void swap(PredictBoxParameter& a, PredictBoxParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictBoxParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PredictBoxParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PredictBoxParameter& from);
  void MergeFrom(const PredictBoxParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PredictBoxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stride = 1 [default = 2];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 1;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional uint32 receptive_field = 2 [default = 12];
  bool has_receptive_field() const;
  void clear_receptive_field();
  static const int kReceptiveFieldFieldNumber = 2;
  ::google::protobuf::uint32 receptive_field() const;
  void set_receptive_field(::google::protobuf::uint32 value);

  // optional bool nms = 3 [default = true];
  bool has_nms() const;
  void clear_nms();
  static const int kNmsFieldNumber = 3;
  bool nms() const;
  void set_nms(bool value);

  // optional bool output_vector = 4 [default = true];
  bool has_output_vector() const;
  void clear_output_vector();
  static const int kOutputVectorFieldNumber = 4;
  bool output_vector() const;
  void set_output_vector(bool value);

  // optional bool bbreg_exp = 6 [default = true];
  bool has_bbreg_exp() const;
  void clear_bbreg_exp();
  static const int kBbregExpFieldNumber = 6;
  bool bbreg_exp() const;
  void set_bbreg_exp(bool value);

  // optional float positive_thresh = 5 [default = 0.5];
  bool has_positive_thresh() const;
  void clear_positive_thresh();
  static const int kPositiveThreshFieldNumber = 5;
  float positive_thresh() const;
  void set_positive_thresh(float value);

  // @@protoc_insertion_point(class_scope:caffe.PredictBoxParameter)
 private:
  void set_has_stride();
  void clear_has_stride();
  void set_has_receptive_field();
  void clear_has_receptive_field();
  void set_has_nms();
  void clear_has_nms();
  void set_has_output_vector();
  void clear_has_output_vector();
  void set_has_positive_thresh();
  void clear_has_positive_thresh();
  void set_has_bbreg_exp();
  void clear_has_bbreg_exp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 receptive_field_;
  bool nms_;
  bool output_vector_;
  bool bbreg_exp_;
  float positive_thresh_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPredictBoxParameterImpl();
};
// -------------------------------------------------------------------

class FCNDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FCNDataParameter) */ {
 public:
  FCNDataParameter();
  virtual ~FCNDataParameter();

  FCNDataParameter(const FCNDataParameter& from);

  inline FCNDataParameter& operator=(const FCNDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FCNDataParameter(FCNDataParameter&& from) noexcept
    : FCNDataParameter() {
    *this = ::std::move(from);
  }

  inline FCNDataParameter& operator=(FCNDataParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FCNDataParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FCNDataParameter* internal_default_instance() {
    return reinterpret_cast<const FCNDataParameter*>(
               &_FCNDataParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(FCNDataParameter* other);
  friend void swap(FCNDataParameter& a, FCNDataParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FCNDataParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FCNDataParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FCNDataParameter& from);
  void MergeFrom(const FCNDataParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FCNDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_hog = 15 [default = false];
  bool has_use_hog() const;
  void clear_use_hog();
  static const int kUseHogFieldNumber = 15;
  bool use_hog() const;
  void set_use_hog(bool value);

  // optional uint32 template_h = 1 [default = 48];
  bool has_template_h() const;
  void clear_template_h();
  static const int kTemplateHFieldNumber = 1;
  ::google::protobuf::uint32 template_h() const;
  void set_template_h(::google::protobuf::uint32 value);

  // optional uint32 template_w = 2 [default = 42];
  bool has_template_w() const;
  void clear_template_w();
  static const int kTemplateWFieldNumber = 2;
  ::google::protobuf::uint32 template_w() const;
  void set_template_w(::google::protobuf::uint32 value);

  // optional float expand_left = 3 [default = 0.25];
  bool has_expand_left() const;
  void clear_expand_left();
  static const int kExpandLeftFieldNumber = 3;
  float expand_left() const;
  void set_expand_left(float value);

  // optional float expand_right = 4 [default = 0.25];
  bool has_expand_right() const;
  void clear_expand_right();
  static const int kExpandRightFieldNumber = 4;
  float expand_right() const;
  void set_expand_right(float value);

  // optional float expand_top = 5 [default = 0.5];
  bool has_expand_top() const;
  void clear_expand_top();
  static const int kExpandTopFieldNumber = 5;
  float expand_top() const;
  void set_expand_top(float value);

  // optional float expand_bottom = 6 [default = 0.25];
  bool has_expand_bottom() const;
  void clear_expand_bottom();
  static const int kExpandBottomFieldNumber = 6;
  float expand_bottom() const;
  void set_expand_bottom(float value);

  // optional float roi_multiply_h = 7 [default = 5];
  bool has_roi_multiply_h() const;
  void clear_roi_multiply_h();
  static const int kRoiMultiplyHFieldNumber = 7;
  float roi_multiply_h() const;
  void set_roi_multiply_h(float value);

  // optional float roi_multiply_w = 8 [default = 5];
  bool has_roi_multiply_w() const;
  void clear_roi_multiply_w();
  static const int kRoiMultiplyWFieldNumber = 8;
  float roi_multiply_w() const;
  void set_roi_multiply_w(float value);

  // optional float scale_step = 9 [default = 1.1];
  bool has_scale_step() const;
  void clear_scale_step();
  static const int kScaleStepFieldNumber = 9;
  float scale_step() const;
  void set_scale_step(float value);

  // optional int32 scale_step_num = 10 [default = 5];
  bool has_scale_step_num() const;
  void clear_scale_step_num();
  static const int kScaleStepNumFieldNumber = 10;
  ::google::protobuf::int32 scale_step_num() const;
  void set_scale_step_num(::google::protobuf::int32 value);

  // optional int32 gaussian_size_h = 11 [default = 7];
  bool has_gaussian_size_h() const;
  void clear_gaussian_size_h();
  static const int kGaussianSizeHFieldNumber = 11;
  ::google::protobuf::int32 gaussian_size_h() const;
  void set_gaussian_size_h(::google::protobuf::int32 value);

  // optional int32 gaussian_size_w = 12 [default = 7];
  bool has_gaussian_size_w() const;
  void clear_gaussian_size_w();
  static const int kGaussianSizeWFieldNumber = 12;
  ::google::protobuf::int32 gaussian_size_w() const;
  void set_gaussian_size_w(::google::protobuf::int32 value);

  // optional float gaussian_std_h = 13 [default = 1.5];
  bool has_gaussian_std_h() const;
  void clear_gaussian_std_h();
  static const int kGaussianStdHFieldNumber = 13;
  float gaussian_std_h() const;
  void set_gaussian_std_h(float value);

  // optional float gaussian_std_w = 14 [default = 1.5];
  bool has_gaussian_std_w() const;
  void clear_gaussian_std_w();
  static const int kGaussianStdWFieldNumber = 14;
  float gaussian_std_w() const;
  void set_gaussian_std_w(float value);

  // optional int32 hog_cell_size = 16 [default = 4];
  bool has_hog_cell_size() const;
  void clear_hog_cell_size();
  static const int kHogCellSizeFieldNumber = 16;
  ::google::protobuf::int32 hog_cell_size() const;
  void set_hog_cell_size(::google::protobuf::int32 value);

  // optional float min_iou = 17 [default = 0.8];
  bool has_min_iou() const;
  void clear_min_iou();
  static const int kMinIouFieldNumber = 17;
  float min_iou() const;
  void set_min_iou(float value);

  // @@protoc_insertion_point(class_scope:caffe.FCNDataParameter)
 private:
  void set_has_template_h();
  void clear_has_template_h();
  void set_has_template_w();
  void clear_has_template_w();
  void set_has_expand_left();
  void clear_has_expand_left();
  void set_has_expand_right();
  void clear_has_expand_right();
  void set_has_expand_top();
  void clear_has_expand_top();
  void set_has_expand_bottom();
  void clear_has_expand_bottom();
  void set_has_roi_multiply_h();
  void clear_has_roi_multiply_h();
  void set_has_roi_multiply_w();
  void clear_has_roi_multiply_w();
  void set_has_scale_step();
  void clear_has_scale_step();
  void set_has_scale_step_num();
  void clear_has_scale_step_num();
  void set_has_gaussian_size_h();
  void clear_has_gaussian_size_h();
  void set_has_gaussian_size_w();
  void clear_has_gaussian_size_w();
  void set_has_gaussian_std_h();
  void clear_has_gaussian_std_h();
  void set_has_gaussian_std_w();
  void clear_has_gaussian_std_w();
  void set_has_use_hog();
  void clear_has_use_hog();
  void set_has_hog_cell_size();
  void clear_has_hog_cell_size();
  void set_has_min_iou();
  void clear_has_min_iou();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool use_hog_;
  ::google::protobuf::uint32 template_h_;
  ::google::protobuf::uint32 template_w_;
  float expand_left_;
  float expand_right_;
  float expand_top_;
  float expand_bottom_;
  float roi_multiply_h_;
  float roi_multiply_w_;
  float scale_step_;
  ::google::protobuf::int32 scale_step_num_;
  ::google::protobuf::int32 gaussian_size_h_;
  ::google::protobuf::int32 gaussian_size_w_;
  float gaussian_std_h_;
  float gaussian_std_w_;
  ::google::protobuf::int32 hog_cell_size_;
  float min_iou_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsFCNDataParameterImpl();
};
// -------------------------------------------------------------------

class CenterLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CenterLossParameter) */ {
 public:
  CenterLossParameter();
  virtual ~CenterLossParameter();

  CenterLossParameter(const CenterLossParameter& from);

  inline CenterLossParameter& operator=(const CenterLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CenterLossParameter(CenterLossParameter&& from) noexcept
    : CenterLossParameter() {
    *this = ::std::move(from);
  }

  inline CenterLossParameter& operator=(CenterLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CenterLossParameter* internal_default_instance() {
    return reinterpret_cast<const CenterLossParameter*>(
               &_CenterLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(CenterLossParameter* other);
  friend void swap(CenterLossParameter& a, CenterLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CenterLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  CenterLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CenterLossParameter& from);
  void MergeFrom(const CenterLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CenterLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string distance_type = 29 [default = "L2"];
  bool has_distance_type() const;
  void clear_distance_type();
  static const int kDistanceTypeFieldNumber = 29;
  const ::std::string& distance_type() const;
  void set_distance_type(const ::std::string& value);
  #if LANG_CXX11
  void set_distance_type(::std::string&& value);
  #endif
  void set_distance_type(const char* value);
  void set_distance_type(const char* value, size_t size);
  ::std::string* mutable_distance_type();
  ::std::string* release_distance_type();
  void set_allocated_distance_type(::std::string* distance_type);

  // optional .caffe.FillerParameter center_filler = 2;
  bool has_center_filler() const;
  void clear_center_filler();
  static const int kCenterFillerFieldNumber = 2;
  const ::caffe::FillerParameter& center_filler() const;
  ::caffe::FillerParameter* release_center_filler();
  ::caffe::FillerParameter* mutable_center_filler();
  void set_allocated_center_filler(::caffe::FillerParameter* center_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.CenterLossParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_center_filler();
  void clear_has_center_filler();
  void set_has_axis();
  void clear_has_axis();
  void set_has_distance_type();
  void clear_has_distance_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_distance_type_;
  ::google::protobuf::internal::ArenaStringPtr distance_type_;
  ::caffe::FillerParameter* center_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::int32 axis_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsCenterLossParameterImpl();
};
// -------------------------------------------------------------------

class FlipParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FlipParameter) */ {
 public:
  FlipParameter();
  virtual ~FlipParameter();

  FlipParameter(const FlipParameter& from);

  inline FlipParameter& operator=(const FlipParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlipParameter(FlipParameter&& from) noexcept
    : FlipParameter() {
    *this = ::std::move(from);
  }

  inline FlipParameter& operator=(FlipParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlipParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlipParameter* internal_default_instance() {
    return reinterpret_cast<const FlipParameter*>(
               &_FlipParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(FlipParameter* other);
  friend void swap(FlipParameter& a, FlipParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlipParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FlipParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlipParameter& from);
  void MergeFrom(const FlipParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlipParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool flip_height = 2 [default = false];
  bool has_flip_height() const;
  void clear_flip_height();
  static const int kFlipHeightFieldNumber = 2;
  bool flip_height() const;
  void set_flip_height(bool value);

  // optional bool flip_width = 1 [default = true];
  bool has_flip_width() const;
  void clear_flip_width();
  static const int kFlipWidthFieldNumber = 1;
  bool flip_width() const;
  void set_flip_width(bool value);

  // @@protoc_insertion_point(class_scope:caffe.FlipParameter)
 private:
  void set_has_flip_width();
  void clear_has_flip_width();
  void set_has_flip_height();
  void clear_has_flip_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool flip_height_;
  bool flip_width_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsFlipParameterImpl();
};
// -------------------------------------------------------------------

class NormalizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NormalizeParameter) */ {
 public:
  NormalizeParameter();
  virtual ~NormalizeParameter();

  NormalizeParameter(const NormalizeParameter& from);

  inline NormalizeParameter& operator=(const NormalizeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NormalizeParameter(NormalizeParameter&& from) noexcept
    : NormalizeParameter() {
    *this = ::std::move(from);
  }

  inline NormalizeParameter& operator=(NormalizeParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizeParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizeParameter* internal_default_instance() {
    return reinterpret_cast<const NormalizeParameter*>(
               &_NormalizeParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(NormalizeParameter* other);
  friend void swap(NormalizeParameter& a, NormalizeParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NormalizeParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NormalizeParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NormalizeParameter& from);
  void MergeFrom(const NormalizeParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NormalizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string normalize_type = 1 [default = "L2"];
  bool has_normalize_type() const;
  void clear_normalize_type();
  static const int kNormalizeTypeFieldNumber = 1;
  const ::std::string& normalize_type() const;
  void set_normalize_type(const ::std::string& value);
  #if LANG_CXX11
  void set_normalize_type(::std::string&& value);
  #endif
  void set_normalize_type(const char* value);
  void set_normalize_type(const char* value, size_t size);
  ::std::string* mutable_normalize_type();
  ::std::string* release_normalize_type();
  void set_allocated_normalize_type(::std::string* normalize_type);

  // optional bool fix_gradient = 2 [default = false];
  bool has_fix_gradient() const;
  void clear_fix_gradient();
  static const int kFixGradientFieldNumber = 2;
  bool fix_gradient() const;
  void set_fix_gradient(bool value);

  // optional bool bp_norm = 3 [default = false];
  bool has_bp_norm() const;
  void clear_bp_norm();
  static const int kBpNormFieldNumber = 3;
  bool bp_norm() const;
  void set_bp_norm(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NormalizeParameter)
 private:
  void set_has_normalize_type();
  void clear_has_normalize_type();
  void set_has_fix_gradient();
  void clear_has_fix_gradient();
  void set_has_bp_norm();
  void clear_has_bp_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_normalize_type_;
  ::google::protobuf::internal::ArenaStringPtr normalize_type_;
  bool fix_gradient_;
  bool bp_norm_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsNormalizeParameterImpl();
};
// -------------------------------------------------------------------

class GeneralContrastiveParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GeneralContrastiveParameter) */ {
 public:
  GeneralContrastiveParameter();
  virtual ~GeneralContrastiveParameter();

  GeneralContrastiveParameter(const GeneralContrastiveParameter& from);

  inline GeneralContrastiveParameter& operator=(const GeneralContrastiveParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeneralContrastiveParameter(GeneralContrastiveParameter&& from) noexcept
    : GeneralContrastiveParameter() {
    *this = ::std::move(from);
  }

  inline GeneralContrastiveParameter& operator=(GeneralContrastiveParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralContrastiveParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralContrastiveParameter* internal_default_instance() {
    return reinterpret_cast<const GeneralContrastiveParameter*>(
               &_GeneralContrastiveParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(GeneralContrastiveParameter* other);
  friend void swap(GeneralContrastiveParameter& a, GeneralContrastiveParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralContrastiveParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  GeneralContrastiveParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeneralContrastiveParameter& from);
  void MergeFrom(const GeneralContrastiveParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeneralContrastiveParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float positive_margin = 1 [default = 0];
  bool has_positive_margin() const;
  void clear_positive_margin();
  static const int kPositiveMarginFieldNumber = 1;
  float positive_margin() const;
  void set_positive_margin(float value);

  // optional float normalize_negative = 5 [default = 0];
  bool has_normalize_negative() const;
  void clear_normalize_negative();
  static const int kNormalizeNegativeFieldNumber = 5;
  float normalize_negative() const;
  void set_normalize_negative(float value);

  // optional bool square = 7 [default = false];
  bool has_square() const;
  void clear_square();
  static const int kSquareFieldNumber = 7;
  bool square() const;
  void set_square(bool value);

  // optional bool max_negative_only = 8 [default = false];
  bool has_max_negative_only() const;
  void clear_max_negative_only();
  static const int kMaxNegativeOnlyFieldNumber = 8;
  bool max_negative_only() const;
  void set_max_negative_only(bool value);

  // optional bool max_positive_only = 9 [default = false];
  bool has_max_positive_only() const;
  void clear_max_positive_only();
  static const int kMaxPositiveOnlyFieldNumber = 9;
  bool max_positive_only() const;
  void set_max_positive_only(bool value);

  // optional bool positive_first = 10 [default = false];
  bool has_positive_first() const;
  void clear_positive_first();
  static const int kPositiveFirstFieldNumber = 10;
  bool positive_first() const;
  void set_positive_first(bool value);

  // optional bool exp_negative_weight = 12 [default = false];
  bool has_exp_negative_weight() const;
  void clear_exp_negative_weight();
  static const int kExpNegativeWeightFieldNumber = 12;
  bool exp_negative_weight() const;
  void set_exp_negative_weight(bool value);

  // optional bool add_intra_mae = 13 [default = false];
  bool has_add_intra_mae() const;
  void clear_add_intra_mae();
  static const int kAddIntraMaeFieldNumber = 13;
  bool add_intra_mae() const;
  void set_add_intra_mae(bool value);

  // optional float negative_margin = 2 [default = 1];
  bool has_negative_margin() const;
  void clear_negative_margin();
  static const int kNegativeMarginFieldNumber = 2;
  float negative_margin() const;
  void set_negative_margin(float value);

  // optional float positive_weight = 3 [default = 1];
  bool has_positive_weight() const;
  void clear_positive_weight();
  static const int kPositiveWeightFieldNumber = 3;
  float positive_weight() const;
  void set_positive_weight(float value);

  // optional float negative_weight = 4 [default = 1];
  bool has_negative_weight() const;
  void clear_negative_weight();
  static const int kNegativeWeightFieldNumber = 4;
  float negative_weight() const;
  void set_negative_weight(float value);

  // optional float positive_outlier_thresh = 6 [default = 4];
  bool has_positive_outlier_thresh() const;
  void clear_positive_outlier_thresh();
  static const int kPositiveOutlierThreshFieldNumber = 6;
  float positive_outlier_thresh() const;
  void set_positive_outlier_thresh(float value);

  // optional float positive_upper_bound = 11 [default = 1];
  bool has_positive_upper_bound() const;
  void clear_positive_upper_bound();
  static const int kPositiveUpperBoundFieldNumber = 11;
  float positive_upper_bound() const;
  void set_positive_upper_bound(float value);

  // optional float max_negative_margin = 14 [default = 1.2];
  bool has_max_negative_margin() const;
  void clear_max_negative_margin();
  static const int kMaxNegativeMarginFieldNumber = 14;
  float max_negative_margin() const;
  void set_max_negative_margin(float value);

  // @@protoc_insertion_point(class_scope:caffe.GeneralContrastiveParameter)
 private:
  void set_has_positive_margin();
  void clear_has_positive_margin();
  void set_has_negative_margin();
  void clear_has_negative_margin();
  void set_has_positive_weight();
  void clear_has_positive_weight();
  void set_has_negative_weight();
  void clear_has_negative_weight();
  void set_has_normalize_negative();
  void clear_has_normalize_negative();
  void set_has_positive_outlier_thresh();
  void clear_has_positive_outlier_thresh();
  void set_has_square();
  void clear_has_square();
  void set_has_max_negative_only();
  void clear_has_max_negative_only();
  void set_has_max_positive_only();
  void clear_has_max_positive_only();
  void set_has_positive_first();
  void clear_has_positive_first();
  void set_has_positive_upper_bound();
  void clear_has_positive_upper_bound();
  void set_has_exp_negative_weight();
  void clear_has_exp_negative_weight();
  void set_has_add_intra_mae();
  void clear_has_add_intra_mae();
  void set_has_max_negative_margin();
  void clear_has_max_negative_margin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float positive_margin_;
  float normalize_negative_;
  bool square_;
  bool max_negative_only_;
  bool max_positive_only_;
  bool positive_first_;
  bool exp_negative_weight_;
  bool add_intra_mae_;
  float negative_margin_;
  float positive_weight_;
  float negative_weight_;
  float positive_outlier_thresh_;
  float positive_upper_bound_;
  float max_negative_margin_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsGeneralContrastiveParameterImpl();
};
// -------------------------------------------------------------------

class BatchContrastiveParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchContrastiveParameter) */ {
 public:
  BatchContrastiveParameter();
  virtual ~BatchContrastiveParameter();

  BatchContrastiveParameter(const BatchContrastiveParameter& from);

  inline BatchContrastiveParameter& operator=(const BatchContrastiveParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchContrastiveParameter(BatchContrastiveParameter&& from) noexcept
    : BatchContrastiveParameter() {
    *this = ::std::move(from);
  }

  inline BatchContrastiveParameter& operator=(BatchContrastiveParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchContrastiveParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchContrastiveParameter* internal_default_instance() {
    return reinterpret_cast<const BatchContrastiveParameter*>(
               &_BatchContrastiveParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(BatchContrastiveParameter* other);
  friend void swap(BatchContrastiveParameter& a, BatchContrastiveParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchContrastiveParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchContrastiveParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchContrastiveParameter& from);
  void MergeFrom(const BatchContrastiveParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchContrastiveParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool max_only = 5 [default = false];
  bool has_max_only() const;
  void clear_max_only();
  static const int kMaxOnlyFieldNumber = 5;
  bool max_only() const;
  void set_max_only(bool value);

  // optional float positive_margin = 1 [default = 1];
  bool has_positive_margin() const;
  void clear_positive_margin();
  static const int kPositiveMarginFieldNumber = 1;
  float positive_margin() const;
  void set_positive_margin(float value);

  // optional float negative_margin = 2 [default = 1];
  bool has_negative_margin() const;
  void clear_negative_margin();
  static const int kNegativeMarginFieldNumber = 2;
  float negative_margin() const;
  void set_negative_margin(float value);

  // optional float positive_weight = 3 [default = 1];
  bool has_positive_weight() const;
  void clear_positive_weight();
  static const int kPositiveWeightFieldNumber = 3;
  float positive_weight() const;
  void set_positive_weight(float value);

  // optional float negative_weight = 4 [default = 1];
  bool has_negative_weight() const;
  void clear_negative_weight();
  static const int kNegativeWeightFieldNumber = 4;
  float negative_weight() const;
  void set_negative_weight(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchContrastiveParameter)
 private:
  void set_has_positive_margin();
  void clear_has_positive_margin();
  void set_has_negative_margin();
  void clear_has_negative_margin();
  void set_has_positive_weight();
  void clear_has_positive_weight();
  void set_has_negative_weight();
  void clear_has_negative_weight();
  void set_has_max_only();
  void clear_has_max_only();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool max_only_;
  float positive_margin_;
  float negative_margin_;
  float positive_weight_;
  float negative_weight_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsBatchContrastiveParameterImpl();
};
// -------------------------------------------------------------------

class SoftContrastiveParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftContrastiveParameter) */ {
 public:
  SoftContrastiveParameter();
  virtual ~SoftContrastiveParameter();

  SoftContrastiveParameter(const SoftContrastiveParameter& from);

  inline SoftContrastiveParameter& operator=(const SoftContrastiveParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftContrastiveParameter(SoftContrastiveParameter&& from) noexcept
    : SoftContrastiveParameter() {
    *this = ::std::move(from);
  }

  inline SoftContrastiveParameter& operator=(SoftContrastiveParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftContrastiveParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftContrastiveParameter* internal_default_instance() {
    return reinterpret_cast<const SoftContrastiveParameter*>(
               &_SoftContrastiveParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(SoftContrastiveParameter* other);
  friend void swap(SoftContrastiveParameter& a, SoftContrastiveParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftContrastiveParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftContrastiveParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftContrastiveParameter& from);
  void MergeFrom(const SoftContrastiveParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftContrastiveParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool square = 6 [default = false];
  bool has_square() const;
  void clear_square();
  static const int kSquareFieldNumber = 6;
  bool square() const;
  void set_square(bool value);

  // optional float exponent_scale = 5 [default = 1];
  bool has_exponent_scale() const;
  void clear_exponent_scale();
  static const int kExponentScaleFieldNumber = 5;
  float exponent_scale() const;
  void set_exponent_scale(float value);

  // optional float positive_margin = 1 [default = 1];
  bool has_positive_margin() const;
  void clear_positive_margin();
  static const int kPositiveMarginFieldNumber = 1;
  float positive_margin() const;
  void set_positive_margin(float value);

  // optional float negative_margin = 2 [default = 1];
  bool has_negative_margin() const;
  void clear_negative_margin();
  static const int kNegativeMarginFieldNumber = 2;
  float negative_margin() const;
  void set_negative_margin(float value);

  // optional float positive_weight = 3 [default = 1];
  bool has_positive_weight() const;
  void clear_positive_weight();
  static const int kPositiveWeightFieldNumber = 3;
  float positive_weight() const;
  void set_positive_weight(float value);

  // optional float negative_weight = 4 [default = 1];
  bool has_negative_weight() const;
  void clear_negative_weight();
  static const int kNegativeWeightFieldNumber = 4;
  float negative_weight() const;
  void set_negative_weight(float value);

  // @@protoc_insertion_point(class_scope:caffe.SoftContrastiveParameter)
 private:
  void set_has_positive_margin();
  void clear_has_positive_margin();
  void set_has_negative_margin();
  void clear_has_negative_margin();
  void set_has_positive_weight();
  void clear_has_positive_weight();
  void set_has_negative_weight();
  void clear_has_negative_weight();
  void set_has_exponent_scale();
  void clear_has_exponent_scale();
  void set_has_square();
  void clear_has_square();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool square_;
  float exponent_scale_;
  float positive_margin_;
  float negative_margin_;
  float positive_weight_;
  float negative_weight_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSoftContrastiveParameterImpl();
};
// -------------------------------------------------------------------

class GeneralTripletParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GeneralTripletParameter) */ {
 public:
  GeneralTripletParameter();
  virtual ~GeneralTripletParameter();

  GeneralTripletParameter(const GeneralTripletParameter& from);

  inline GeneralTripletParameter& operator=(const GeneralTripletParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeneralTripletParameter(GeneralTripletParameter&& from) noexcept
    : GeneralTripletParameter() {
    *this = ::std::move(from);
  }

  inline GeneralTripletParameter& operator=(GeneralTripletParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralTripletParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralTripletParameter* internal_default_instance() {
    return reinterpret_cast<const GeneralTripletParameter*>(
               &_GeneralTripletParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(GeneralTripletParameter* other);
  friend void swap(GeneralTripletParameter& a, GeneralTripletParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralTripletParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  GeneralTripletParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeneralTripletParameter& from);
  void MergeFrom(const GeneralTripletParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeneralTripletParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool hardest_only = 3 [default = false];
  bool has_hardest_only() const;
  void clear_hardest_only();
  static const int kHardestOnlyFieldNumber = 3;
  bool hardest_only() const;
  void set_hardest_only(bool value);

  // optional bool positive_first = 4 [default = false];
  bool has_positive_first() const;
  void clear_positive_first();
  static const int kPositiveFirstFieldNumber = 4;
  bool positive_first() const;
  void set_positive_first(bool value);

  // optional float negative_weight = 7 [default = 1];
  bool has_negative_weight() const;
  void clear_negative_weight();
  static const int kNegativeWeightFieldNumber = 7;
  float negative_weight() const;
  void set_negative_weight(float value);

  // optional float margin = 1 [default = 0.2];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 1;
  float margin() const;
  void set_margin(float value);

  // optional bool add_center_loss = 2 [default = true];
  bool has_add_center_loss() const;
  void clear_add_center_loss();
  static const int kAddCenterLossFieldNumber = 2;
  bool add_center_loss() const;
  void set_add_center_loss(bool value);

  // optional float positive_upper_bound = 5 [default = 1];
  bool has_positive_upper_bound() const;
  void clear_positive_upper_bound();
  static const int kPositiveUpperBoundFieldNumber = 5;
  float positive_upper_bound() const;
  void set_positive_upper_bound(float value);

  // optional float positive_weight = 6 [default = 1];
  bool has_positive_weight() const;
  void clear_positive_weight();
  static const int kPositiveWeightFieldNumber = 6;
  float positive_weight() const;
  void set_positive_weight(float value);

  // @@protoc_insertion_point(class_scope:caffe.GeneralTripletParameter)
 private:
  void set_has_margin();
  void clear_has_margin();
  void set_has_add_center_loss();
  void clear_has_add_center_loss();
  void set_has_hardest_only();
  void clear_has_hardest_only();
  void set_has_positive_first();
  void clear_has_positive_first();
  void set_has_positive_upper_bound();
  void clear_has_positive_upper_bound();
  void set_has_positive_weight();
  void clear_has_positive_weight();
  void set_has_negative_weight();
  void clear_has_negative_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool hardest_only_;
  bool positive_first_;
  float negative_weight_;
  float margin_;
  bool add_center_loss_;
  float positive_upper_bound_;
  float positive_weight_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsGeneralTripletParameterImpl();
};
// -------------------------------------------------------------------

class SoftTruncationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftTruncationParameter) */ {
 public:
  SoftTruncationParameter();
  virtual ~SoftTruncationParameter();

  SoftTruncationParameter(const SoftTruncationParameter& from);

  inline SoftTruncationParameter& operator=(const SoftTruncationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftTruncationParameter(SoftTruncationParameter&& from) noexcept
    : SoftTruncationParameter() {
    *this = ::std::move(from);
  }

  inline SoftTruncationParameter& operator=(SoftTruncationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftTruncationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftTruncationParameter* internal_default_instance() {
    return reinterpret_cast<const SoftTruncationParameter*>(
               &_SoftTruncationParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(SoftTruncationParameter* other);
  friend void swap(SoftTruncationParameter& a, SoftTruncationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftTruncationParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftTruncationParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftTruncationParameter& from);
  void MergeFrom(const SoftTruncationParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftTruncationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float c = 1 [default = 2];
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 1;
  float c() const;
  void set_c(float value);

  // @@protoc_insertion_point(class_scope:caffe.SoftTruncationParameter)
 private:
  void set_has_c();
  void clear_has_c();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float c_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSoftTruncationParameterImpl();
};
// -------------------------------------------------------------------

class TruncationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TruncationParameter) */ {
 public:
  TruncationParameter();
  virtual ~TruncationParameter();

  TruncationParameter(const TruncationParameter& from);

  inline TruncationParameter& operator=(const TruncationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TruncationParameter(TruncationParameter&& from) noexcept
    : TruncationParameter() {
    *this = ::std::move(from);
  }

  inline TruncationParameter& operator=(TruncationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TruncationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TruncationParameter* internal_default_instance() {
    return reinterpret_cast<const TruncationParameter*>(
               &_TruncationParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(TruncationParameter* other);
  friend void swap(TruncationParameter& a, TruncationParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TruncationParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  TruncationParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TruncationParameter& from);
  void MergeFrom(const TruncationParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TruncationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float lower_bound = 1 [default = 0];
  bool has_lower_bound() const;
  void clear_lower_bound();
  static const int kLowerBoundFieldNumber = 1;
  float lower_bound() const;
  void set_lower_bound(float value);

  // optional float upper_bound = 2 [default = 5];
  bool has_upper_bound() const;
  void clear_upper_bound();
  static const int kUpperBoundFieldNumber = 2;
  float upper_bound() const;
  void set_upper_bound(float value);

  // @@protoc_insertion_point(class_scope:caffe.TruncationParameter)
 private:
  void set_has_lower_bound();
  void clear_has_lower_bound();
  void set_has_upper_bound();
  void clear_has_upper_bound();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float lower_bound_;
  float upper_bound_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsTruncationParameterImpl();
};
// -------------------------------------------------------------------

class ProposalParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ProposalParameter) */ {
 public:
  ProposalParameter();
  virtual ~ProposalParameter();

  ProposalParameter(const ProposalParameter& from);

  inline ProposalParameter& operator=(const ProposalParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProposalParameter(ProposalParameter&& from) noexcept
    : ProposalParameter() {
    *this = ::std::move(from);
  }

  inline ProposalParameter& operator=(ProposalParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProposalParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposalParameter* internal_default_instance() {
    return reinterpret_cast<const ProposalParameter*>(
               &_ProposalParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(ProposalParameter* other);
  friend void swap(ProposalParameter& a, ProposalParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProposalParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ProposalParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProposalParameter& from);
  void MergeFrom(const ProposalParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProposalParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ratio = 4;
  int ratio_size() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 4;
  float ratio(int index) const;
  void set_ratio(int index, float value);
  void add_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ratio();

  // repeated float scale = 5;
  int scale_size() const;
  void clear_scale();
  static const int kScaleFieldNumber = 5;
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::google::protobuf::RepeatedField< float >&
      scale() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scale();

  // optional uint32 feat_stride = 1 [default = 16];
  bool has_feat_stride() const;
  void clear_feat_stride();
  static const int kFeatStrideFieldNumber = 1;
  ::google::protobuf::uint32 feat_stride() const;
  void set_feat_stride(::google::protobuf::uint32 value);

  // optional uint32 base_size = 2 [default = 16];
  bool has_base_size() const;
  void clear_base_size();
  static const int kBaseSizeFieldNumber = 2;
  ::google::protobuf::uint32 base_size() const;
  void set_base_size(::google::protobuf::uint32 value);

  // optional uint32 min_size = 3 [default = 16];
  bool has_min_size() const;
  void clear_min_size();
  static const int kMinSizeFieldNumber = 3;
  ::google::protobuf::uint32 min_size() const;
  void set_min_size(::google::protobuf::uint32 value);

  // optional uint32 pre_nms_topn = 6 [default = 6000];
  bool has_pre_nms_topn() const;
  void clear_pre_nms_topn();
  static const int kPreNmsTopnFieldNumber = 6;
  ::google::protobuf::uint32 pre_nms_topn() const;
  void set_pre_nms_topn(::google::protobuf::uint32 value);

  // optional uint32 post_nms_topn = 7 [default = 300];
  bool has_post_nms_topn() const;
  void clear_post_nms_topn();
  static const int kPostNmsTopnFieldNumber = 7;
  ::google::protobuf::uint32 post_nms_topn() const;
  void set_post_nms_topn(::google::protobuf::uint32 value);

  // optional float nms_thresh = 8 [default = 0.7];
  bool has_nms_thresh() const;
  void clear_nms_thresh();
  static const int kNmsThreshFieldNumber = 8;
  float nms_thresh() const;
  void set_nms_thresh(float value);

  // @@protoc_insertion_point(class_scope:caffe.ProposalParameter)
 private:
  void set_has_feat_stride();
  void clear_has_feat_stride();
  void set_has_base_size();
  void clear_has_base_size();
  void set_has_min_size();
  void clear_has_min_size();
  void set_has_pre_nms_topn();
  void clear_has_pre_nms_topn();
  void set_has_post_nms_topn();
  void clear_has_post_nms_topn();
  void set_has_nms_thresh();
  void clear_has_nms_thresh();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > ratio_;
  ::google::protobuf::RepeatedField< float > scale_;
  ::google::protobuf::uint32 feat_stride_;
  ::google::protobuf::uint32 base_size_;
  ::google::protobuf::uint32 min_size_;
  ::google::protobuf::uint32 pre_nms_topn_;
  ::google::protobuf::uint32 post_nms_topn_;
  float nms_thresh_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsProposalParameterImpl();
};
// -------------------------------------------------------------------

class PSROIPoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PSROIPoolingParameter) */ {
 public:
  PSROIPoolingParameter();
  virtual ~PSROIPoolingParameter();

  PSROIPoolingParameter(const PSROIPoolingParameter& from);

  inline PSROIPoolingParameter& operator=(const PSROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSROIPoolingParameter(PSROIPoolingParameter&& from) noexcept
    : PSROIPoolingParameter() {
    *this = ::std::move(from);
  }

  inline PSROIPoolingParameter& operator=(PSROIPoolingParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PSROIPoolingParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PSROIPoolingParameter*>(
               &_PSROIPoolingParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(PSROIPoolingParameter* other);
  friend void swap(PSROIPoolingParameter& a, PSROIPoolingParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSROIPoolingParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PSROIPoolingParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSROIPoolingParameter& from);
  void MergeFrom(const PSROIPoolingParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSROIPoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float spatial_scale = 1;
  bool has_spatial_scale() const;
  void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 1;
  float spatial_scale() const;
  void set_spatial_scale(float value);

  // required int32 output_dim = 2;
  bool has_output_dim() const;
  void clear_output_dim();
  static const int kOutputDimFieldNumber = 2;
  ::google::protobuf::int32 output_dim() const;
  void set_output_dim(::google::protobuf::int32 value);

  // required int32 group_size = 3;
  bool has_group_size() const;
  void clear_group_size();
  static const int kGroupSizeFieldNumber = 3;
  ::google::protobuf::int32 group_size() const;
  void set_group_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.PSROIPoolingParameter)
 private:
  void set_has_spatial_scale();
  void clear_has_spatial_scale();
  void set_has_output_dim();
  void clear_has_output_dim();
  void set_has_group_size();
  void clear_has_group_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float spatial_scale_;
  ::google::protobuf::int32 output_dim_;
  ::google::protobuf::int32 group_size_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPSROIPoolingParameterImpl();
};
// -------------------------------------------------------------------

class PairwiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PairwiseParameter) */ {
 public:
  PairwiseParameter();
  virtual ~PairwiseParameter();

  PairwiseParameter(const PairwiseParameter& from);

  inline PairwiseParameter& operator=(const PairwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PairwiseParameter(PairwiseParameter&& from) noexcept
    : PairwiseParameter() {
    *this = ::std::move(from);
  }

  inline PairwiseParameter& operator=(PairwiseParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PairwiseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairwiseParameter* internal_default_instance() {
    return reinterpret_cast<const PairwiseParameter*>(
               &_PairwiseParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(PairwiseParameter* other);
  friend void swap(PairwiseParameter& a, PairwiseParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PairwiseParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PairwiseParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PairwiseParameter& from);
  void MergeFrom(const PairwiseParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PairwiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PairwiseParameter_PairwiseOp PairwiseOp;
  static const PairwiseOp SUM =
    PairwiseParameter_PairwiseOp_SUM;
  static const PairwiseOp PROD =
    PairwiseParameter_PairwiseOp_PROD;
  static const PairwiseOp MAX =
    PairwiseParameter_PairwiseOp_MAX;
  static inline bool PairwiseOp_IsValid(int value) {
    return PairwiseParameter_PairwiseOp_IsValid(value);
  }
  static const PairwiseOp PairwiseOp_MIN =
    PairwiseParameter_PairwiseOp_PairwiseOp_MIN;
  static const PairwiseOp PairwiseOp_MAX =
    PairwiseParameter_PairwiseOp_PairwiseOp_MAX;
  static const int PairwiseOp_ARRAYSIZE =
    PairwiseParameter_PairwiseOp_PairwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PairwiseOp_descriptor() {
    return PairwiseParameter_PairwiseOp_descriptor();
  }
  static inline const ::std::string& PairwiseOp_Name(PairwiseOp value) {
    return PairwiseParameter_PairwiseOp_Name(value);
  }
  static inline bool PairwiseOp_Parse(const ::std::string& name,
      PairwiseOp* value) {
    return PairwiseParameter_PairwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float coeff = 2;
  int coeff_size() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional .caffe.PairwiseParameter.PairwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::PairwiseParameter_PairwiseOp operation() const;
  void set_operation(::caffe::PairwiseParameter_PairwiseOp value);

  // @@protoc_insertion_point(class_scope:caffe.PairwiseParameter)
 private:
  void set_has_operation();
  void clear_has_operation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPairwiseParameterImpl();
};
// -------------------------------------------------------------------

class SmoothL1Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SmoothL1Parameter) */ {
 public:
  SmoothL1Parameter();
  virtual ~SmoothL1Parameter();

  SmoothL1Parameter(const SmoothL1Parameter& from);

  inline SmoothL1Parameter& operator=(const SmoothL1Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmoothL1Parameter(SmoothL1Parameter&& from) noexcept
    : SmoothL1Parameter() {
    *this = ::std::move(from);
  }

  inline SmoothL1Parameter& operator=(SmoothL1Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothL1Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmoothL1Parameter* internal_default_instance() {
    return reinterpret_cast<const SmoothL1Parameter*>(
               &_SmoothL1Parameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(SmoothL1Parameter* other);
  friend void swap(SmoothL1Parameter& a, SmoothL1Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmoothL1Parameter* New() const PROTOBUF_FINAL { return New(NULL); }

  SmoothL1Parameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SmoothL1Parameter& from);
  void MergeFrom(const SmoothL1Parameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SmoothL1Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float turn_point = 1 [default = 1];
  bool has_turn_point() const;
  void clear_turn_point();
  static const int kTurnPointFieldNumber = 1;
  float turn_point() const;
  void set_turn_point(float value);

  // @@protoc_insertion_point(class_scope:caffe.SmoothL1Parameter)
 private:
  void set_has_turn_point();
  void clear_has_turn_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float turn_point_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsSmoothL1ParameterImpl();
};
// -------------------------------------------------------------------

class PermuteParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PermuteParameter) */ {
 public:
  PermuteParameter();
  virtual ~PermuteParameter();

  PermuteParameter(const PermuteParameter& from);

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PermuteParameter(PermuteParameter&& from) noexcept
    : PermuteParameter() {
    *this = ::std::move(from);
  }

  inline PermuteParameter& operator=(PermuteParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PermuteParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PermuteParameter* internal_default_instance() {
    return reinterpret_cast<const PermuteParameter*>(
               &_PermuteParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(PermuteParameter* other);
  friend void swap(PermuteParameter& a, PermuteParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PermuteParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  PermuteParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PermuteParameter& from);
  void MergeFrom(const PermuteParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PermuteParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 order = 1;
  int order_size() const;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  ::google::protobuf::uint32 order(int index) const;
  void set_order(int index, ::google::protobuf::uint32 value);
  void add_order(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:caffe.PermuteParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsPermuteParameterImpl();
};
// -------------------------------------------------------------------

class NCAParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NCAParameter) */ {
 public:
  NCAParameter();
  virtual ~NCAParameter();

  NCAParameter(const NCAParameter& from);

  inline NCAParameter& operator=(const NCAParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NCAParameter(NCAParameter&& from) noexcept
    : NCAParameter() {
    *this = ::std::move(from);
  }

  inline NCAParameter& operator=(NCAParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NCAParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NCAParameter* internal_default_instance() {
    return reinterpret_cast<const NCAParameter*>(
               &_NCAParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(NCAParameter* other);
  friend void swap(NCAParameter& a, NCAParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NCAParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  NCAParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NCAParameter& from);
  void MergeFrom(const NCAParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NCAParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool min_negative_only = 1 [default = false];
  bool has_min_negative_only() const;
  void clear_min_negative_only();
  static const int kMinNegativeOnlyFieldNumber = 1;
  bool min_negative_only() const;
  void set_min_negative_only(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NCAParameter)
 private:
  void set_has_min_negative_only();
  void clear_has_min_negative_only();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool min_negative_only_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsNCAParameterImpl();
};
// -------------------------------------------------------------------

class LargeMarginInnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LargeMarginInnerProductParameter) */ {
 public:
  LargeMarginInnerProductParameter();
  virtual ~LargeMarginInnerProductParameter();

  LargeMarginInnerProductParameter(const LargeMarginInnerProductParameter& from);

  inline LargeMarginInnerProductParameter& operator=(const LargeMarginInnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LargeMarginInnerProductParameter(LargeMarginInnerProductParameter&& from) noexcept
    : LargeMarginInnerProductParameter() {
    *this = ::std::move(from);
  }

  inline LargeMarginInnerProductParameter& operator=(LargeMarginInnerProductParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LargeMarginInnerProductParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LargeMarginInnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const LargeMarginInnerProductParameter*>(
               &_LargeMarginInnerProductParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(LargeMarginInnerProductParameter* other);
  friend void swap(LargeMarginInnerProductParameter& a, LargeMarginInnerProductParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LargeMarginInnerProductParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LargeMarginInnerProductParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LargeMarginInnerProductParameter& from);
  void MergeFrom(const LargeMarginInnerProductParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LargeMarginInnerProductParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LargeMarginInnerProductParameter_LargeMarginType LargeMarginType;
  static const LargeMarginType SINGLE =
    LargeMarginInnerProductParameter_LargeMarginType_SINGLE;
  static const LargeMarginType DOUBLE =
    LargeMarginInnerProductParameter_LargeMarginType_DOUBLE;
  static const LargeMarginType TRIPLE =
    LargeMarginInnerProductParameter_LargeMarginType_TRIPLE;
  static const LargeMarginType QUADRUPLE =
    LargeMarginInnerProductParameter_LargeMarginType_QUADRUPLE;
  static inline bool LargeMarginType_IsValid(int value) {
    return LargeMarginInnerProductParameter_LargeMarginType_IsValid(value);
  }
  static const LargeMarginType LargeMarginType_MIN =
    LargeMarginInnerProductParameter_LargeMarginType_LargeMarginType_MIN;
  static const LargeMarginType LargeMarginType_MAX =
    LargeMarginInnerProductParameter_LargeMarginType_LargeMarginType_MAX;
  static const int LargeMarginType_ARRAYSIZE =
    LargeMarginInnerProductParameter_LargeMarginType_LargeMarginType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LargeMarginType_descriptor() {
    return LargeMarginInnerProductParameter_LargeMarginType_descriptor();
  }
  static inline const ::std::string& LargeMarginType_Name(LargeMarginType value) {
    return LargeMarginInnerProductParameter_LargeMarginType_Name(value);
  }
  static inline bool LargeMarginType_Parse(const ::std::string& name,
      LargeMarginType* value) {
    return LargeMarginInnerProductParameter_LargeMarginType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional .caffe.LargeMarginInnerProductParameter.LargeMarginType type = 2 [default = SINGLE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::caffe::LargeMarginInnerProductParameter_LargeMarginType type() const;
  void set_type(::caffe::LargeMarginInnerProductParameter_LargeMarginType value);

  // optional float gamma = 6 [default = 0];
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 6;
  float gamma() const;
  void set_gamma(float value);

  // optional int32 iteration = 8 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  static const int kIterationFieldNumber = 8;
  ::google::protobuf::int32 iteration() const;
  void set_iteration(::google::protobuf::int32 value);

  // optional float lambda_min = 9 [default = 0];
  bool has_lambda_min() const;
  void clear_lambda_min();
  static const int kLambdaMinFieldNumber = 9;
  float lambda_min() const;
  void set_lambda_min(float value);

  // optional float power = 7 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 7;
  float power() const;
  void set_power(float value);

  // optional int32 axis = 4 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 4;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional float base = 5 [default = 1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 5;
  float base() const;
  void set_base(float value);

  // @@protoc_insertion_point(class_scope:caffe.LargeMarginInnerProductParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_type();
  void clear_has_type();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_axis();
  void clear_has_axis();
  void set_has_base();
  void clear_has_base();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_power();
  void clear_has_power();
  void set_has_iteration();
  void clear_has_iteration();
  void set_has_lambda_min();
  void clear_has_lambda_min();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  int type_;
  float gamma_;
  ::google::protobuf::int32 iteration_;
  float lambda_min_;
  float power_;
  ::google::protobuf::int32 axis_;
  float base_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLargeMarginInnerProductParameterImpl();
};
// -------------------------------------------------------------------

class LabelSpecificRescaleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelSpecificRescaleParameter) */ {
 public:
  LabelSpecificRescaleParameter();
  virtual ~LabelSpecificRescaleParameter();

  LabelSpecificRescaleParameter(const LabelSpecificRescaleParameter& from);

  inline LabelSpecificRescaleParameter& operator=(const LabelSpecificRescaleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelSpecificRescaleParameter(LabelSpecificRescaleParameter&& from) noexcept
    : LabelSpecificRescaleParameter() {
    *this = ::std::move(from);
  }

  inline LabelSpecificRescaleParameter& operator=(LabelSpecificRescaleParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSpecificRescaleParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSpecificRescaleParameter* internal_default_instance() {
    return reinterpret_cast<const LabelSpecificRescaleParameter*>(
               &_LabelSpecificRescaleParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(LabelSpecificRescaleParameter* other);
  friend void swap(LabelSpecificRescaleParameter& a, LabelSpecificRescaleParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelSpecificRescaleParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelSpecificRescaleParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelSpecificRescaleParameter& from);
  void MergeFrom(const LabelSpecificRescaleParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelSpecificRescaleParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float positive_lower_bound = 3 [default = 0];
  bool has_positive_lower_bound() const;
  void clear_positive_lower_bound();
  static const int kPositiveLowerBoundFieldNumber = 3;
  float positive_lower_bound() const;
  void set_positive_lower_bound(float value);

  // optional float negative_upper_bound = 4 [default = 0];
  bool has_negative_upper_bound() const;
  void clear_negative_upper_bound();
  static const int kNegativeUpperBoundFieldNumber = 4;
  float negative_upper_bound() const;
  void set_negative_upper_bound(float value);

  // optional float positive_weight_base = 7 [default = 0];
  bool has_positive_weight_base() const;
  void clear_positive_weight_base();
  static const int kPositiveWeightBaseFieldNumber = 7;
  float positive_weight_base() const;
  void set_positive_weight_base(float value);

  // optional float gamma = 8 [default = 0];
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 8;
  float gamma() const;
  void set_gamma(float value);

  // optional bool rescale_test = 5 [default = false];
  bool has_rescale_test() const;
  void clear_rescale_test();
  static const int kRescaleTestFieldNumber = 5;
  bool rescale_test() const;
  void set_rescale_test(bool value);

  // optional bool for_ip = 6 [default = false];
  bool has_for_ip() const;
  void clear_for_ip();
  static const int kForIpFieldNumber = 6;
  bool for_ip() const;
  void set_for_ip(bool value);

  // optional bool bias_fix = 13 [default = false];
  bool has_bias_fix() const;
  void clear_bias_fix();
  static const int kBiasFixFieldNumber = 13;
  bool bias_fix() const;
  void set_bias_fix(bool value);

  // optional bool power_on_positive = 14 [default = false];
  bool has_power_on_positive() const;
  void clear_power_on_positive();
  static const int kPowerOnPositiveFieldNumber = 14;
  bool power_on_positive() const;
  void set_power_on_positive(bool value);

  // optional float positive_weight_min = 10 [default = 0];
  bool has_positive_weight_min() const;
  void clear_positive_weight_min();
  static const int kPositiveWeightMinFieldNumber = 10;
  float positive_weight_min() const;
  void set_positive_weight_min(float value);

  // optional float positive_weight_max = 11 [default = 0];
  bool has_positive_weight_max() const;
  void clear_positive_weight_max();
  static const int kPositiveWeightMaxFieldNumber = 11;
  float positive_weight_max() const;
  void set_positive_weight_max(float value);

  // optional uint32 iteration = 12 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  static const int kIterationFieldNumber = 12;
  ::google::protobuf::uint32 iteration() const;
  void set_iteration(::google::protobuf::uint32 value);

  // optional float power = 9 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 9;
  float power() const;
  void set_power(float value);

  // optional float positive_weight = 1 [default = 1];
  bool has_positive_weight() const;
  void clear_positive_weight();
  static const int kPositiveWeightFieldNumber = 1;
  float positive_weight() const;
  void set_positive_weight(float value);

  // optional float negative_weight = 2 [default = 1];
  bool has_negative_weight() const;
  void clear_negative_weight();
  static const int kNegativeWeightFieldNumber = 2;
  float negative_weight() const;
  void set_negative_weight(float value);

  // @@protoc_insertion_point(class_scope:caffe.LabelSpecificRescaleParameter)
 private:
  void set_has_positive_weight();
  void clear_has_positive_weight();
  void set_has_negative_weight();
  void clear_has_negative_weight();
  void set_has_positive_lower_bound();
  void clear_has_positive_lower_bound();
  void set_has_negative_upper_bound();
  void clear_has_negative_upper_bound();
  void set_has_rescale_test();
  void clear_has_rescale_test();
  void set_has_for_ip();
  void clear_has_for_ip();
  void set_has_positive_weight_base();
  void clear_has_positive_weight_base();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_power();
  void clear_has_power();
  void set_has_positive_weight_min();
  void clear_has_positive_weight_min();
  void set_has_positive_weight_max();
  void clear_has_positive_weight_max();
  void set_has_iteration();
  void clear_has_iteration();
  void set_has_bias_fix();
  void clear_has_bias_fix();
  void set_has_power_on_positive();
  void clear_has_power_on_positive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float positive_lower_bound_;
  float negative_upper_bound_;
  float positive_weight_base_;
  float gamma_;
  bool rescale_test_;
  bool for_ip_;
  bool bias_fix_;
  bool power_on_positive_;
  float positive_weight_min_;
  float positive_weight_max_;
  ::google::protobuf::uint32 iteration_;
  float power_;
  float positive_weight_;
  float negative_weight_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLabelSpecificRescaleParameterImpl();
};
// -------------------------------------------------------------------

class InfimumLossParamter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InfimumLossParamter) */ {
 public:
  InfimumLossParamter();
  virtual ~InfimumLossParamter();

  InfimumLossParamter(const InfimumLossParamter& from);

  inline InfimumLossParamter& operator=(const InfimumLossParamter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfimumLossParamter(InfimumLossParamter&& from) noexcept
    : InfimumLossParamter() {
    *this = ::std::move(from);
  }

  inline InfimumLossParamter& operator=(InfimumLossParamter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfimumLossParamter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfimumLossParamter* internal_default_instance() {
    return reinterpret_cast<const InfimumLossParamter*>(
               &_InfimumLossParamter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(InfimumLossParamter* other);
  friend void swap(InfimumLossParamter& a, InfimumLossParamter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfimumLossParamter* New() const PROTOBUF_FINAL { return New(NULL); }

  InfimumLossParamter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InfimumLossParamter& from);
  void MergeFrom(const InfimumLossParamter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InfimumLossParamter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float infimum = 1 [default = 0.25];
  bool has_infimum() const;
  void clear_infimum();
  static const int kInfimumFieldNumber = 1;
  float infimum() const;
  void set_infimum(float value);

  // @@protoc_insertion_point(class_scope:caffe.InfimumLossParamter)
 private:
  void set_has_infimum();
  void clear_has_infimum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float infimum_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsInfimumLossParamterImpl();
};
// -------------------------------------------------------------------

class OrdinalRegressionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.OrdinalRegressionParameter) */ {
 public:
  OrdinalRegressionParameter();
  virtual ~OrdinalRegressionParameter();

  OrdinalRegressionParameter(const OrdinalRegressionParameter& from);

  inline OrdinalRegressionParameter& operator=(const OrdinalRegressionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrdinalRegressionParameter(OrdinalRegressionParameter&& from) noexcept
    : OrdinalRegressionParameter() {
    *this = ::std::move(from);
  }

  inline OrdinalRegressionParameter& operator=(OrdinalRegressionParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrdinalRegressionParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrdinalRegressionParameter* internal_default_instance() {
    return reinterpret_cast<const OrdinalRegressionParameter*>(
               &_OrdinalRegressionParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(OrdinalRegressionParameter* other);
  friend void swap(OrdinalRegressionParameter& a, OrdinalRegressionParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrdinalRegressionParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  OrdinalRegressionParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrdinalRegressionParameter& from);
  void MergeFrom(const OrdinalRegressionParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrdinalRegressionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string weight_file = 2;
  bool has_weight_file() const;
  void clear_weight_file();
  static const int kWeightFileFieldNumber = 2;
  const ::std::string& weight_file() const;
  void set_weight_file(const ::std::string& value);
  #if LANG_CXX11
  void set_weight_file(::std::string&& value);
  #endif
  void set_weight_file(const char* value);
  void set_weight_file(const char* value, size_t size);
  ::std::string* mutable_weight_file();
  ::std::string* release_weight_file();
  void set_allocated_weight_file(::std::string* weight_file);

  // optional uint32 k = 1;
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 1;
  ::google::protobuf::uint32 k() const;
  void set_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.OrdinalRegressionParameter)
 private:
  void set_has_k();
  void clear_has_k();
  void set_has_weight_file();
  void clear_has_weight_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr weight_file_;
  ::google::protobuf::uint32 k_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsOrdinalRegressionParameterImpl();
};
// -------------------------------------------------------------------

class ResizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ResizeParameter) */ {
 public:
  ResizeParameter();
  virtual ~ResizeParameter();

  ResizeParameter(const ResizeParameter& from);

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResizeParameter(ResizeParameter&& from) noexcept
    : ResizeParameter() {
    *this = ::std::move(from);
  }

  inline ResizeParameter& operator=(ResizeParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizeParameter* internal_default_instance() {
    return reinterpret_cast<const ResizeParameter*>(
               &_ResizeParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(ResizeParameter* other);
  friend void swap(ResizeParameter& a, ResizeParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResizeParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ResizeParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResizeParameter& from);
  void MergeFrom(const ResizeParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 height = 1;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional bool is_pyramid_test = 3 [default = false];
  bool has_is_pyramid_test() const;
  void clear_is_pyramid_test();
  static const int kIsPyramidTestFieldNumber = 3;
  bool is_pyramid_test() const;
  void set_is_pyramid_test(bool value);

  // optional float out_height_scale = 4;
  bool has_out_height_scale() const;
  void clear_out_height_scale();
  static const int kOutHeightScaleFieldNumber = 4;
  float out_height_scale() const;
  void set_out_height_scale(float value);

  // optional float out_width_scale = 5;
  bool has_out_width_scale() const;
  void clear_out_width_scale();
  static const int kOutWidthScaleFieldNumber = 5;
  float out_width_scale() const;
  void set_out_width_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ResizeParameter)
 private:
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_is_pyramid_test();
  void clear_has_is_pyramid_test();
  void set_has_out_height_scale();
  void clear_has_out_height_scale();
  void set_has_out_width_scale();
  void clear_has_out_width_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  bool is_pyramid_test_;
  float out_height_scale_;
  float out_width_scale_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsResizeParameterImpl();
};
// -------------------------------------------------------------------

class MarginInnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MarginInnerProductParameter) */ {
 public:
  MarginInnerProductParameter();
  virtual ~MarginInnerProductParameter();

  MarginInnerProductParameter(const MarginInnerProductParameter& from);

  inline MarginInnerProductParameter& operator=(const MarginInnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarginInnerProductParameter(MarginInnerProductParameter&& from) noexcept
    : MarginInnerProductParameter() {
    *this = ::std::move(from);
  }

  inline MarginInnerProductParameter& operator=(MarginInnerProductParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarginInnerProductParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarginInnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const MarginInnerProductParameter*>(
               &_MarginInnerProductParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(MarginInnerProductParameter* other);
  friend void swap(MarginInnerProductParameter& a, MarginInnerProductParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarginInnerProductParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  MarginInnerProductParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarginInnerProductParameter& from);
  void MergeFrom(const MarginInnerProductParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarginInnerProductParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MarginInnerProductParameter_MarginType MarginType;
  static const MarginType SINGLE =
    MarginInnerProductParameter_MarginType_SINGLE;
  static const MarginType DOUBLE =
    MarginInnerProductParameter_MarginType_DOUBLE;
  static const MarginType TRIPLE =
    MarginInnerProductParameter_MarginType_TRIPLE;
  static const MarginType QUADRUPLE =
    MarginInnerProductParameter_MarginType_QUADRUPLE;
  static inline bool MarginType_IsValid(int value) {
    return MarginInnerProductParameter_MarginType_IsValid(value);
  }
  static const MarginType MarginType_MIN =
    MarginInnerProductParameter_MarginType_MarginType_MIN;
  static const MarginType MarginType_MAX =
    MarginInnerProductParameter_MarginType_MarginType_MAX;
  static const int MarginType_ARRAYSIZE =
    MarginInnerProductParameter_MarginType_MarginType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MarginType_descriptor() {
    return MarginInnerProductParameter_MarginType_descriptor();
  }
  static inline const ::std::string& MarginType_Name(MarginType value) {
    return MarginInnerProductParameter_MarginType_Name(value);
  }
  static inline bool MarginType_Parse(const ::std::string& name,
      MarginType* value) {
    return MarginInnerProductParameter_MarginType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* release_weight_filler();
  ::caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional .caffe.MarginInnerProductParameter.MarginType type = 2 [default = SINGLE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::caffe::MarginInnerProductParameter_MarginType type() const;
  void set_type(::caffe::MarginInnerProductParameter_MarginType value);

  // optional float gamma = 6 [default = 0];
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 6;
  float gamma() const;
  void set_gamma(float value);

  // optional int32 iteration = 8 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  static const int kIterationFieldNumber = 8;
  ::google::protobuf::int32 iteration() const;
  void set_iteration(::google::protobuf::int32 value);

  // optional float lambda_min = 9 [default = 0];
  bool has_lambda_min() const;
  void clear_lambda_min();
  static const int kLambdaMinFieldNumber = 9;
  float lambda_min() const;
  void set_lambda_min(float value);

  // optional float power = 7 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 7;
  float power() const;
  void set_power(float value);

  // optional int32 axis = 4 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 4;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional float base = 5 [default = 1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 5;
  float base() const;
  void set_base(float value);

  // @@protoc_insertion_point(class_scope:caffe.MarginInnerProductParameter)
 private:
  void set_has_num_output();
  void clear_has_num_output();
  void set_has_type();
  void clear_has_type();
  void set_has_weight_filler();
  void clear_has_weight_filler();
  void set_has_axis();
  void clear_has_axis();
  void set_has_base();
  void clear_has_base();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_power();
  void clear_has_power();
  void set_has_iteration();
  void clear_has_iteration();
  void set_has_lambda_min();
  void clear_has_lambda_min();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  int type_;
  float gamma_;
  ::google::protobuf::int32 iteration_;
  float lambda_min_;
  float power_;
  ::google::protobuf::int32 axis_;
  float base_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsMarginInnerProductParameterImpl();
};
// -------------------------------------------------------------------

class FeatureDecayLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FeatureDecayLossParameter) */ {
 public:
  FeatureDecayLossParameter();
  virtual ~FeatureDecayLossParameter();

  FeatureDecayLossParameter(const FeatureDecayLossParameter& from);

  inline FeatureDecayLossParameter& operator=(const FeatureDecayLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FeatureDecayLossParameter(FeatureDecayLossParameter&& from) noexcept
    : FeatureDecayLossParameter() {
    *this = ::std::move(from);
  }

  inline FeatureDecayLossParameter& operator=(FeatureDecayLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureDecayLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureDecayLossParameter* internal_default_instance() {
    return reinterpret_cast<const FeatureDecayLossParameter*>(
               &_FeatureDecayLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(FeatureDecayLossParameter* other);
  friend void swap(FeatureDecayLossParameter& a, FeatureDecayLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureDecayLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureDecayLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureDecayLossParameter& from);
  void MergeFrom(const FeatureDecayLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureDecayLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool force_decay = 2 [default = false];
  bool has_force_decay() const;
  void clear_force_decay();
  static const int kForceDecayFieldNumber = 2;
  bool force_decay() const;
  void set_force_decay(bool value);

  // optional float decay_threshold = 1 [default = 20];
  bool has_decay_threshold() const;
  void clear_decay_threshold();
  static const int kDecayThresholdFieldNumber = 1;
  float decay_threshold() const;
  void set_decay_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.FeatureDecayLossParameter)
 private:
  void set_has_decay_threshold();
  void clear_has_decay_threshold();
  void set_has_force_decay();
  void clear_has_force_decay();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool force_decay_;
  float decay_threshold_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsFeatureDecayLossParameterImpl();
};
// -------------------------------------------------------------------

class ConfidencePenaltyLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConfidencePenaltyLossParameter) */ {
 public:
  ConfidencePenaltyLossParameter();
  virtual ~ConfidencePenaltyLossParameter();

  ConfidencePenaltyLossParameter(const ConfidencePenaltyLossParameter& from);

  inline ConfidencePenaltyLossParameter& operator=(const ConfidencePenaltyLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfidencePenaltyLossParameter(ConfidencePenaltyLossParameter&& from) noexcept
    : ConfidencePenaltyLossParameter() {
    *this = ::std::move(from);
  }

  inline ConfidencePenaltyLossParameter& operator=(ConfidencePenaltyLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfidencePenaltyLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfidencePenaltyLossParameter* internal_default_instance() {
    return reinterpret_cast<const ConfidencePenaltyLossParameter*>(
               &_ConfidencePenaltyLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(ConfidencePenaltyLossParameter* other);
  friend void swap(ConfidencePenaltyLossParameter& a, ConfidencePenaltyLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfidencePenaltyLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfidencePenaltyLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfidencePenaltyLossParameter& from);
  void MergeFrom(const ConfidencePenaltyLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfidencePenaltyLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float beta = 1 [default = 0.1];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 1;
  float beta() const;
  void set_beta(float value);

  // @@protoc_insertion_point(class_scope:caffe.ConfidencePenaltyLossParameter)
 private:
  void set_has_beta();
  void clear_has_beta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float beta_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsConfidencePenaltyLossParameterImpl();
};
// -------------------------------------------------------------------

class FocalLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FocalLossParameter) */ {
 public:
  FocalLossParameter();
  virtual ~FocalLossParameter();

  FocalLossParameter(const FocalLossParameter& from);

  inline FocalLossParameter& operator=(const FocalLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FocalLossParameter(FocalLossParameter&& from) noexcept
    : FocalLossParameter() {
    *this = ::std::move(from);
  }

  inline FocalLossParameter& operator=(FocalLossParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FocalLossParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FocalLossParameter* internal_default_instance() {
    return reinterpret_cast<const FocalLossParameter*>(
               &_FocalLossParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(FocalLossParameter* other);
  friend void swap(FocalLossParameter& a, FocalLossParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FocalLossParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  FocalLossParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FocalLossParameter& from);
  void MergeFrom(const FocalLossParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FocalLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FocalLossParameter_Type Type;
  static const Type ORIGIN =
    FocalLossParameter_Type_ORIGIN;
  static const Type LINEAR =
    FocalLossParameter_Type_LINEAR;
  static const Type ONEADDP =
    FocalLossParameter_Type_ONEADDP;
  static inline bool Type_IsValid(int value) {
    return FocalLossParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    FocalLossParameter_Type_Type_MIN;
  static const Type Type_MAX =
    FocalLossParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    FocalLossParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return FocalLossParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return FocalLossParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return FocalLossParameter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.FocalLossParameter.Type type = 1 [default = ORIGIN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::caffe::FocalLossParameter_Type type() const;
  void set_type(::caffe::FocalLossParameter_Type value);

  // optional float beta = 4 [default = 1];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 4;
  float beta() const;
  void set_beta(float value);

  // optional float gamma = 2 [default = 2];
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 2;
  float gamma() const;
  void set_gamma(float value);

  // optional float alpha = 3 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 3;
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.FocalLossParameter)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_alpha();
  void clear_has_alpha();
  void set_has_beta();
  void clear_has_beta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int type_;
  float beta_;
  float gamma_;
  float alpha_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsFocalLossParameterImpl();
};
// -------------------------------------------------------------------

class LabelSpecificMarginParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelSpecificMarginParameter) */ {
 public:
  LabelSpecificMarginParameter();
  virtual ~LabelSpecificMarginParameter();

  LabelSpecificMarginParameter(const LabelSpecificMarginParameter& from);

  inline LabelSpecificMarginParameter& operator=(const LabelSpecificMarginParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelSpecificMarginParameter(LabelSpecificMarginParameter&& from) noexcept
    : LabelSpecificMarginParameter() {
    *this = ::std::move(from);
  }

  inline LabelSpecificMarginParameter& operator=(LabelSpecificMarginParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSpecificMarginParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSpecificMarginParameter* internal_default_instance() {
    return reinterpret_cast<const LabelSpecificMarginParameter*>(
               &_LabelSpecificMarginParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(LabelSpecificMarginParameter* other);
  friend void swap(LabelSpecificMarginParameter& a, LabelSpecificMarginParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelSpecificMarginParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelSpecificMarginParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelSpecificMarginParameter& from);
  void MergeFrom(const LabelSpecificMarginParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelSpecificMarginParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LabelSpecificMarginParameter_MarginType MarginType;
  static const MarginType HARD =
    LabelSpecificMarginParameter_MarginType_HARD;
  static const MarginType SOFT =
    LabelSpecificMarginParameter_MarginType_SOFT;
  static inline bool MarginType_IsValid(int value) {
    return LabelSpecificMarginParameter_MarginType_IsValid(value);
  }
  static const MarginType MarginType_MIN =
    LabelSpecificMarginParameter_MarginType_MarginType_MIN;
  static const MarginType MarginType_MAX =
    LabelSpecificMarginParameter_MarginType_MarginType_MAX;
  static const int MarginType_ARRAYSIZE =
    LabelSpecificMarginParameter_MarginType_MarginType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MarginType_descriptor() {
    return LabelSpecificMarginParameter_MarginType_descriptor();
  }
  static inline const ::std::string& MarginType_Name(MarginType value) {
    return LabelSpecificMarginParameter_MarginType_Name(value);
  }
  static inline bool MarginType_Parse(const ::std::string& name,
      MarginType* value) {
    return LabelSpecificMarginParameter_MarginType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float margin_base = 1 [default = 0];
  bool has_margin_base() const;
  void clear_margin_base();
  static const int kMarginBaseFieldNumber = 1;
  float margin_base() const;
  void set_margin_base(float value);

  // optional int32 iteration = 5 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  static const int kIterationFieldNumber = 5;
  ::google::protobuf::int32 iteration() const;
  void set_iteration(::google::protobuf::int32 value);

  // optional bool reset_margin = 6 [default = false];
  bool has_reset_margin() const;
  void clear_reset_margin();
  static const int kResetMarginFieldNumber = 6;
  bool reset_margin() const;
  void set_reset_margin(bool value);

  // optional bool margin_on_test = 7 [default = false];
  bool has_margin_on_test() const;
  void clear_margin_on_test();
  static const int kMarginOnTestFieldNumber = 7;
  bool margin_on_test() const;
  void set_margin_on_test(bool value);

  // optional bool auto_tune = 8 [default = false];
  bool has_auto_tune() const;
  void clear_auto_tune();
  static const int kAutoTuneFieldNumber = 8;
  bool auto_tune() const;
  void set_auto_tune(bool value);

  // optional .caffe.LabelSpecificMarginParameter.MarginType type = 9 [default = HARD];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::caffe::LabelSpecificMarginParameter_MarginType type() const;
  void set_type(::caffe::LabelSpecificMarginParameter_MarginType value);

  // optional float gamma = 4 [default = 1];
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 4;
  float gamma() const;
  void set_gamma(float value);

  // optional float margin_max = 2 [default = 10];
  bool has_margin_max() const;
  void clear_margin_max();
  static const int kMarginMaxFieldNumber = 2;
  float margin_max() const;
  void set_margin_max(float value);

  // optional float power = 3 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 3;
  float power() const;
  void set_power(float value);

  // @@protoc_insertion_point(class_scope:caffe.LabelSpecificMarginParameter)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_margin_base();
  void clear_has_margin_base();
  void set_has_margin_max();
  void clear_has_margin_max();
  void set_has_power();
  void clear_has_power();
  void set_has_gamma();
  void clear_has_gamma();
  void set_has_iteration();
  void clear_has_iteration();
  void set_has_reset_margin();
  void clear_has_reset_margin();
  void set_has_margin_on_test();
  void clear_has_margin_on_test();
  void set_has_auto_tune();
  void clear_has_auto_tune();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float margin_base_;
  ::google::protobuf::int32 iteration_;
  bool reset_margin_;
  bool margin_on_test_;
  bool auto_tune_;
  int type_;
  float gamma_;
  float margin_max_;
  float power_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLabelSpecificMarginParameterImpl();
};
// -------------------------------------------------------------------

class ChannelScaleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ChannelScaleParameter) */ {
 public:
  ChannelScaleParameter();
  virtual ~ChannelScaleParameter();

  ChannelScaleParameter(const ChannelScaleParameter& from);

  inline ChannelScaleParameter& operator=(const ChannelScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelScaleParameter(ChannelScaleParameter&& from) noexcept
    : ChannelScaleParameter() {
    *this = ::std::move(from);
  }

  inline ChannelScaleParameter& operator=(ChannelScaleParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelScaleParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelScaleParameter* internal_default_instance() {
    return reinterpret_cast<const ChannelScaleParameter*>(
               &_ChannelScaleParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void Swap(ChannelScaleParameter* other);
  friend void swap(ChannelScaleParameter& a, ChannelScaleParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelScaleParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelScaleParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelScaleParameter& from);
  void MergeFrom(const ChannelScaleParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelScaleParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool global_scale = 4 [default = false];
  bool has_global_scale() const;
  void clear_global_scale();
  static const int kGlobalScaleFieldNumber = 4;
  bool global_scale() const;
  void set_global_scale(bool value);

  // optional float min_global_scale = 6 [default = 0];
  bool has_min_global_scale() const;
  void clear_min_global_scale();
  static const int kMinGlobalScaleFieldNumber = 6;
  float min_global_scale() const;
  void set_min_global_scale(float value);

  // optional float init_global_scale = 7 [default = 1];
  bool has_init_global_scale() const;
  void clear_init_global_scale();
  static const int kInitGlobalScaleFieldNumber = 7;
  float init_global_scale() const;
  void set_init_global_scale(float value);

  // optional bool do_forward = 1 [default = true];
  bool has_do_forward() const;
  void clear_do_forward();
  static const int kDoForwardFieldNumber = 1;
  bool do_forward() const;
  void set_do_forward(bool value);

  // optional bool do_backward_feature = 2 [default = true];
  bool has_do_backward_feature() const;
  void clear_do_backward_feature();
  static const int kDoBackwardFeatureFieldNumber = 2;
  bool do_backward_feature() const;
  void set_do_backward_feature(bool value);

  // optional bool do_backward_scale = 3 [default = true];
  bool has_do_backward_scale() const;
  void clear_do_backward_scale();
  static const int kDoBackwardScaleFieldNumber = 3;
  bool do_backward_scale() const;
  void set_do_backward_scale(bool value);

  // optional float max_global_scale = 5 [default = 1000];
  bool has_max_global_scale() const;
  void clear_max_global_scale();
  static const int kMaxGlobalScaleFieldNumber = 5;
  float max_global_scale() const;
  void set_max_global_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ChannelScaleParameter)
 private:
  void set_has_do_forward();
  void clear_has_do_forward();
  void set_has_do_backward_feature();
  void clear_has_do_backward_feature();
  void set_has_do_backward_scale();
  void clear_has_do_backward_scale();
  void set_has_global_scale();
  void clear_has_global_scale();
  void set_has_max_global_scale();
  void clear_has_max_global_scale();
  void set_has_min_global_scale();
  void clear_has_min_global_scale();
  void set_has_init_global_scale();
  void clear_has_init_global_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool global_scale_;
  float min_global_scale_;
  float init_global_scale_;
  bool do_forward_;
  bool do_backward_feature_;
  bool do_backward_scale_;
  float max_global_scale_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsChannelScaleParameterImpl();
};
// -------------------------------------------------------------------

class LabelSpecificAffineParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelSpecificAffineParameter) */ {
 public:
  LabelSpecificAffineParameter();
  virtual ~LabelSpecificAffineParameter();

  LabelSpecificAffineParameter(const LabelSpecificAffineParameter& from);

  inline LabelSpecificAffineParameter& operator=(const LabelSpecificAffineParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelSpecificAffineParameter(LabelSpecificAffineParameter&& from) noexcept
    : LabelSpecificAffineParameter() {
    *this = ::std::move(from);
  }

  inline LabelSpecificAffineParameter& operator=(LabelSpecificAffineParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSpecificAffineParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSpecificAffineParameter* internal_default_instance() {
    return reinterpret_cast<const LabelSpecificAffineParameter*>(
               &_LabelSpecificAffineParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(LabelSpecificAffineParameter* other);
  friend void swap(LabelSpecificAffineParameter& a, LabelSpecificAffineParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelSpecificAffineParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelSpecificAffineParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelSpecificAffineParameter& from);
  void MergeFrom(const LabelSpecificAffineParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelSpecificAffineParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale_gamma = 2 [default = 0];
  bool has_scale_gamma() const;
  void clear_scale_gamma();
  static const int kScaleGammaFieldNumber = 2;
  float scale_gamma() const;
  void set_scale_gamma(float value);

  // optional uint32 iteration = 6 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  static const int kIterationFieldNumber = 6;
  ::google::protobuf::uint32 iteration() const;
  void set_iteration(::google::protobuf::uint32 value);

  // optional float bias_base = 7 [default = 0];
  bool has_bias_base() const;
  void clear_bias_base();
  static const int kBiasBaseFieldNumber = 7;
  float bias_base() const;
  void set_bias_base(float value);

  // optional float bias_gamma = 8 [default = 0];
  bool has_bias_gamma() const;
  void clear_bias_gamma();
  static const int kBiasGammaFieldNumber = 8;
  float bias_gamma() const;
  void set_bias_gamma(float value);

  // optional float bias_max = 10 [default = 0];
  bool has_bias_max() const;
  void clear_bias_max();
  static const int kBiasMaxFieldNumber = 10;
  float bias_max() const;
  void set_bias_max(float value);

  // optional float power_gamma = 12 [default = 0];
  bool has_power_gamma() const;
  void clear_power_gamma();
  static const int kPowerGammaFieldNumber = 12;
  float power_gamma() const;
  void set_power_gamma(float value);

  // optional bool transform_test = 5 [default = false];
  bool has_transform_test() const;
  void clear_transform_test();
  static const int kTransformTestFieldNumber = 5;
  bool transform_test() const;
  void set_transform_test(bool value);

  // optional bool auto_tune = 15 [default = false];
  bool has_auto_tune() const;
  void clear_auto_tune();
  static const int kAutoTuneFieldNumber = 15;
  bool auto_tune() const;
  void set_auto_tune(bool value);

  // optional bool reset = 16 [default = false];
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 16;
  bool reset() const;
  void set_reset(bool value);

  // optional float power_min = 14 [default = 0.5];
  bool has_power_min() const;
  void clear_power_min();
  static const int kPowerMinFieldNumber = 14;
  float power_min() const;
  void set_power_min(float value);

  // optional float scale_base = 1 [default = 1];
  bool has_scale_base() const;
  void clear_scale_base();
  static const int kScaleBaseFieldNumber = 1;
  float scale_base() const;
  void set_scale_base(float value);

  // optional float scale_power = 3 [default = 1];
  bool has_scale_power() const;
  void clear_scale_power();
  static const int kScalePowerFieldNumber = 3;
  float scale_power() const;
  void set_scale_power(float value);

  // optional float scale_max = 4 [default = 1];
  bool has_scale_max() const;
  void clear_scale_max();
  static const int kScaleMaxFieldNumber = 4;
  float scale_max() const;
  void set_scale_max(float value);

  // optional float bias_power = 9 [default = 1];
  bool has_bias_power() const;
  void clear_bias_power();
  static const int kBiasPowerFieldNumber = 9;
  float bias_power() const;
  void set_bias_power(float value);

  // optional float power_base = 11 [default = 1];
  bool has_power_base() const;
  void clear_power_base();
  static const int kPowerBaseFieldNumber = 11;
  float power_base() const;
  void set_power_base(float value);

  // optional float power_power = 13 [default = -1];
  bool has_power_power() const;
  void clear_power_power();
  static const int kPowerPowerFieldNumber = 13;
  float power_power() const;
  void set_power_power(float value);

  // @@protoc_insertion_point(class_scope:caffe.LabelSpecificAffineParameter)
 private:
  void set_has_scale_base();
  void clear_has_scale_base();
  void set_has_scale_gamma();
  void clear_has_scale_gamma();
  void set_has_scale_power();
  void clear_has_scale_power();
  void set_has_scale_max();
  void clear_has_scale_max();
  void set_has_transform_test();
  void clear_has_transform_test();
  void set_has_iteration();
  void clear_has_iteration();
  void set_has_bias_base();
  void clear_has_bias_base();
  void set_has_bias_gamma();
  void clear_has_bias_gamma();
  void set_has_bias_power();
  void clear_has_bias_power();
  void set_has_bias_max();
  void clear_has_bias_max();
  void set_has_power_base();
  void clear_has_power_base();
  void set_has_power_gamma();
  void clear_has_power_gamma();
  void set_has_power_power();
  void clear_has_power_power();
  void set_has_power_min();
  void clear_has_power_min();
  void set_has_auto_tune();
  void clear_has_auto_tune();
  void set_has_reset();
  void clear_has_reset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float scale_gamma_;
  ::google::protobuf::uint32 iteration_;
  float bias_base_;
  float bias_gamma_;
  float bias_max_;
  float power_gamma_;
  bool transform_test_;
  bool auto_tune_;
  bool reset_;
  float power_min_;
  float scale_base_;
  float scale_power_;
  float scale_max_;
  float bias_power_;
  float power_base_;
  float power_power_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLabelSpecificAffineParameterImpl();
};
// -------------------------------------------------------------------

class LabelSpecificHardMarginParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelSpecificHardMarginParameter) */ {
 public:
  LabelSpecificHardMarginParameter();
  virtual ~LabelSpecificHardMarginParameter();

  LabelSpecificHardMarginParameter(const LabelSpecificHardMarginParameter& from);

  inline LabelSpecificHardMarginParameter& operator=(const LabelSpecificHardMarginParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelSpecificHardMarginParameter(LabelSpecificHardMarginParameter&& from) noexcept
    : LabelSpecificHardMarginParameter() {
    *this = ::std::move(from);
  }

  inline LabelSpecificHardMarginParameter& operator=(LabelSpecificHardMarginParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSpecificHardMarginParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSpecificHardMarginParameter* internal_default_instance() {
    return reinterpret_cast<const LabelSpecificHardMarginParameter*>(
               &_LabelSpecificHardMarginParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(LabelSpecificHardMarginParameter* other);
  friend void swap(LabelSpecificHardMarginParameter& a, LabelSpecificHardMarginParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelSpecificHardMarginParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelSpecificHardMarginParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelSpecificHardMarginParameter& from);
  void MergeFrom(const LabelSpecificHardMarginParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelSpecificHardMarginParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float positive_weight = 1 [default = 0.5];
  bool has_positive_weight() const;
  void clear_positive_weight();
  static const int kPositiveWeightFieldNumber = 1;
  float positive_weight() const;
  void set_positive_weight(float value);

  // @@protoc_insertion_point(class_scope:caffe.LabelSpecificHardMarginParameter)
 private:
  void set_has_positive_weight();
  void clear_has_positive_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float positive_weight_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLabelSpecificHardMarginParameterImpl();
};
// -------------------------------------------------------------------

class LabelSpecificStatisticsParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelSpecificStatisticsParameter) */ {
 public:
  LabelSpecificStatisticsParameter();
  virtual ~LabelSpecificStatisticsParameter();

  LabelSpecificStatisticsParameter(const LabelSpecificStatisticsParameter& from);

  inline LabelSpecificStatisticsParameter& operator=(const LabelSpecificStatisticsParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelSpecificStatisticsParameter(LabelSpecificStatisticsParameter&& from) noexcept
    : LabelSpecificStatisticsParameter() {
    *this = ::std::move(from);
  }

  inline LabelSpecificStatisticsParameter& operator=(LabelSpecificStatisticsParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSpecificStatisticsParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSpecificStatisticsParameter* internal_default_instance() {
    return reinterpret_cast<const LabelSpecificStatisticsParameter*>(
               &_LabelSpecificStatisticsParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(LabelSpecificStatisticsParameter* other);
  friend void swap(LabelSpecificStatisticsParameter& a, LabelSpecificStatisticsParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelSpecificStatisticsParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelSpecificStatisticsParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelSpecificStatisticsParameter& from);
  void MergeFrom(const LabelSpecificStatisticsParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelSpecificStatisticsParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool scale_for_angle = 1 [default = true];
  bool has_scale_for_angle() const;
  void clear_scale_for_angle();
  static const int kScaleForAngleFieldNumber = 1;
  bool scale_for_angle() const;
  void set_scale_for_angle(bool value);

  // optional float scale_factor = 2 [default = 30];
  bool has_scale_factor() const;
  void clear_scale_factor();
  static const int kScaleFactorFieldNumber = 2;
  float scale_factor() const;
  void set_scale_factor(float value);

  // @@protoc_insertion_point(class_scope:caffe.LabelSpecificStatisticsParameter)
 private:
  void set_has_scale_for_angle();
  void clear_has_scale_for_angle();
  void set_has_scale_factor();
  void clear_has_scale_factor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool scale_for_angle_;
  float scale_factor_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLabelSpecificStatisticsParameterImpl();
};
// -------------------------------------------------------------------

class LabelSpecificAddParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelSpecificAddParameter) */ {
 public:
  LabelSpecificAddParameter();
  virtual ~LabelSpecificAddParameter();

  LabelSpecificAddParameter(const LabelSpecificAddParameter& from);

  inline LabelSpecificAddParameter& operator=(const LabelSpecificAddParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabelSpecificAddParameter(LabelSpecificAddParameter&& from) noexcept
    : LabelSpecificAddParameter() {
    *this = ::std::move(from);
  }

  inline LabelSpecificAddParameter& operator=(LabelSpecificAddParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelSpecificAddParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelSpecificAddParameter* internal_default_instance() {
    return reinterpret_cast<const LabelSpecificAddParameter*>(
               &_LabelSpecificAddParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void Swap(LabelSpecificAddParameter* other);
  friend void swap(LabelSpecificAddParameter& a, LabelSpecificAddParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabelSpecificAddParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  LabelSpecificAddParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LabelSpecificAddParameter& from);
  void MergeFrom(const LabelSpecificAddParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LabelSpecificAddParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float bias = 1 [default = 0];
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 1;
  float bias() const;
  void set_bias(float value);

  // optional bool transform_test = 2 [default = false];
  bool has_transform_test() const;
  void clear_transform_test();
  static const int kTransformTestFieldNumber = 2;
  bool transform_test() const;
  void set_transform_test(bool value);

  // optional float bias_base = 3 [default = 0];
  bool has_bias_base() const;
  void clear_bias_base();
  static const int kBiasBaseFieldNumber = 3;
  float bias_base() const;
  void set_bias_base(float value);

  // optional float bias_gamma = 4 [default = 0];
  bool has_bias_gamma() const;
  void clear_bias_gamma();
  static const int kBiasGammaFieldNumber = 4;
  float bias_gamma() const;
  void set_bias_gamma(float value);

  // optional float bias_min = 6 [default = 0];
  bool has_bias_min() const;
  void clear_bias_min();
  static const int kBiasMinFieldNumber = 6;
  float bias_min() const;
  void set_bias_min(float value);

  // optional float bias_max = 7 [default = 0];
  bool has_bias_max() const;
  void clear_bias_max();
  static const int kBiasMaxFieldNumber = 7;
  float bias_max() const;
  void set_bias_max(float value);

  // optional uint32 iteration = 8 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  static const int kIterationFieldNumber = 8;
  ::google::protobuf::uint32 iteration() const;
  void set_iteration(::google::protobuf::uint32 value);

  // optional float bias_power = 5 [default = 1];
  bool has_bias_power() const;
  void clear_bias_power();
  static const int kBiasPowerFieldNumber = 5;
  float bias_power() const;
  void set_bias_power(float value);

  // @@protoc_insertion_point(class_scope:caffe.LabelSpecificAddParameter)
 private:
  void set_has_bias();
  void clear_has_bias();
  void set_has_transform_test();
  void clear_has_transform_test();
  void set_has_bias_base();
  void clear_has_bias_base();
  void set_has_bias_gamma();
  void clear_has_bias_gamma();
  void set_has_bias_power();
  void clear_has_bias_power();
  void set_has_bias_min();
  void clear_has_bias_min();
  void set_has_bias_max();
  void clear_has_bias_max();
  void set_has_iteration();
  void clear_has_iteration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float bias_;
  bool transform_test_;
  float bias_base_;
  float bias_gamma_;
  float bias_min_;
  float bias_max_;
  ::google::protobuf::uint32 iteration_;
  float bias_power_;
  friend struct ::protobuf_caffe_5flow_5fprecision_2eproto::TableStruct;
  friend void ::protobuf_caffe_5flow_5fprecision_2eproto::InitDefaultsLabelSpecificAddParameterImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .caffe.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& BlobProto::shape() const {
  const ::caffe::BlobShape* p = shape_;
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BlobShape*>(
      &::caffe::_BlobShape_default_instance_);
}
inline ::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
inline void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// repeated int32 data_i = 10 [packed = true];
inline int BlobProto::data_i_size() const {
  return data_i_.size();
}
inline void BlobProto::clear_data_i() {
  data_i_.Clear();
}
inline ::google::protobuf::int32 BlobProto::data_i(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data_i)
  return data_i_.Get(index);
}
inline void BlobProto::set_data_i(int index, ::google::protobuf::int32 value) {
  data_i_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data_i)
}
inline void BlobProto::add_data_i(::google::protobuf::int32 value) {
  data_i_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data_i)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BlobProto::data_i() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data_i)
  return data_i_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BlobProto::mutable_data_i() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data_i)
  return &data_i_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena();
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
#if LANG_CXX11
inline void Datum::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.Datum.data)
}
#endif
inline void Datum::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(&::caffe::FillerParameter::_default_type_.get());
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena();
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::caffe::FillerParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
#if LANG_CXX11
inline void FillerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::caffe::FillerParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.FillerParameter.type)
}
#endif
inline void FillerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::caffe::FillerParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::caffe::FillerParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(&::caffe::FillerParameter::_default_type_.get());
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::caffe::FillerParameter::_default_type_.get());
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::caffe::FillerParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional float alpha = 9 [default = 0];
inline bool FillerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float FillerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.alpha)
  return alpha_;
}
inline void FillerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.alpha)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena();
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
#if LANG_CXX11
inline void NetParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NetParameter.name)
}
#endif
inline void NetParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetParameter::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetParameter::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#if LANG_CXX11
inline void NetParameter::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
#endif
inline void NetParameter::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::state() const {
  const ::caffe::NetState* p = state_;
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetState*>(
      &::caffe::_NetState_default_instance_);
}
inline ::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
inline ::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
inline ::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena();
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
#if LANG_CXX11
inline void SolverParameter::set_net(::std::string&& value) {
  set_has_net();
  net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.net)
}
#endif
inline void SolverParameter::set_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->Clear();
  clear_has_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::net_param() const {
  const ::caffe::NetParameter* p = net_param_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetParameter*>(
      &::caffe::_NetParameter_default_instance_);
}
inline ::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline ::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
inline void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete net_param_;
  }
  if (net_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      net_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, net_param, submessage_arena);
    }
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  net_param_ = net_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
inline const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena();
}
inline void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
#if LANG_CXX11
inline void SolverParameter::set_train_net(::std::string&& value) {
  set_has_train_net();
  train_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.train_net)
}
#endif
inline void SolverParameter::set_train_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
inline ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::test_net_size() const {
  return test_net_.size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SolverParameter::set_test_net(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SolverParameter::set_test_net(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
inline ::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#if LANG_CXX11
inline void SolverParameter::add_test_net(::std::string&& value) {
  test_net_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
#endif
inline void SolverParameter::add_test_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->Clear();
  clear_has_train_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  const ::caffe::NetParameter* p = train_net_param_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetParameter*>(
      &::caffe::_NetParameter_default_instance_);
}
inline ::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline ::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
inline void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete train_net_param_;
  }
  if (train_net_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      train_net_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, train_net_param, submessage_arena);
    }
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  train_net_param_ = train_net_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
inline ::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverParameter::train_state() const {
  const ::caffe::NetState* p = train_state_;
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NetState*>(
      &::caffe::_NetState_default_instance_);
}
inline ::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline ::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
inline void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete train_state_;
  }
  if (train_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      train_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, train_state, submessage_arena);
    }
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  train_state_ = train_state;
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
inline void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_iter_size() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SolverParameter::clear_has_iter_size() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena();
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
#if LANG_CXX11
inline void SolverParameter::set_lr_policy(::std::string&& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.lr_policy)
}
#endif
inline void SolverParameter::set_lr_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(&::caffe::SolverParameter::_default_regularization_type_.get());
  clear_has_regularization_type();
}
inline const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena();
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&::caffe::SolverParameter::_default_regularization_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
#if LANG_CXX11
inline void SolverParameter::set_regularization_type(::std::string&& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(
    &::caffe::SolverParameter::_default_regularization_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.regularization_type)
}
#endif
inline void SolverParameter::set_regularization_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_regularization_type();
  regularization_type_.SetNoArena(&::caffe::SolverParameter::_default_regularization_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(&::caffe::SolverParameter::_default_regularization_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(&::caffe::SolverParameter::_default_regularization_type_.get());
}
inline ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(&::caffe::SolverParameter::_default_regularization_type_.get());
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(&::caffe::SolverParameter::_default_regularization_type_.get(), regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
inline void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
inline void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SolverParameter::set_has_clip_gradients() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
inline void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional float clamp_weights_lower = 42 [default = -999999.875];
inline bool SolverParameter::has_clamp_weights_lower() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_clamp_weights_lower() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SolverParameter::clear_has_clamp_weights_lower() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SolverParameter::clear_clamp_weights_lower() {
  clamp_weights_lower_ = -999999.875f;
  clear_has_clamp_weights_lower();
}
inline float SolverParameter::clamp_weights_lower() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clamp_weights_lower)
  return clamp_weights_lower_;
}
inline void SolverParameter::set_clamp_weights_lower(float value) {
  set_has_clamp_weights_lower();
  clamp_weights_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clamp_weights_lower)
}

// optional float clamp_weights_upper = 43 [default = 999999.875];
inline bool SolverParameter::has_clamp_weights_upper() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_clamp_weights_upper() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SolverParameter::clear_has_clamp_weights_upper() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SolverParameter::clear_clamp_weights_upper() {
  clamp_weights_upper_ = 999999.875f;
  clear_has_clamp_weights_upper();
}
inline float SolverParameter::clamp_weights_upper() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clamp_weights_upper)
  return clamp_weights_upper_;
}
inline void SolverParameter::set_clamp_weights_upper(float value) {
  set_has_clamp_weights_upper();
  clamp_weights_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clamp_weights_upper)
}

// optional float clip_weights = 44 [default = -1];
inline bool SolverParameter::has_clip_weights() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_clip_weights() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SolverParameter::clear_has_clip_weights() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SolverParameter::clear_clip_weights() {
  clip_weights_ = -1;
  clear_has_clip_weights();
}
inline float SolverParameter::clip_weights() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_weights)
  return clip_weights_;
}
inline void SolverParameter::set_clip_weights(float value) {
  set_has_clip_weights();
  clip_weights_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_weights)
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_snapshot() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
inline void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena();
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
#if LANG_CXX11
inline void SolverParameter::set_snapshot_prefix(::std::string&& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.snapshot_prefix)
}
#endif
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_snapshot_format() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
inline ::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
inline void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(&::caffe::SolverParameter::_default_type_.get());
  clear_has_type();
}
inline const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena();
}
inline void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::caffe::SolverParameter::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
#if LANG_CXX11
inline void SolverParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::caffe::SolverParameter::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverParameter.type)
}
#endif
inline void SolverParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::caffe::SolverParameter::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::caffe::SolverParameter::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
inline ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(&::caffe::SolverParameter::_default_type_.get());
}
inline ::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::caffe::SolverParameter::_default_type_.get());
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::caffe::SolverParameter::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-008];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-008f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
inline void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38 [default = 0.99];
inline bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0.99f;
  clear_has_rms_decay();
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
inline void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional bool layer_wise_reduce = 41 [default = true];
inline bool SolverParameter::has_layer_wise_reduce() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SolverParameter::set_has_layer_wise_reduce() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SolverParameter::clear_has_layer_wise_reduce() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SolverParameter::clear_layer_wise_reduce() {
  layer_wise_reduce_ = true;
  clear_has_layer_wise_reduce();
}
inline bool SolverParameter::layer_wise_reduce() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.layer_wise_reduce)
  return layer_wise_reduce_;
}
inline void SolverParameter::set_layer_wise_reduce(bool value) {
  set_has_layer_wise_reduce();
  layer_wise_reduce_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.layer_wise_reduce)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena();
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
#if LANG_CXX11
inline void SolverState::set_learned_net(::std::string&& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SolverState.learned_net)
}
#endif
inline void SolverState::set_learned_net(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetState::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetState::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#if LANG_CXX11
inline void NetState::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
#endif
inline void NetState::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetStateRule::set_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetStateRule::set_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#if LANG_CXX11
inline void NetStateRule::add_stage(::std::string&& value) {
  stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
#endif
inline void NetStateRule::add_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NetStateRule::set_not_stage(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NetStateRule::set_not_stage(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#if LANG_CXX11
inline void NetStateRule::add_not_stage(::std::string&& value) {
  not_stage_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
#endif
inline void NetStateRule::add_not_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena();
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
#if LANG_CXX11
inline void ParamSpec::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ParamSpec.name)
}
#endif
inline void ParamSpec::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena();
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
#if LANG_CXX11
inline void LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.name)
}
#endif
inline void LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena();
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
#if LANG_CXX11
inline void LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.LayerParameter.type)
}
#endif
inline void LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#if LANG_CXX11
inline void LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
#endif
inline void LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#if LANG_CXX11
inline void LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
#endif
inline void LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[2] |= 0x10000000u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
inline ::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  const ::caffe::TransformationParameter* p = transform_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TransformationParameter*>(
      &::caffe::_TransformationParameter_default_instance_);
}
inline ::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline ::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
inline void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_param_;
  }
  if (transform_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transform_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transform_param, submessage_arena);
    }
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  transform_param_ = transform_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& LayerParameter::loss_param() const {
  const ::caffe::LossParameter* p = loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LossParameter*>(
      &::caffe::_LossParameter_default_instance_);
}
inline ::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline ::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
inline void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete loss_param_;
  }
  if (loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loss_param, submessage_arena);
    }
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  loss_param_ = loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  const ::caffe::AccuracyParameter* p = accuracy_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::AccuracyParameter*>(
      &::caffe::_AccuracyParameter_default_instance_);
}
inline ::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline ::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accuracy_param_;
  }
  if (accuracy_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accuracy_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accuracy_param, submessage_arena);
    }
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  accuracy_param_ = accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  const ::caffe::ArgMaxParameter* p = argmax_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ArgMaxParameter*>(
      &::caffe::_ArgMaxParameter_default_instance_);
}
inline ::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline ::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
inline void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete argmax_param_;
  }
  if (argmax_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      argmax_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, argmax_param, submessage_arena);
    }
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  argmax_param_ = argmax_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->Clear();
  clear_has_batch_norm_param();
}
inline const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  const ::caffe::BatchNormParameter* p = batch_norm_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BatchNormParameter*>(
      &::caffe::_BatchNormParameter_default_instance_);
}
inline ::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline ::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
inline void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete batch_norm_param_;
  }
  if (batch_norm_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batch_norm_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batch_norm_param, submessage_arena);
    }
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  batch_norm_param_ = batch_norm_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_bias_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_bias_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->Clear();
  clear_has_bias_param();
}
inline const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  const ::caffe::BiasParameter* p = bias_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BiasParameter*>(
      &::caffe::_BiasParameter_default_instance_);
}
inline ::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline ::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
inline void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_param_;
  }
  if (bias_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_param, submessage_arena);
    }
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  bias_param_ = bias_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  const ::caffe::ConcatParameter* p = concat_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConcatParameter*>(
      &::caffe::_ConcatParameter_default_instance_);
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete concat_param_;
  }
  if (concat_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      concat_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  const ::caffe::ContrastiveLossParameter* p = contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ContrastiveLossParameter*>(
      &::caffe::_ContrastiveLossParameter_default_instance_);
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contrastive_loss_param_;
  }
  if (contrastive_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contrastive_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contrastive_loss_param, submessage_arena);
    }
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  contrastive_loss_param_ = contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  const ::caffe::ConvolutionParameter* p = convolution_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConvolutionParameter*>(
      &::caffe::_ConvolutionParameter_default_instance_);
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete convolution_param_;
  }
  if (convolution_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      convolution_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.CropParameter crop_param = 144;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->Clear();
  clear_has_crop_param();
}
inline const ::caffe::CropParameter& LayerParameter::crop_param() const {
  const ::caffe::CropParameter* p = crop_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::CropParameter*>(
      &::caffe::_CropParameter_default_instance_);
}
inline ::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline ::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
inline void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete crop_param_;
  }
  if (crop_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crop_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crop_param, submessage_arena);
    }
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  crop_param_ = crop_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  const ::caffe::DataParameter* p = data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DataParameter*>(
      &::caffe::_DataParameter_default_instance_);
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_param_;
  }
  if (data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  const ::caffe::DropoutParameter* p = dropout_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DropoutParameter*>(
      &::caffe::_DropoutParameter_default_instance_);
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dropout_param_;
  }
  if (dropout_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dropout_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  const ::caffe::DummyDataParameter* p = dummy_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DummyDataParameter*>(
      &::caffe::_DummyDataParameter_default_instance_);
}
inline ::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline ::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dummy_data_param_;
  }
  if (dummy_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dummy_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dummy_data_param, submessage_arena);
    }
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  dummy_data_param_ = dummy_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  const ::caffe::EltwiseParameter* p = eltwise_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EltwiseParameter*>(
      &::caffe::_EltwiseParameter_default_instance_);
}
inline ::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline ::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete eltwise_param_;
  }
  if (eltwise_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      eltwise_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  eltwise_param_ = eltwise_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_elu_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_elu_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->Clear();
  clear_has_elu_param();
}
inline const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  const ::caffe::ELUParameter* p = elu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ELUParameter*>(
      &::caffe::_ELUParameter_default_instance_);
}
inline ::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
inline ::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
inline void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elu_param_;
  }
  if (elu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elu_param, submessage_arena);
    }
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  elu_param_ = elu_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_embed_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_embed_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->Clear();
  clear_has_embed_param();
}
inline const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  const ::caffe::EmbedParameter* p = embed_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EmbedParameter*>(
      &::caffe::_EmbedParameter_default_instance_);
}
inline ::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
inline ::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
inline void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete embed_param_;
  }
  if (embed_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      embed_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, embed_param, submessage_arena);
    }
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  embed_param_ = embed_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  const ::caffe::ExpParameter* p = exp_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ExpParameter*>(
      &::caffe::_ExpParameter_default_instance_);
}
inline ::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline ::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
inline void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exp_param_;
  }
  if (exp_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_param, submessage_arena);
    }
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  exp_param_ = exp_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_flatten_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_flatten_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->Clear();
  clear_has_flatten_param();
}
inline const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  const ::caffe::FlattenParameter* p = flatten_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FlattenParameter*>(
      &::caffe::_FlattenParameter_default_instance_);
}
inline ::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
inline ::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
inline void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete flatten_param_;
  }
  if (flatten_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flatten_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flatten_param, submessage_arena);
    }
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  flatten_param_ = flatten_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  const ::caffe::HDF5DataParameter* p = hdf5_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5DataParameter*>(
      &::caffe::_HDF5DataParameter_default_instance_);
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  const ::caffe::HingeLossParameter* p = hinge_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HingeLossParameter*>(
      &::caffe::_HingeLossParameter_default_instance_);
}
inline ::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline ::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hinge_loss_param_;
  }
  if (hinge_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hinge_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hinge_loss_param, submessage_arena);
    }
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  hinge_loss_param_ = hinge_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  const ::caffe::ImageDataParameter* p = image_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageDataParameter*>(
      &::caffe::_ImageDataParameter_default_instance_);
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_data_param_;
  }
  if (image_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  const ::caffe::InfogainLossParameter* p = infogain_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InfogainLossParameter*>(
      &::caffe::_InfogainLossParameter_default_instance_);
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  const ::caffe::InnerProductParameter* p = inner_product_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InnerProductParameter*>(
      &::caffe::_InnerProductParameter_default_instance_);
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inner_product_param_;
  }
  if (inner_product_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inner_product_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->Clear();
  clear_has_input_param();
}
inline const ::caffe::InputParameter& LayerParameter::input_param() const {
  const ::caffe::InputParameter* p = input_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InputParameter*>(
      &::caffe::_InputParameter_default_instance_);
}
inline ::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline ::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
inline void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete input_param_;
  }
  if (input_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      input_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input_param, submessage_arena);
    }
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  input_param_ = input_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->Clear();
  clear_has_log_param();
}
inline const ::caffe::LogParameter& LayerParameter::log_param() const {
  const ::caffe::LogParameter* p = log_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LogParameter*>(
      &::caffe::_LogParameter_default_instance_);
}
inline ::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
inline ::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
inline void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_param_;
  }
  if (log_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log_param, submessage_arena);
    }
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  log_param_ = log_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  const ::caffe::LRNParameter* p = lrn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LRNParameter*>(
      &::caffe::_LRNParameter_default_instance_);
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lrn_param_;
  }
  if (lrn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lrn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  const ::caffe::MemoryDataParameter* p = memory_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MemoryDataParameter*>(
      &::caffe::_MemoryDataParameter_default_instance_);
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete memory_data_param_;
  }
  if (memory_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      memory_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  const ::caffe::MVNParameter* p = mvn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MVNParameter*>(
      &::caffe::_MVNParameter_default_instance_);
}
inline ::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline ::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
inline void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mvn_param_;
  }
  if (mvn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mvn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mvn_param, submessage_arena);
    }
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  mvn_param_ = mvn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.ParameterParameter parameter_param = 145;
inline bool LayerParameter::has_parameter_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_parameter_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_parameter_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->Clear();
  clear_has_parameter_param();
}
inline const ::caffe::ParameterParameter& LayerParameter::parameter_param() const {
  const ::caffe::ParameterParameter* p = parameter_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.parameter_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ParameterParameter*>(
      &::caffe::_ParameterParameter_default_instance_);
}
inline ::caffe::ParameterParameter* LayerParameter::release_parameter_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.parameter_param)
  clear_has_parameter_param();
  ::caffe::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
inline ::caffe::ParameterParameter* LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) {
    parameter_param_ = new ::caffe::ParameterParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.parameter_param)
  return parameter_param_;
}
inline void LayerParameter::set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parameter_param_;
  }
  if (parameter_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parameter_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameter_param, submessage_arena);
    }
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  parameter_param_ = parameter_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.parameter_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  const ::caffe::PoolingParameter* p = pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PoolingParameter*>(
      &::caffe::_PoolingParameter_default_instance_);
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pooling_param_;
  }
  if (pooling_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pooling_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  const ::caffe::PowerParameter* p = power_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PowerParameter*>(
      &::caffe::_PowerParameter_default_instance_);
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete power_param_;
  }
  if (power_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      power_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->Clear();
  clear_has_prelu_param();
}
inline const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  const ::caffe::PReLUParameter* p = prelu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PReLUParameter*>(
      &::caffe::_PReLUParameter_default_instance_);
}
inline ::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline ::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
inline void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prelu_param_;
  }
  if (prelu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prelu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prelu_param, submessage_arena);
    }
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  prelu_param_ = prelu_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->Clear();
  clear_has_python_param();
}
inline const ::caffe::PythonParameter& LayerParameter::python_param() const {
  const ::caffe::PythonParameter* p = python_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PythonParameter*>(
      &::caffe::_PythonParameter_default_instance_);
}
inline ::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline ::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
inline void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete python_param_;
  }
  if (python_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      python_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, python_param, submessage_arena);
    }
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  python_param_ = python_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
inline bool LayerParameter::has_recurrent_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_recurrent_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_recurrent_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_recurrent_param() {
  if (recurrent_param_ != NULL) recurrent_param_->Clear();
  clear_has_recurrent_param();
}
inline const ::caffe::RecurrentParameter& LayerParameter::recurrent_param() const {
  const ::caffe::RecurrentParameter* p = recurrent_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.recurrent_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::RecurrentParameter*>(
      &::caffe::_RecurrentParameter_default_instance_);
}
inline ::caffe::RecurrentParameter* LayerParameter::release_recurrent_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.recurrent_param)
  clear_has_recurrent_param();
  ::caffe::RecurrentParameter* temp = recurrent_param_;
  recurrent_param_ = NULL;
  return temp;
}
inline ::caffe::RecurrentParameter* LayerParameter::mutable_recurrent_param() {
  set_has_recurrent_param();
  if (recurrent_param_ == NULL) {
    recurrent_param_ = new ::caffe::RecurrentParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.recurrent_param)
  return recurrent_param_;
}
inline void LayerParameter::set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recurrent_param_;
  }
  if (recurrent_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recurrent_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recurrent_param, submessage_arena);
    }
    set_has_recurrent_param();
  } else {
    clear_has_recurrent_param();
  }
  recurrent_param_ = recurrent_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.recurrent_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->Clear();
  clear_has_reduction_param();
}
inline const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  const ::caffe::ReductionParameter* p = reduction_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReductionParameter*>(
      &::caffe::_ReductionParameter_default_instance_);
}
inline ::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
inline ::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
inline void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reduction_param_;
  }
  if (reduction_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reduction_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reduction_param, submessage_arena);
    }
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  reduction_param_ = reduction_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  const ::caffe::ReLUParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReLUParameter*>(
      &::caffe::_ReLUParameter_default_instance_);
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relu_param_;
  }
  if (relu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->Clear();
  clear_has_reshape_param();
}
inline const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  const ::caffe::ReshapeParameter* p = reshape_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReshapeParameter*>(
      &::caffe::_ReshapeParameter_default_instance_);
}
inline ::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline ::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
inline void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshape_param_;
  }
  if (reshape_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reshape_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reshape_param, submessage_arena);
    }
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  reshape_param_ = reshape_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->Clear();
  clear_has_scale_param();
}
inline const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  const ::caffe::ScaleParameter* p = scale_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ScaleParameter*>(
      &::caffe::_ScaleParameter_default_instance_);
}
inline ::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline ::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
inline void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scale_param_;
  }
  if (scale_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale_param, submessage_arena);
    }
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  scale_param_ = scale_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  const ::caffe::SigmoidParameter* p = sigmoid_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SigmoidParameter*>(
      &::caffe::_SigmoidParameter_default_instance_);
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sigmoid_param_;
  }
  if (sigmoid_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sigmoid_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  const ::caffe::SoftmaxParameter* p = softmax_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftmaxParameter*>(
      &::caffe::_SoftmaxParameter_default_instance_);
}
inline ::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline ::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
inline void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete softmax_param_;
  }
  if (softmax_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      softmax_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  softmax_param_ = softmax_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->Clear();
  clear_has_spp_param();
}
inline const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  const ::caffe::SPPParameter* p = spp_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SPPParameter*>(
      &::caffe::_SPPParameter_default_instance_);
}
inline ::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
inline ::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
inline void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spp_param_;
  }
  if (spp_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spp_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spp_param, submessage_arena);
    }
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  spp_param_ = spp_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  const ::caffe::SliceParameter* p = slice_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SliceParameter*>(
      &::caffe::_SliceParameter_default_instance_);
}
inline ::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline ::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
inline void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slice_param_;
  }
  if (slice_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slice_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slice_param, submessage_arena);
    }
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  slice_param_ = slice_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  const ::caffe::TanHParameter* p = tanh_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TanHParameter*>(
      &::caffe::_TanHParameter_default_instance_);
}
inline ::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline ::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
inline void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tanh_param_;
  }
  if (tanh_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tanh_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tanh_param, submessage_arena);
    }
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  tanh_param_ = tanh_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  const ::caffe::ThresholdParameter* p = threshold_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ThresholdParameter*>(
      &::caffe::_ThresholdParameter_default_instance_);
}
inline ::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline ::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
inline void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete threshold_param_;
  }
  if (threshold_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      threshold_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threshold_param, submessage_arena);
    }
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  threshold_param_ = threshold_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_tile_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_tile_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->Clear();
  clear_has_tile_param();
}
inline const ::caffe::TileParameter& LayerParameter::tile_param() const {
  const ::caffe::TileParameter* p = tile_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TileParameter*>(
      &::caffe::_TileParameter_default_instance_);
}
inline ::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
inline ::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
inline void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tile_param_;
  }
  if (tile_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tile_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tile_param, submessage_arena);
    }
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  tile_param_ = tile_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  const ::caffe::WindowDataParameter* p = window_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::WindowDataParameter*>(
      &::caffe::_WindowDataParameter_default_instance_);
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_data_param_;
  }
  if (window_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      window_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.BNParameter bn_param = 200;
inline bool LayerParameter::has_bn_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_bn_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_bn_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_bn_param() {
  if (bn_param_ != NULL) bn_param_->Clear();
  clear_has_bn_param();
}
inline const ::caffe::BNParameter& LayerParameter::bn_param() const {
  const ::caffe::BNParameter* p = bn_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BNParameter*>(
      &::caffe::_BNParameter_default_instance_);
}
inline ::caffe::BNParameter* LayerParameter::release_bn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bn_param)
  clear_has_bn_param();
  ::caffe::BNParameter* temp = bn_param_;
  bn_param_ = NULL;
  return temp;
}
inline ::caffe::BNParameter* LayerParameter::mutable_bn_param() {
  set_has_bn_param();
  if (bn_param_ == NULL) {
    bn_param_ = new ::caffe::BNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bn_param)
  return bn_param_;
}
inline void LayerParameter::set_allocated_bn_param(::caffe::BNParameter* bn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bn_param_;
  }
  if (bn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bn_param, submessage_arena);
    }
    set_has_bn_param();
  } else {
    clear_has_bn_param();
  }
  bn_param_ = bn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bn_param)
}

// optional .caffe.LocalParameter local_param = 201;
inline bool LayerParameter::has_local_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_local_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_local_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_local_param() {
  if (local_param_ != NULL) local_param_->Clear();
  clear_has_local_param();
}
inline const ::caffe::LocalParameter& LayerParameter::local_param() const {
  const ::caffe::LocalParameter* p = local_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.local_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LocalParameter*>(
      &::caffe::_LocalParameter_default_instance_);
}
inline ::caffe::LocalParameter* LayerParameter::release_local_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.local_param)
  clear_has_local_param();
  ::caffe::LocalParameter* temp = local_param_;
  local_param_ = NULL;
  return temp;
}
inline ::caffe::LocalParameter* LayerParameter::mutable_local_param() {
  set_has_local_param();
  if (local_param_ == NULL) {
    local_param_ = new ::caffe::LocalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.local_param)
  return local_param_;
}
inline void LayerParameter::set_allocated_local_param(::caffe::LocalParameter* local_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_param_;
  }
  if (local_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_param, submessage_arena);
    }
    set_has_local_param();
  } else {
    clear_has_local_param();
  }
  local_param_ = local_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.local_param)
}

// optional .caffe.InsanityParameter insanity_param = 202;
inline bool LayerParameter::has_insanity_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_insanity_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_insanity_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_insanity_param() {
  if (insanity_param_ != NULL) insanity_param_->Clear();
  clear_has_insanity_param();
}
inline const ::caffe::InsanityParameter& LayerParameter::insanity_param() const {
  const ::caffe::InsanityParameter* p = insanity_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.insanity_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InsanityParameter*>(
      &::caffe::_InsanityParameter_default_instance_);
}
inline ::caffe::InsanityParameter* LayerParameter::release_insanity_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.insanity_param)
  clear_has_insanity_param();
  ::caffe::InsanityParameter* temp = insanity_param_;
  insanity_param_ = NULL;
  return temp;
}
inline ::caffe::InsanityParameter* LayerParameter::mutable_insanity_param() {
  set_has_insanity_param();
  if (insanity_param_ == NULL) {
    insanity_param_ = new ::caffe::InsanityParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.insanity_param)
  return insanity_param_;
}
inline void LayerParameter::set_allocated_insanity_param(::caffe::InsanityParameter* insanity_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete insanity_param_;
  }
  if (insanity_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      insanity_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, insanity_param, submessage_arena);
    }
    set_has_insanity_param();
  } else {
    clear_has_insanity_param();
  }
  insanity_param_ = insanity_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.insanity_param)
}

// optional .caffe.TripletLossParameter triplet_loss_param = 203;
inline bool LayerParameter::has_triplet_loss_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_triplet_loss_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_triplet_loss_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_triplet_loss_param() {
  if (triplet_loss_param_ != NULL) triplet_loss_param_->Clear();
  clear_has_triplet_loss_param();
}
inline const ::caffe::TripletLossParameter& LayerParameter::triplet_loss_param() const {
  const ::caffe::TripletLossParameter* p = triplet_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.triplet_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TripletLossParameter*>(
      &::caffe::_TripletLossParameter_default_instance_);
}
inline ::caffe::TripletLossParameter* LayerParameter::release_triplet_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.triplet_loss_param)
  clear_has_triplet_loss_param();
  ::caffe::TripletLossParameter* temp = triplet_loss_param_;
  triplet_loss_param_ = NULL;
  return temp;
}
inline ::caffe::TripletLossParameter* LayerParameter::mutable_triplet_loss_param() {
  set_has_triplet_loss_param();
  if (triplet_loss_param_ == NULL) {
    triplet_loss_param_ = new ::caffe::TripletLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.triplet_loss_param)
  return triplet_loss_param_;
}
inline void LayerParameter::set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete triplet_loss_param_;
  }
  if (triplet_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      triplet_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, triplet_loss_param, submessage_arena);
    }
    set_has_triplet_loss_param();
  } else {
    clear_has_triplet_loss_param();
  }
  triplet_loss_param_ = triplet_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.triplet_loss_param)
}

// optional .caffe.ROIPoolingParameter roi_pooling_param = 204;
inline bool LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->Clear();
  clear_has_roi_pooling_param();
}
inline const ::caffe::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  const ::caffe::ROIPoolingParameter* p = roi_pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ROIPoolingParameter*>(
      &::caffe::_ROIPoolingParameter_default_instance_);
}
inline ::caffe::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_pooling_param)
  clear_has_roi_pooling_param();
  ::caffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
inline ::caffe::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
inline void LayerParameter::set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roi_pooling_param_;
  }
  if (roi_pooling_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roi_pooling_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roi_pooling_param, submessage_arena);
    }
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  roi_pooling_param_ = roi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_pooling_param)
}

// optional .caffe.EltwiseAffineParameter eltwise_affine_param = 205;
inline bool LayerParameter::has_eltwise_affine_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_eltwise_affine_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_eltwise_affine_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_eltwise_affine_param() {
  if (eltwise_affine_param_ != NULL) eltwise_affine_param_->Clear();
  clear_has_eltwise_affine_param();
}
inline const ::caffe::EltwiseAffineParameter& LayerParameter::eltwise_affine_param() const {
  const ::caffe::EltwiseAffineParameter* p = eltwise_affine_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_affine_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EltwiseAffineParameter*>(
      &::caffe::_EltwiseAffineParameter_default_instance_);
}
inline ::caffe::EltwiseAffineParameter* LayerParameter::release_eltwise_affine_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_affine_param)
  clear_has_eltwise_affine_param();
  ::caffe::EltwiseAffineParameter* temp = eltwise_affine_param_;
  eltwise_affine_param_ = NULL;
  return temp;
}
inline ::caffe::EltwiseAffineParameter* LayerParameter::mutable_eltwise_affine_param() {
  set_has_eltwise_affine_param();
  if (eltwise_affine_param_ == NULL) {
    eltwise_affine_param_ = new ::caffe::EltwiseAffineParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_affine_param)
  return eltwise_affine_param_;
}
inline void LayerParameter::set_allocated_eltwise_affine_param(::caffe::EltwiseAffineParameter* eltwise_affine_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete eltwise_affine_param_;
  }
  if (eltwise_affine_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      eltwise_affine_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eltwise_affine_param, submessage_arena);
    }
    set_has_eltwise_affine_param();
  } else {
    clear_has_eltwise_affine_param();
  }
  eltwise_affine_param_ = eltwise_affine_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_affine_param)
}

// optional .caffe.SubRegionParameter sub_region_param = 206;
inline bool LayerParameter::has_sub_region_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_sub_region_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_sub_region_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_sub_region_param() {
  if (sub_region_param_ != NULL) sub_region_param_->Clear();
  clear_has_sub_region_param();
}
inline const ::caffe::SubRegionParameter& LayerParameter::sub_region_param() const {
  const ::caffe::SubRegionParameter* p = sub_region_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sub_region_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SubRegionParameter*>(
      &::caffe::_SubRegionParameter_default_instance_);
}
inline ::caffe::SubRegionParameter* LayerParameter::release_sub_region_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sub_region_param)
  clear_has_sub_region_param();
  ::caffe::SubRegionParameter* temp = sub_region_param_;
  sub_region_param_ = NULL;
  return temp;
}
inline ::caffe::SubRegionParameter* LayerParameter::mutable_sub_region_param() {
  set_has_sub_region_param();
  if (sub_region_param_ == NULL) {
    sub_region_param_ = new ::caffe::SubRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sub_region_param)
  return sub_region_param_;
}
inline void LayerParameter::set_allocated_sub_region_param(::caffe::SubRegionParameter* sub_region_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sub_region_param_;
  }
  if (sub_region_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sub_region_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sub_region_param, submessage_arena);
    }
    set_has_sub_region_param();
  } else {
    clear_has_sub_region_param();
  }
  sub_region_param_ = sub_region_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sub_region_param)
}

// optional .caffe.NoiseParameter noise_param = 207;
inline bool LayerParameter::has_noise_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_noise_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_noise_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->Clear();
  clear_has_noise_param();
}
inline const ::caffe::NoiseParameter& LayerParameter::noise_param() const {
  const ::caffe::NoiseParameter* p = noise_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.noise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NoiseParameter*>(
      &::caffe::_NoiseParameter_default_instance_);
}
inline ::caffe::NoiseParameter* LayerParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.noise_param)
  clear_has_noise_param();
  ::caffe::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
inline ::caffe::NoiseParameter* LayerParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.noise_param)
  return noise_param_;
}
inline void LayerParameter::set_allocated_noise_param(::caffe::NoiseParameter* noise_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete noise_param_;
  }
  if (noise_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      noise_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, noise_param, submessage_arena);
    }
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  noise_param_ = noise_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.noise_param)
}

// optional .caffe.HotspotParameter hotspot_param = 208;
inline bool LayerParameter::has_hotspot_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_hotspot_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_hotspot_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_hotspot_param() {
  if (hotspot_param_ != NULL) hotspot_param_->Clear();
  clear_has_hotspot_param();
}
inline const ::caffe::HotspotParameter& LayerParameter::hotspot_param() const {
  const ::caffe::HotspotParameter* p = hotspot_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hotspot_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HotspotParameter*>(
      &::caffe::_HotspotParameter_default_instance_);
}
inline ::caffe::HotspotParameter* LayerParameter::release_hotspot_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hotspot_param)
  clear_has_hotspot_param();
  ::caffe::HotspotParameter* temp = hotspot_param_;
  hotspot_param_ = NULL;
  return temp;
}
inline ::caffe::HotspotParameter* LayerParameter::mutable_hotspot_param() {
  set_has_hotspot_param();
  if (hotspot_param_ == NULL) {
    hotspot_param_ = new ::caffe::HotspotParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hotspot_param)
  return hotspot_param_;
}
inline void LayerParameter::set_allocated_hotspot_param(::caffe::HotspotParameter* hotspot_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hotspot_param_;
  }
  if (hotspot_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hotspot_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hotspot_param, submessage_arena);
    }
    set_has_hotspot_param();
  } else {
    clear_has_hotspot_param();
  }
  hotspot_param_ = hotspot_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hotspot_param)
}

// optional .caffe.PredictBoxParameter predict_box_param = 209;
inline bool LayerParameter::has_predict_box_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_predict_box_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_predict_box_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_predict_box_param() {
  if (predict_box_param_ != NULL) predict_box_param_->Clear();
  clear_has_predict_box_param();
}
inline const ::caffe::PredictBoxParameter& LayerParameter::predict_box_param() const {
  const ::caffe::PredictBoxParameter* p = predict_box_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.predict_box_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PredictBoxParameter*>(
      &::caffe::_PredictBoxParameter_default_instance_);
}
inline ::caffe::PredictBoxParameter* LayerParameter::release_predict_box_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.predict_box_param)
  clear_has_predict_box_param();
  ::caffe::PredictBoxParameter* temp = predict_box_param_;
  predict_box_param_ = NULL;
  return temp;
}
inline ::caffe::PredictBoxParameter* LayerParameter::mutable_predict_box_param() {
  set_has_predict_box_param();
  if (predict_box_param_ == NULL) {
    predict_box_param_ = new ::caffe::PredictBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.predict_box_param)
  return predict_box_param_;
}
inline void LayerParameter::set_allocated_predict_box_param(::caffe::PredictBoxParameter* predict_box_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete predict_box_param_;
  }
  if (predict_box_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      predict_box_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, predict_box_param, submessage_arena);
    }
    set_has_predict_box_param();
  } else {
    clear_has_predict_box_param();
  }
  predict_box_param_ = predict_box_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.predict_box_param)
}

// optional .caffe.MILDataParameter mil_data_param = 5065028;
inline bool LayerParameter::has_mil_data_param() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_mil_data_param() {
  _has_bits_[2] |= 0x04000000u;
}
inline void LayerParameter::clear_has_mil_data_param() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void LayerParameter::clear_mil_data_param() {
  if (mil_data_param_ != NULL) mil_data_param_->Clear();
  clear_has_mil_data_param();
}
inline const ::caffe::MILDataParameter& LayerParameter::mil_data_param() const {
  const ::caffe::MILDataParameter* p = mil_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mil_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MILDataParameter*>(
      &::caffe::_MILDataParameter_default_instance_);
}
inline ::caffe::MILDataParameter* LayerParameter::release_mil_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mil_data_param)
  clear_has_mil_data_param();
  ::caffe::MILDataParameter* temp = mil_data_param_;
  mil_data_param_ = NULL;
  return temp;
}
inline ::caffe::MILDataParameter* LayerParameter::mutable_mil_data_param() {
  set_has_mil_data_param();
  if (mil_data_param_ == NULL) {
    mil_data_param_ = new ::caffe::MILDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mil_data_param)
  return mil_data_param_;
}
inline void LayerParameter::set_allocated_mil_data_param(::caffe::MILDataParameter* mil_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mil_data_param_;
  }
  if (mil_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mil_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mil_data_param, submessage_arena);
    }
    set_has_mil_data_param();
  } else {
    clear_has_mil_data_param();
  }
  mil_data_param_ = mil_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mil_data_param)
}

// optional .caffe.MILParameter mil_param = 5065036;
inline bool LayerParameter::has_mil_param() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_mil_param() {
  _has_bits_[2] |= 0x08000000u;
}
inline void LayerParameter::clear_has_mil_param() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void LayerParameter::clear_mil_param() {
  if (mil_param_ != NULL) mil_param_->Clear();
  clear_has_mil_param();
}
inline const ::caffe::MILParameter& LayerParameter::mil_param() const {
  const ::caffe::MILParameter* p = mil_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mil_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MILParameter*>(
      &::caffe::_MILParameter_default_instance_);
}
inline ::caffe::MILParameter* LayerParameter::release_mil_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mil_param)
  clear_has_mil_param();
  ::caffe::MILParameter* temp = mil_param_;
  mil_param_ = NULL;
  return temp;
}
inline ::caffe::MILParameter* LayerParameter::mutable_mil_param() {
  set_has_mil_param();
  if (mil_param_ == NULL) {
    mil_param_ = new ::caffe::MILParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mil_param)
  return mil_param_;
}
inline void LayerParameter::set_allocated_mil_param(::caffe::MILParameter* mil_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mil_param_;
  }
  if (mil_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mil_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mil_param, submessage_arena);
    }
    set_has_mil_param();
  } else {
    clear_has_mil_param();
  }
  mil_param_ = mil_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mil_param)
}

// optional .caffe.FCNDataParameter fcn_data_param = 210;
inline bool LayerParameter::has_fcn_data_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_fcn_data_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_fcn_data_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_fcn_data_param() {
  if (fcn_data_param_ != NULL) fcn_data_param_->Clear();
  clear_has_fcn_data_param();
}
inline const ::caffe::FCNDataParameter& LayerParameter::fcn_data_param() const {
  const ::caffe::FCNDataParameter* p = fcn_data_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.fcn_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FCNDataParameter*>(
      &::caffe::_FCNDataParameter_default_instance_);
}
inline ::caffe::FCNDataParameter* LayerParameter::release_fcn_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.fcn_data_param)
  clear_has_fcn_data_param();
  ::caffe::FCNDataParameter* temp = fcn_data_param_;
  fcn_data_param_ = NULL;
  return temp;
}
inline ::caffe::FCNDataParameter* LayerParameter::mutable_fcn_data_param() {
  set_has_fcn_data_param();
  if (fcn_data_param_ == NULL) {
    fcn_data_param_ = new ::caffe::FCNDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.fcn_data_param)
  return fcn_data_param_;
}
inline void LayerParameter::set_allocated_fcn_data_param(::caffe::FCNDataParameter* fcn_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fcn_data_param_;
  }
  if (fcn_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fcn_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fcn_data_param, submessage_arena);
    }
    set_has_fcn_data_param();
  } else {
    clear_has_fcn_data_param();
  }
  fcn_data_param_ = fcn_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.fcn_data_param)
}

// optional .caffe.CenterLossParameter center_loss_param = 211;
inline bool LayerParameter::has_center_loss_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_center_loss_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_center_loss_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_center_loss_param() {
  if (center_loss_param_ != NULL) center_loss_param_->Clear();
  clear_has_center_loss_param();
}
inline const ::caffe::CenterLossParameter& LayerParameter::center_loss_param() const {
  const ::caffe::CenterLossParameter* p = center_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.center_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::CenterLossParameter*>(
      &::caffe::_CenterLossParameter_default_instance_);
}
inline ::caffe::CenterLossParameter* LayerParameter::release_center_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.center_loss_param)
  clear_has_center_loss_param();
  ::caffe::CenterLossParameter* temp = center_loss_param_;
  center_loss_param_ = NULL;
  return temp;
}
inline ::caffe::CenterLossParameter* LayerParameter::mutable_center_loss_param() {
  set_has_center_loss_param();
  if (center_loss_param_ == NULL) {
    center_loss_param_ = new ::caffe::CenterLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.center_loss_param)
  return center_loss_param_;
}
inline void LayerParameter::set_allocated_center_loss_param(::caffe::CenterLossParameter* center_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete center_loss_param_;
  }
  if (center_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center_loss_param, submessage_arena);
    }
    set_has_center_loss_param();
  } else {
    clear_has_center_loss_param();
  }
  center_loss_param_ = center_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.center_loss_param)
}

// optional .caffe.FlipParameter flip_param = 212;
inline bool LayerParameter::has_flip_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_flip_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_flip_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_flip_param() {
  if (flip_param_ != NULL) flip_param_->Clear();
  clear_has_flip_param();
}
inline const ::caffe::FlipParameter& LayerParameter::flip_param() const {
  const ::caffe::FlipParameter* p = flip_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flip_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FlipParameter*>(
      &::caffe::_FlipParameter_default_instance_);
}
inline ::caffe::FlipParameter* LayerParameter::release_flip_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flip_param)
  clear_has_flip_param();
  ::caffe::FlipParameter* temp = flip_param_;
  flip_param_ = NULL;
  return temp;
}
inline ::caffe::FlipParameter* LayerParameter::mutable_flip_param() {
  set_has_flip_param();
  if (flip_param_ == NULL) {
    flip_param_ = new ::caffe::FlipParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flip_param)
  return flip_param_;
}
inline void LayerParameter::set_allocated_flip_param(::caffe::FlipParameter* flip_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete flip_param_;
  }
  if (flip_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      flip_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flip_param, submessage_arena);
    }
    set_has_flip_param();
  } else {
    clear_has_flip_param();
  }
  flip_param_ = flip_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flip_param)
}

// optional .caffe.InnerDistanceParameter inner_distance_param = 213;
inline bool LayerParameter::has_inner_distance_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_inner_distance_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_inner_distance_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_inner_distance_param() {
  if (inner_distance_param_ != NULL) inner_distance_param_->Clear();
  clear_has_inner_distance_param();
}
inline const ::caffe::InnerDistanceParameter& LayerParameter::inner_distance_param() const {
  const ::caffe::InnerDistanceParameter* p = inner_distance_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_distance_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InnerDistanceParameter*>(
      &::caffe::_InnerDistanceParameter_default_instance_);
}
inline ::caffe::InnerDistanceParameter* LayerParameter::release_inner_distance_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_distance_param)
  clear_has_inner_distance_param();
  ::caffe::InnerDistanceParameter* temp = inner_distance_param_;
  inner_distance_param_ = NULL;
  return temp;
}
inline ::caffe::InnerDistanceParameter* LayerParameter::mutable_inner_distance_param() {
  set_has_inner_distance_param();
  if (inner_distance_param_ == NULL) {
    inner_distance_param_ = new ::caffe::InnerDistanceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_distance_param)
  return inner_distance_param_;
}
inline void LayerParameter::set_allocated_inner_distance_param(::caffe::InnerDistanceParameter* inner_distance_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inner_distance_param_;
  }
  if (inner_distance_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inner_distance_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inner_distance_param, submessage_arena);
    }
    set_has_inner_distance_param();
  } else {
    clear_has_inner_distance_param();
  }
  inner_distance_param_ = inner_distance_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_distance_param)
}

// optional .caffe.NormalizeParameter normalize_param = 214;
inline bool LayerParameter::has_normalize_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_normalize_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_normalize_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_normalize_param() {
  if (normalize_param_ != NULL) normalize_param_->Clear();
  clear_has_normalize_param();
}
inline const ::caffe::NormalizeParameter& LayerParameter::normalize_param() const {
  const ::caffe::NormalizeParameter* p = normalize_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.normalize_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NormalizeParameter*>(
      &::caffe::_NormalizeParameter_default_instance_);
}
inline ::caffe::NormalizeParameter* LayerParameter::release_normalize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.normalize_param)
  clear_has_normalize_param();
  ::caffe::NormalizeParameter* temp = normalize_param_;
  normalize_param_ = NULL;
  return temp;
}
inline ::caffe::NormalizeParameter* LayerParameter::mutable_normalize_param() {
  set_has_normalize_param();
  if (normalize_param_ == NULL) {
    normalize_param_ = new ::caffe::NormalizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.normalize_param)
  return normalize_param_;
}
inline void LayerParameter::set_allocated_normalize_param(::caffe::NormalizeParameter* normalize_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete normalize_param_;
  }
  if (normalize_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      normalize_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normalize_param, submessage_arena);
    }
    set_has_normalize_param();
  } else {
    clear_has_normalize_param();
  }
  normalize_param_ = normalize_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.normalize_param)
}

// optional .caffe.GeneralContrastiveParameter general_contrastive_loss_param = 215;
inline bool LayerParameter::has_general_contrastive_loss_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_general_contrastive_loss_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_general_contrastive_loss_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_general_contrastive_loss_param() {
  if (general_contrastive_loss_param_ != NULL) general_contrastive_loss_param_->Clear();
  clear_has_general_contrastive_loss_param();
}
inline const ::caffe::GeneralContrastiveParameter& LayerParameter::general_contrastive_loss_param() const {
  const ::caffe::GeneralContrastiveParameter* p = general_contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.general_contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GeneralContrastiveParameter*>(
      &::caffe::_GeneralContrastiveParameter_default_instance_);
}
inline ::caffe::GeneralContrastiveParameter* LayerParameter::release_general_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.general_contrastive_loss_param)
  clear_has_general_contrastive_loss_param();
  ::caffe::GeneralContrastiveParameter* temp = general_contrastive_loss_param_;
  general_contrastive_loss_param_ = NULL;
  return temp;
}
inline ::caffe::GeneralContrastiveParameter* LayerParameter::mutable_general_contrastive_loss_param() {
  set_has_general_contrastive_loss_param();
  if (general_contrastive_loss_param_ == NULL) {
    general_contrastive_loss_param_ = new ::caffe::GeneralContrastiveParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.general_contrastive_loss_param)
  return general_contrastive_loss_param_;
}
inline void LayerParameter::set_allocated_general_contrastive_loss_param(::caffe::GeneralContrastiveParameter* general_contrastive_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete general_contrastive_loss_param_;
  }
  if (general_contrastive_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      general_contrastive_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, general_contrastive_loss_param, submessage_arena);
    }
    set_has_general_contrastive_loss_param();
  } else {
    clear_has_general_contrastive_loss_param();
  }
  general_contrastive_loss_param_ = general_contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.general_contrastive_loss_param)
}

// optional .caffe.SoftContrastiveParameter soft_contrastive_loss_param = 216;
inline bool LayerParameter::has_soft_contrastive_loss_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_soft_contrastive_loss_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_soft_contrastive_loss_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_soft_contrastive_loss_param() {
  if (soft_contrastive_loss_param_ != NULL) soft_contrastive_loss_param_->Clear();
  clear_has_soft_contrastive_loss_param();
}
inline const ::caffe::SoftContrastiveParameter& LayerParameter::soft_contrastive_loss_param() const {
  const ::caffe::SoftContrastiveParameter* p = soft_contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.soft_contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftContrastiveParameter*>(
      &::caffe::_SoftContrastiveParameter_default_instance_);
}
inline ::caffe::SoftContrastiveParameter* LayerParameter::release_soft_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.soft_contrastive_loss_param)
  clear_has_soft_contrastive_loss_param();
  ::caffe::SoftContrastiveParameter* temp = soft_contrastive_loss_param_;
  soft_contrastive_loss_param_ = NULL;
  return temp;
}
inline ::caffe::SoftContrastiveParameter* LayerParameter::mutable_soft_contrastive_loss_param() {
  set_has_soft_contrastive_loss_param();
  if (soft_contrastive_loss_param_ == NULL) {
    soft_contrastive_loss_param_ = new ::caffe::SoftContrastiveParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.soft_contrastive_loss_param)
  return soft_contrastive_loss_param_;
}
inline void LayerParameter::set_allocated_soft_contrastive_loss_param(::caffe::SoftContrastiveParameter* soft_contrastive_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete soft_contrastive_loss_param_;
  }
  if (soft_contrastive_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      soft_contrastive_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, soft_contrastive_loss_param, submessage_arena);
    }
    set_has_soft_contrastive_loss_param();
  } else {
    clear_has_soft_contrastive_loss_param();
  }
  soft_contrastive_loss_param_ = soft_contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.soft_contrastive_loss_param)
}

// optional .caffe.GeneralTripletParameter general_triplet_loss_param = 217;
inline bool LayerParameter::has_general_triplet_loss_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_general_triplet_loss_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_general_triplet_loss_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_general_triplet_loss_param() {
  if (general_triplet_loss_param_ != NULL) general_triplet_loss_param_->Clear();
  clear_has_general_triplet_loss_param();
}
inline const ::caffe::GeneralTripletParameter& LayerParameter::general_triplet_loss_param() const {
  const ::caffe::GeneralTripletParameter* p = general_triplet_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.general_triplet_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::GeneralTripletParameter*>(
      &::caffe::_GeneralTripletParameter_default_instance_);
}
inline ::caffe::GeneralTripletParameter* LayerParameter::release_general_triplet_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.general_triplet_loss_param)
  clear_has_general_triplet_loss_param();
  ::caffe::GeneralTripletParameter* temp = general_triplet_loss_param_;
  general_triplet_loss_param_ = NULL;
  return temp;
}
inline ::caffe::GeneralTripletParameter* LayerParameter::mutable_general_triplet_loss_param() {
  set_has_general_triplet_loss_param();
  if (general_triplet_loss_param_ == NULL) {
    general_triplet_loss_param_ = new ::caffe::GeneralTripletParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.general_triplet_loss_param)
  return general_triplet_loss_param_;
}
inline void LayerParameter::set_allocated_general_triplet_loss_param(::caffe::GeneralTripletParameter* general_triplet_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete general_triplet_loss_param_;
  }
  if (general_triplet_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      general_triplet_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, general_triplet_loss_param, submessage_arena);
    }
    set_has_general_triplet_loss_param();
  } else {
    clear_has_general_triplet_loss_param();
  }
  general_triplet_loss_param_ = general_triplet_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.general_triplet_loss_param)
}

// optional .caffe.SoftTruncationParameter soft_truncation_param = 218;
inline bool LayerParameter::has_soft_truncation_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_soft_truncation_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_soft_truncation_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_soft_truncation_param() {
  if (soft_truncation_param_ != NULL) soft_truncation_param_->Clear();
  clear_has_soft_truncation_param();
}
inline const ::caffe::SoftTruncationParameter& LayerParameter::soft_truncation_param() const {
  const ::caffe::SoftTruncationParameter* p = soft_truncation_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.soft_truncation_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftTruncationParameter*>(
      &::caffe::_SoftTruncationParameter_default_instance_);
}
inline ::caffe::SoftTruncationParameter* LayerParameter::release_soft_truncation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.soft_truncation_param)
  clear_has_soft_truncation_param();
  ::caffe::SoftTruncationParameter* temp = soft_truncation_param_;
  soft_truncation_param_ = NULL;
  return temp;
}
inline ::caffe::SoftTruncationParameter* LayerParameter::mutable_soft_truncation_param() {
  set_has_soft_truncation_param();
  if (soft_truncation_param_ == NULL) {
    soft_truncation_param_ = new ::caffe::SoftTruncationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.soft_truncation_param)
  return soft_truncation_param_;
}
inline void LayerParameter::set_allocated_soft_truncation_param(::caffe::SoftTruncationParameter* soft_truncation_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete soft_truncation_param_;
  }
  if (soft_truncation_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      soft_truncation_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, soft_truncation_param, submessage_arena);
    }
    set_has_soft_truncation_param();
  } else {
    clear_has_soft_truncation_param();
  }
  soft_truncation_param_ = soft_truncation_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.soft_truncation_param)
}

// optional .caffe.ProposalParameter proposal_param = 219;
inline bool LayerParameter::has_proposal_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_proposal_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_proposal_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_proposal_param() {
  if (proposal_param_ != NULL) proposal_param_->Clear();
  clear_has_proposal_param();
}
inline const ::caffe::ProposalParameter& LayerParameter::proposal_param() const {
  const ::caffe::ProposalParameter* p = proposal_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.proposal_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ProposalParameter*>(
      &::caffe::_ProposalParameter_default_instance_);
}
inline ::caffe::ProposalParameter* LayerParameter::release_proposal_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.proposal_param)
  clear_has_proposal_param();
  ::caffe::ProposalParameter* temp = proposal_param_;
  proposal_param_ = NULL;
  return temp;
}
inline ::caffe::ProposalParameter* LayerParameter::mutable_proposal_param() {
  set_has_proposal_param();
  if (proposal_param_ == NULL) {
    proposal_param_ = new ::caffe::ProposalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.proposal_param)
  return proposal_param_;
}
inline void LayerParameter::set_allocated_proposal_param(::caffe::ProposalParameter* proposal_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete proposal_param_;
  }
  if (proposal_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      proposal_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proposal_param, submessage_arena);
    }
    set_has_proposal_param();
  } else {
    clear_has_proposal_param();
  }
  proposal_param_ = proposal_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.proposal_param)
}

// optional .caffe.PSROIPoolingParameter psroi_pooling_param = 220;
inline bool LayerParameter::has_psroi_pooling_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_psroi_pooling_param() {
  _has_bits_[2] |= 0x00000020u;
}
inline void LayerParameter::clear_has_psroi_pooling_param() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void LayerParameter::clear_psroi_pooling_param() {
  if (psroi_pooling_param_ != NULL) psroi_pooling_param_->Clear();
  clear_has_psroi_pooling_param();
}
inline const ::caffe::PSROIPoolingParameter& LayerParameter::psroi_pooling_param() const {
  const ::caffe::PSROIPoolingParameter* p = psroi_pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.psroi_pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PSROIPoolingParameter*>(
      &::caffe::_PSROIPoolingParameter_default_instance_);
}
inline ::caffe::PSROIPoolingParameter* LayerParameter::release_psroi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.psroi_pooling_param)
  clear_has_psroi_pooling_param();
  ::caffe::PSROIPoolingParameter* temp = psroi_pooling_param_;
  psroi_pooling_param_ = NULL;
  return temp;
}
inline ::caffe::PSROIPoolingParameter* LayerParameter::mutable_psroi_pooling_param() {
  set_has_psroi_pooling_param();
  if (psroi_pooling_param_ == NULL) {
    psroi_pooling_param_ = new ::caffe::PSROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.psroi_pooling_param)
  return psroi_pooling_param_;
}
inline void LayerParameter::set_allocated_psroi_pooling_param(::caffe::PSROIPoolingParameter* psroi_pooling_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete psroi_pooling_param_;
  }
  if (psroi_pooling_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      psroi_pooling_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psroi_pooling_param, submessage_arena);
    }
    set_has_psroi_pooling_param();
  } else {
    clear_has_psroi_pooling_param();
  }
  psroi_pooling_param_ = psroi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.psroi_pooling_param)
}

// optional .caffe.PairwiseParameter pairwise_param = 221;
inline bool LayerParameter::has_pairwise_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_pairwise_param() {
  _has_bits_[2] |= 0x00000040u;
}
inline void LayerParameter::clear_has_pairwise_param() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void LayerParameter::clear_pairwise_param() {
  if (pairwise_param_ != NULL) pairwise_param_->Clear();
  clear_has_pairwise_param();
}
inline const ::caffe::PairwiseParameter& LayerParameter::pairwise_param() const {
  const ::caffe::PairwiseParameter* p = pairwise_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pairwise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PairwiseParameter*>(
      &::caffe::_PairwiseParameter_default_instance_);
}
inline ::caffe::PairwiseParameter* LayerParameter::release_pairwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pairwise_param)
  clear_has_pairwise_param();
  ::caffe::PairwiseParameter* temp = pairwise_param_;
  pairwise_param_ = NULL;
  return temp;
}
inline ::caffe::PairwiseParameter* LayerParameter::mutable_pairwise_param() {
  set_has_pairwise_param();
  if (pairwise_param_ == NULL) {
    pairwise_param_ = new ::caffe::PairwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pairwise_param)
  return pairwise_param_;
}
inline void LayerParameter::set_allocated_pairwise_param(::caffe::PairwiseParameter* pairwise_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pairwise_param_;
  }
  if (pairwise_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pairwise_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pairwise_param, submessage_arena);
    }
    set_has_pairwise_param();
  } else {
    clear_has_pairwise_param();
  }
  pairwise_param_ = pairwise_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pairwise_param)
}

// optional .caffe.SmoothL1Parameter smoothl1_param = 222;
inline bool LayerParameter::has_smoothl1_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_smoothl1_param() {
  _has_bits_[2] |= 0x00000080u;
}
inline void LayerParameter::clear_has_smoothl1_param() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void LayerParameter::clear_smoothl1_param() {
  if (smoothl1_param_ != NULL) smoothl1_param_->Clear();
  clear_has_smoothl1_param();
}
inline const ::caffe::SmoothL1Parameter& LayerParameter::smoothl1_param() const {
  const ::caffe::SmoothL1Parameter* p = smoothl1_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smoothl1_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SmoothL1Parameter*>(
      &::caffe::_SmoothL1Parameter_default_instance_);
}
inline ::caffe::SmoothL1Parameter* LayerParameter::release_smoothl1_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smoothl1_param)
  clear_has_smoothl1_param();
  ::caffe::SmoothL1Parameter* temp = smoothl1_param_;
  smoothl1_param_ = NULL;
  return temp;
}
inline ::caffe::SmoothL1Parameter* LayerParameter::mutable_smoothl1_param() {
  set_has_smoothl1_param();
  if (smoothl1_param_ == NULL) {
    smoothl1_param_ = new ::caffe::SmoothL1Parameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smoothl1_param)
  return smoothl1_param_;
}
inline void LayerParameter::set_allocated_smoothl1_param(::caffe::SmoothL1Parameter* smoothl1_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete smoothl1_param_;
  }
  if (smoothl1_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      smoothl1_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, smoothl1_param, submessage_arena);
    }
    set_has_smoothl1_param();
  } else {
    clear_has_smoothl1_param();
  }
  smoothl1_param_ = smoothl1_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smoothl1_param)
}

// optional .caffe.BatchContrastiveParameter batch_contrastive_loss_param = 223;
inline bool LayerParameter::has_batch_contrastive_loss_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_batch_contrastive_loss_param() {
  _has_bits_[2] |= 0x00000100u;
}
inline void LayerParameter::clear_has_batch_contrastive_loss_param() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void LayerParameter::clear_batch_contrastive_loss_param() {
  if (batch_contrastive_loss_param_ != NULL) batch_contrastive_loss_param_->Clear();
  clear_has_batch_contrastive_loss_param();
}
inline const ::caffe::BatchContrastiveParameter& LayerParameter::batch_contrastive_loss_param() const {
  const ::caffe::BatchContrastiveParameter* p = batch_contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BatchContrastiveParameter*>(
      &::caffe::_BatchContrastiveParameter_default_instance_);
}
inline ::caffe::BatchContrastiveParameter* LayerParameter::release_batch_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_contrastive_loss_param)
  clear_has_batch_contrastive_loss_param();
  ::caffe::BatchContrastiveParameter* temp = batch_contrastive_loss_param_;
  batch_contrastive_loss_param_ = NULL;
  return temp;
}
inline ::caffe::BatchContrastiveParameter* LayerParameter::mutable_batch_contrastive_loss_param() {
  set_has_batch_contrastive_loss_param();
  if (batch_contrastive_loss_param_ == NULL) {
    batch_contrastive_loss_param_ = new ::caffe::BatchContrastiveParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_contrastive_loss_param)
  return batch_contrastive_loss_param_;
}
inline void LayerParameter::set_allocated_batch_contrastive_loss_param(::caffe::BatchContrastiveParameter* batch_contrastive_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete batch_contrastive_loss_param_;
  }
  if (batch_contrastive_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      batch_contrastive_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, batch_contrastive_loss_param, submessage_arena);
    }
    set_has_batch_contrastive_loss_param();
  } else {
    clear_has_batch_contrastive_loss_param();
  }
  batch_contrastive_loss_param_ = batch_contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_contrastive_loss_param)
}

// optional .caffe.PermuteParameter permute_param = 224;
inline bool LayerParameter::has_permute_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_permute_param() {
  _has_bits_[2] |= 0x00000200u;
}
inline void LayerParameter::clear_has_permute_param() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void LayerParameter::clear_permute_param() {
  if (permute_param_ != NULL) permute_param_->Clear();
  clear_has_permute_param();
}
inline const ::caffe::PermuteParameter& LayerParameter::permute_param() const {
  const ::caffe::PermuteParameter* p = permute_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.permute_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PermuteParameter*>(
      &::caffe::_PermuteParameter_default_instance_);
}
inline ::caffe::PermuteParameter* LayerParameter::release_permute_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.permute_param)
  clear_has_permute_param();
  ::caffe::PermuteParameter* temp = permute_param_;
  permute_param_ = NULL;
  return temp;
}
inline ::caffe::PermuteParameter* LayerParameter::mutable_permute_param() {
  set_has_permute_param();
  if (permute_param_ == NULL) {
    permute_param_ = new ::caffe::PermuteParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.permute_param)
  return permute_param_;
}
inline void LayerParameter::set_allocated_permute_param(::caffe::PermuteParameter* permute_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete permute_param_;
  }
  if (permute_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      permute_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permute_param, submessage_arena);
    }
    set_has_permute_param();
  } else {
    clear_has_permute_param();
  }
  permute_param_ = permute_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.permute_param)
}

// optional .caffe.TruncationParameter truncation_param = 225;
inline bool LayerParameter::has_truncation_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_truncation_param() {
  _has_bits_[2] |= 0x00000400u;
}
inline void LayerParameter::clear_has_truncation_param() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void LayerParameter::clear_truncation_param() {
  if (truncation_param_ != NULL) truncation_param_->Clear();
  clear_has_truncation_param();
}
inline const ::caffe::TruncationParameter& LayerParameter::truncation_param() const {
  const ::caffe::TruncationParameter* p = truncation_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.truncation_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TruncationParameter*>(
      &::caffe::_TruncationParameter_default_instance_);
}
inline ::caffe::TruncationParameter* LayerParameter::release_truncation_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.truncation_param)
  clear_has_truncation_param();
  ::caffe::TruncationParameter* temp = truncation_param_;
  truncation_param_ = NULL;
  return temp;
}
inline ::caffe::TruncationParameter* LayerParameter::mutable_truncation_param() {
  set_has_truncation_param();
  if (truncation_param_ == NULL) {
    truncation_param_ = new ::caffe::TruncationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.truncation_param)
  return truncation_param_;
}
inline void LayerParameter::set_allocated_truncation_param(::caffe::TruncationParameter* truncation_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete truncation_param_;
  }
  if (truncation_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      truncation_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, truncation_param, submessage_arena);
    }
    set_has_truncation_param();
  } else {
    clear_has_truncation_param();
  }
  truncation_param_ = truncation_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.truncation_param)
}

// optional .caffe.NCAParameter nca_param = 226;
inline bool LayerParameter::has_nca_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_nca_param() {
  _has_bits_[2] |= 0x00000800u;
}
inline void LayerParameter::clear_has_nca_param() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void LayerParameter::clear_nca_param() {
  if (nca_param_ != NULL) nca_param_->Clear();
  clear_has_nca_param();
}
inline const ::caffe::NCAParameter& LayerParameter::nca_param() const {
  const ::caffe::NCAParameter* p = nca_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.nca_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NCAParameter*>(
      &::caffe::_NCAParameter_default_instance_);
}
inline ::caffe::NCAParameter* LayerParameter::release_nca_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.nca_param)
  clear_has_nca_param();
  ::caffe::NCAParameter* temp = nca_param_;
  nca_param_ = NULL;
  return temp;
}
inline ::caffe::NCAParameter* LayerParameter::mutable_nca_param() {
  set_has_nca_param();
  if (nca_param_ == NULL) {
    nca_param_ = new ::caffe::NCAParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.nca_param)
  return nca_param_;
}
inline void LayerParameter::set_allocated_nca_param(::caffe::NCAParameter* nca_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nca_param_;
  }
  if (nca_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nca_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nca_param, submessage_arena);
    }
    set_has_nca_param();
  } else {
    clear_has_nca_param();
  }
  nca_param_ = nca_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.nca_param)
}

// optional .caffe.LargeMarginInnerProductParameter largemargin_inner_product_param = 227;
inline bool LayerParameter::has_largemargin_inner_product_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_largemargin_inner_product_param() {
  _has_bits_[2] |= 0x00001000u;
}
inline void LayerParameter::clear_has_largemargin_inner_product_param() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void LayerParameter::clear_largemargin_inner_product_param() {
  if (largemargin_inner_product_param_ != NULL) largemargin_inner_product_param_->Clear();
  clear_has_largemargin_inner_product_param();
}
inline const ::caffe::LargeMarginInnerProductParameter& LayerParameter::largemargin_inner_product_param() const {
  const ::caffe::LargeMarginInnerProductParameter* p = largemargin_inner_product_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.largemargin_inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LargeMarginInnerProductParameter*>(
      &::caffe::_LargeMarginInnerProductParameter_default_instance_);
}
inline ::caffe::LargeMarginInnerProductParameter* LayerParameter::release_largemargin_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.largemargin_inner_product_param)
  clear_has_largemargin_inner_product_param();
  ::caffe::LargeMarginInnerProductParameter* temp = largemargin_inner_product_param_;
  largemargin_inner_product_param_ = NULL;
  return temp;
}
inline ::caffe::LargeMarginInnerProductParameter* LayerParameter::mutable_largemargin_inner_product_param() {
  set_has_largemargin_inner_product_param();
  if (largemargin_inner_product_param_ == NULL) {
    largemargin_inner_product_param_ = new ::caffe::LargeMarginInnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.largemargin_inner_product_param)
  return largemargin_inner_product_param_;
}
inline void LayerParameter::set_allocated_largemargin_inner_product_param(::caffe::LargeMarginInnerProductParameter* largemargin_inner_product_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete largemargin_inner_product_param_;
  }
  if (largemargin_inner_product_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      largemargin_inner_product_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, largemargin_inner_product_param, submessage_arena);
    }
    set_has_largemargin_inner_product_param();
  } else {
    clear_has_largemargin_inner_product_param();
  }
  largemargin_inner_product_param_ = largemargin_inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.largemargin_inner_product_param)
}

// optional .caffe.LabelSpecificRescaleParameter label_specific_rescale_param = 228;
inline bool LayerParameter::has_label_specific_rescale_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_label_specific_rescale_param() {
  _has_bits_[2] |= 0x00002000u;
}
inline void LayerParameter::clear_has_label_specific_rescale_param() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void LayerParameter::clear_label_specific_rescale_param() {
  if (label_specific_rescale_param_ != NULL) label_specific_rescale_param_->Clear();
  clear_has_label_specific_rescale_param();
}
inline const ::caffe::LabelSpecificRescaleParameter& LayerParameter::label_specific_rescale_param() const {
  const ::caffe::LabelSpecificRescaleParameter* p = label_specific_rescale_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_rescale_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LabelSpecificRescaleParameter*>(
      &::caffe::_LabelSpecificRescaleParameter_default_instance_);
}
inline ::caffe::LabelSpecificRescaleParameter* LayerParameter::release_label_specific_rescale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_rescale_param)
  clear_has_label_specific_rescale_param();
  ::caffe::LabelSpecificRescaleParameter* temp = label_specific_rescale_param_;
  label_specific_rescale_param_ = NULL;
  return temp;
}
inline ::caffe::LabelSpecificRescaleParameter* LayerParameter::mutable_label_specific_rescale_param() {
  set_has_label_specific_rescale_param();
  if (label_specific_rescale_param_ == NULL) {
    label_specific_rescale_param_ = new ::caffe::LabelSpecificRescaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_rescale_param)
  return label_specific_rescale_param_;
}
inline void LayerParameter::set_allocated_label_specific_rescale_param(::caffe::LabelSpecificRescaleParameter* label_specific_rescale_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_specific_rescale_param_;
  }
  if (label_specific_rescale_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label_specific_rescale_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label_specific_rescale_param, submessage_arena);
    }
    set_has_label_specific_rescale_param();
  } else {
    clear_has_label_specific_rescale_param();
  }
  label_specific_rescale_param_ = label_specific_rescale_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_rescale_param)
}

// optional .caffe.InfimumLossParamter infimum_loss_param = 229;
inline bool LayerParameter::has_infimum_loss_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_infimum_loss_param() {
  _has_bits_[2] |= 0x00004000u;
}
inline void LayerParameter::clear_has_infimum_loss_param() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void LayerParameter::clear_infimum_loss_param() {
  if (infimum_loss_param_ != NULL) infimum_loss_param_->Clear();
  clear_has_infimum_loss_param();
}
inline const ::caffe::InfimumLossParamter& LayerParameter::infimum_loss_param() const {
  const ::caffe::InfimumLossParamter* p = infimum_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infimum_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InfimumLossParamter*>(
      &::caffe::_InfimumLossParamter_default_instance_);
}
inline ::caffe::InfimumLossParamter* LayerParameter::release_infimum_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infimum_loss_param)
  clear_has_infimum_loss_param();
  ::caffe::InfimumLossParamter* temp = infimum_loss_param_;
  infimum_loss_param_ = NULL;
  return temp;
}
inline ::caffe::InfimumLossParamter* LayerParameter::mutable_infimum_loss_param() {
  set_has_infimum_loss_param();
  if (infimum_loss_param_ == NULL) {
    infimum_loss_param_ = new ::caffe::InfimumLossParamter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infimum_loss_param)
  return infimum_loss_param_;
}
inline void LayerParameter::set_allocated_infimum_loss_param(::caffe::InfimumLossParamter* infimum_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete infimum_loss_param_;
  }
  if (infimum_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      infimum_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, infimum_loss_param, submessage_arena);
    }
    set_has_infimum_loss_param();
  } else {
    clear_has_infimum_loss_param();
  }
  infimum_loss_param_ = infimum_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infimum_loss_param)
}

// optional .caffe.OrdinalRegressionParameter ordinal_regression_loss_param = 230;
inline bool LayerParameter::has_ordinal_regression_loss_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_ordinal_regression_loss_param() {
  _has_bits_[2] |= 0x00008000u;
}
inline void LayerParameter::clear_has_ordinal_regression_loss_param() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void LayerParameter::clear_ordinal_regression_loss_param() {
  if (ordinal_regression_loss_param_ != NULL) ordinal_regression_loss_param_->Clear();
  clear_has_ordinal_regression_loss_param();
}
inline const ::caffe::OrdinalRegressionParameter& LayerParameter::ordinal_regression_loss_param() const {
  const ::caffe::OrdinalRegressionParameter* p = ordinal_regression_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.ordinal_regression_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::OrdinalRegressionParameter*>(
      &::caffe::_OrdinalRegressionParameter_default_instance_);
}
inline ::caffe::OrdinalRegressionParameter* LayerParameter::release_ordinal_regression_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.ordinal_regression_loss_param)
  clear_has_ordinal_regression_loss_param();
  ::caffe::OrdinalRegressionParameter* temp = ordinal_regression_loss_param_;
  ordinal_regression_loss_param_ = NULL;
  return temp;
}
inline ::caffe::OrdinalRegressionParameter* LayerParameter::mutable_ordinal_regression_loss_param() {
  set_has_ordinal_regression_loss_param();
  if (ordinal_regression_loss_param_ == NULL) {
    ordinal_regression_loss_param_ = new ::caffe::OrdinalRegressionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.ordinal_regression_loss_param)
  return ordinal_regression_loss_param_;
}
inline void LayerParameter::set_allocated_ordinal_regression_loss_param(::caffe::OrdinalRegressionParameter* ordinal_regression_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ordinal_regression_loss_param_;
  }
  if (ordinal_regression_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ordinal_regression_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ordinal_regression_loss_param, submessage_arena);
    }
    set_has_ordinal_regression_loss_param();
  } else {
    clear_has_ordinal_regression_loss_param();
  }
  ordinal_regression_loss_param_ = ordinal_regression_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.ordinal_regression_loss_param)
}

// optional .caffe.ResizeParameter resize_param = 231;
inline bool LayerParameter::has_resize_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_resize_param() {
  _has_bits_[2] |= 0x00010000u;
}
inline void LayerParameter::clear_has_resize_param() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void LayerParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->Clear();
  clear_has_resize_param();
}
inline const ::caffe::ResizeParameter& LayerParameter::resize_param() const {
  const ::caffe::ResizeParameter* p = resize_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resize_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ResizeParameter*>(
      &::caffe::_ResizeParameter_default_instance_);
}
inline ::caffe::ResizeParameter* LayerParameter::release_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resize_param)
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline ::caffe::ResizeParameter* LayerParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) {
    resize_param_ = new ::caffe::ResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resize_param)
  return resize_param_;
}
inline void LayerParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resize_param_;
  }
  if (resize_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resize_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resize_param, submessage_arena);
    }
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  resize_param_ = resize_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resize_param)
}

// optional .caffe.MarginInnerProductParameter margin_inner_product_param = 232;
inline bool LayerParameter::has_margin_inner_product_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_margin_inner_product_param() {
  _has_bits_[2] |= 0x00020000u;
}
inline void LayerParameter::clear_has_margin_inner_product_param() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void LayerParameter::clear_margin_inner_product_param() {
  if (margin_inner_product_param_ != NULL) margin_inner_product_param_->Clear();
  clear_has_margin_inner_product_param();
}
inline const ::caffe::MarginInnerProductParameter& LayerParameter::margin_inner_product_param() const {
  const ::caffe::MarginInnerProductParameter* p = margin_inner_product_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.margin_inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MarginInnerProductParameter*>(
      &::caffe::_MarginInnerProductParameter_default_instance_);
}
inline ::caffe::MarginInnerProductParameter* LayerParameter::release_margin_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.margin_inner_product_param)
  clear_has_margin_inner_product_param();
  ::caffe::MarginInnerProductParameter* temp = margin_inner_product_param_;
  margin_inner_product_param_ = NULL;
  return temp;
}
inline ::caffe::MarginInnerProductParameter* LayerParameter::mutable_margin_inner_product_param() {
  set_has_margin_inner_product_param();
  if (margin_inner_product_param_ == NULL) {
    margin_inner_product_param_ = new ::caffe::MarginInnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.margin_inner_product_param)
  return margin_inner_product_param_;
}
inline void LayerParameter::set_allocated_margin_inner_product_param(::caffe::MarginInnerProductParameter* margin_inner_product_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete margin_inner_product_param_;
  }
  if (margin_inner_product_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      margin_inner_product_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, margin_inner_product_param, submessage_arena);
    }
    set_has_margin_inner_product_param();
  } else {
    clear_has_margin_inner_product_param();
  }
  margin_inner_product_param_ = margin_inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.margin_inner_product_param)
}

// optional .caffe.FeatureDecayLossParameter feature_decay_loss_param = 233;
inline bool LayerParameter::has_feature_decay_loss_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_feature_decay_loss_param() {
  _has_bits_[2] |= 0x00040000u;
}
inline void LayerParameter::clear_has_feature_decay_loss_param() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void LayerParameter::clear_feature_decay_loss_param() {
  if (feature_decay_loss_param_ != NULL) feature_decay_loss_param_->Clear();
  clear_has_feature_decay_loss_param();
}
inline const ::caffe::FeatureDecayLossParameter& LayerParameter::feature_decay_loss_param() const {
  const ::caffe::FeatureDecayLossParameter* p = feature_decay_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.feature_decay_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FeatureDecayLossParameter*>(
      &::caffe::_FeatureDecayLossParameter_default_instance_);
}
inline ::caffe::FeatureDecayLossParameter* LayerParameter::release_feature_decay_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.feature_decay_loss_param)
  clear_has_feature_decay_loss_param();
  ::caffe::FeatureDecayLossParameter* temp = feature_decay_loss_param_;
  feature_decay_loss_param_ = NULL;
  return temp;
}
inline ::caffe::FeatureDecayLossParameter* LayerParameter::mutable_feature_decay_loss_param() {
  set_has_feature_decay_loss_param();
  if (feature_decay_loss_param_ == NULL) {
    feature_decay_loss_param_ = new ::caffe::FeatureDecayLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.feature_decay_loss_param)
  return feature_decay_loss_param_;
}
inline void LayerParameter::set_allocated_feature_decay_loss_param(::caffe::FeatureDecayLossParameter* feature_decay_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete feature_decay_loss_param_;
  }
  if (feature_decay_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      feature_decay_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feature_decay_loss_param, submessage_arena);
    }
    set_has_feature_decay_loss_param();
  } else {
    clear_has_feature_decay_loss_param();
  }
  feature_decay_loss_param_ = feature_decay_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.feature_decay_loss_param)
}

// optional .caffe.ConfidencePenaltyLossParameter confidence_penalty_loss_param = 234;
inline bool LayerParameter::has_confidence_penalty_loss_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_confidence_penalty_loss_param() {
  _has_bits_[2] |= 0x00080000u;
}
inline void LayerParameter::clear_has_confidence_penalty_loss_param() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void LayerParameter::clear_confidence_penalty_loss_param() {
  if (confidence_penalty_loss_param_ != NULL) confidence_penalty_loss_param_->Clear();
  clear_has_confidence_penalty_loss_param();
}
inline const ::caffe::ConfidencePenaltyLossParameter& LayerParameter::confidence_penalty_loss_param() const {
  const ::caffe::ConfidencePenaltyLossParameter* p = confidence_penalty_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.confidence_penalty_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConfidencePenaltyLossParameter*>(
      &::caffe::_ConfidencePenaltyLossParameter_default_instance_);
}
inline ::caffe::ConfidencePenaltyLossParameter* LayerParameter::release_confidence_penalty_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.confidence_penalty_loss_param)
  clear_has_confidence_penalty_loss_param();
  ::caffe::ConfidencePenaltyLossParameter* temp = confidence_penalty_loss_param_;
  confidence_penalty_loss_param_ = NULL;
  return temp;
}
inline ::caffe::ConfidencePenaltyLossParameter* LayerParameter::mutable_confidence_penalty_loss_param() {
  set_has_confidence_penalty_loss_param();
  if (confidence_penalty_loss_param_ == NULL) {
    confidence_penalty_loss_param_ = new ::caffe::ConfidencePenaltyLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.confidence_penalty_loss_param)
  return confidence_penalty_loss_param_;
}
inline void LayerParameter::set_allocated_confidence_penalty_loss_param(::caffe::ConfidencePenaltyLossParameter* confidence_penalty_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete confidence_penalty_loss_param_;
  }
  if (confidence_penalty_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      confidence_penalty_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence_penalty_loss_param, submessage_arena);
    }
    set_has_confidence_penalty_loss_param();
  } else {
    clear_has_confidence_penalty_loss_param();
  }
  confidence_penalty_loss_param_ = confidence_penalty_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.confidence_penalty_loss_param)
}

// optional .caffe.FocalLossParameter focal_loss_param = 235;
inline bool LayerParameter::has_focal_loss_param() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_focal_loss_param() {
  _has_bits_[2] |= 0x00100000u;
}
inline void LayerParameter::clear_has_focal_loss_param() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void LayerParameter::clear_focal_loss_param() {
  if (focal_loss_param_ != NULL) focal_loss_param_->Clear();
  clear_has_focal_loss_param();
}
inline const ::caffe::FocalLossParameter& LayerParameter::focal_loss_param() const {
  const ::caffe::FocalLossParameter* p = focal_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.focal_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FocalLossParameter*>(
      &::caffe::_FocalLossParameter_default_instance_);
}
inline ::caffe::FocalLossParameter* LayerParameter::release_focal_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.focal_loss_param)
  clear_has_focal_loss_param();
  ::caffe::FocalLossParameter* temp = focal_loss_param_;
  focal_loss_param_ = NULL;
  return temp;
}
inline ::caffe::FocalLossParameter* LayerParameter::mutable_focal_loss_param() {
  set_has_focal_loss_param();
  if (focal_loss_param_ == NULL) {
    focal_loss_param_ = new ::caffe::FocalLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.focal_loss_param)
  return focal_loss_param_;
}
inline void LayerParameter::set_allocated_focal_loss_param(::caffe::FocalLossParameter* focal_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete focal_loss_param_;
  }
  if (focal_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      focal_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, focal_loss_param, submessage_arena);
    }
    set_has_focal_loss_param();
  } else {
    clear_has_focal_loss_param();
  }
  focal_loss_param_ = focal_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.focal_loss_param)
}

// optional .caffe.LabelSpecificMarginParameter label_specific_margin_param = 236;
inline bool LayerParameter::has_label_specific_margin_param() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_label_specific_margin_param() {
  _has_bits_[2] |= 0x00200000u;
}
inline void LayerParameter::clear_has_label_specific_margin_param() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void LayerParameter::clear_label_specific_margin_param() {
  if (label_specific_margin_param_ != NULL) label_specific_margin_param_->Clear();
  clear_has_label_specific_margin_param();
}
inline const ::caffe::LabelSpecificMarginParameter& LayerParameter::label_specific_margin_param() const {
  const ::caffe::LabelSpecificMarginParameter* p = label_specific_margin_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_margin_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LabelSpecificMarginParameter*>(
      &::caffe::_LabelSpecificMarginParameter_default_instance_);
}
inline ::caffe::LabelSpecificMarginParameter* LayerParameter::release_label_specific_margin_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_margin_param)
  clear_has_label_specific_margin_param();
  ::caffe::LabelSpecificMarginParameter* temp = label_specific_margin_param_;
  label_specific_margin_param_ = NULL;
  return temp;
}
inline ::caffe::LabelSpecificMarginParameter* LayerParameter::mutable_label_specific_margin_param() {
  set_has_label_specific_margin_param();
  if (label_specific_margin_param_ == NULL) {
    label_specific_margin_param_ = new ::caffe::LabelSpecificMarginParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_margin_param)
  return label_specific_margin_param_;
}
inline void LayerParameter::set_allocated_label_specific_margin_param(::caffe::LabelSpecificMarginParameter* label_specific_margin_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_specific_margin_param_;
  }
  if (label_specific_margin_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label_specific_margin_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label_specific_margin_param, submessage_arena);
    }
    set_has_label_specific_margin_param();
  } else {
    clear_has_label_specific_margin_param();
  }
  label_specific_margin_param_ = label_specific_margin_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_margin_param)
}

// optional .caffe.ChannelScaleParameter channel_scale_param = 237;
inline bool LayerParameter::has_channel_scale_param() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_channel_scale_param() {
  _has_bits_[2] |= 0x00400000u;
}
inline void LayerParameter::clear_has_channel_scale_param() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void LayerParameter::clear_channel_scale_param() {
  if (channel_scale_param_ != NULL) channel_scale_param_->Clear();
  clear_has_channel_scale_param();
}
inline const ::caffe::ChannelScaleParameter& LayerParameter::channel_scale_param() const {
  const ::caffe::ChannelScaleParameter* p = channel_scale_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.channel_scale_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ChannelScaleParameter*>(
      &::caffe::_ChannelScaleParameter_default_instance_);
}
inline ::caffe::ChannelScaleParameter* LayerParameter::release_channel_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.channel_scale_param)
  clear_has_channel_scale_param();
  ::caffe::ChannelScaleParameter* temp = channel_scale_param_;
  channel_scale_param_ = NULL;
  return temp;
}
inline ::caffe::ChannelScaleParameter* LayerParameter::mutable_channel_scale_param() {
  set_has_channel_scale_param();
  if (channel_scale_param_ == NULL) {
    channel_scale_param_ = new ::caffe::ChannelScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.channel_scale_param)
  return channel_scale_param_;
}
inline void LayerParameter::set_allocated_channel_scale_param(::caffe::ChannelScaleParameter* channel_scale_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_scale_param_;
  }
  if (channel_scale_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel_scale_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel_scale_param, submessage_arena);
    }
    set_has_channel_scale_param();
  } else {
    clear_has_channel_scale_param();
  }
  channel_scale_param_ = channel_scale_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.channel_scale_param)
}

// optional .caffe.LabelSpecificAffineParameter label_specific_affine_param = 238;
inline bool LayerParameter::has_label_specific_affine_param() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_label_specific_affine_param() {
  _has_bits_[2] |= 0x00800000u;
}
inline void LayerParameter::clear_has_label_specific_affine_param() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void LayerParameter::clear_label_specific_affine_param() {
  if (label_specific_affine_param_ != NULL) label_specific_affine_param_->Clear();
  clear_has_label_specific_affine_param();
}
inline const ::caffe::LabelSpecificAffineParameter& LayerParameter::label_specific_affine_param() const {
  const ::caffe::LabelSpecificAffineParameter* p = label_specific_affine_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_affine_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LabelSpecificAffineParameter*>(
      &::caffe::_LabelSpecificAffineParameter_default_instance_);
}
inline ::caffe::LabelSpecificAffineParameter* LayerParameter::release_label_specific_affine_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_affine_param)
  clear_has_label_specific_affine_param();
  ::caffe::LabelSpecificAffineParameter* temp = label_specific_affine_param_;
  label_specific_affine_param_ = NULL;
  return temp;
}
inline ::caffe::LabelSpecificAffineParameter* LayerParameter::mutable_label_specific_affine_param() {
  set_has_label_specific_affine_param();
  if (label_specific_affine_param_ == NULL) {
    label_specific_affine_param_ = new ::caffe::LabelSpecificAffineParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_affine_param)
  return label_specific_affine_param_;
}
inline void LayerParameter::set_allocated_label_specific_affine_param(::caffe::LabelSpecificAffineParameter* label_specific_affine_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_specific_affine_param_;
  }
  if (label_specific_affine_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label_specific_affine_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label_specific_affine_param, submessage_arena);
    }
    set_has_label_specific_affine_param();
  } else {
    clear_has_label_specific_affine_param();
  }
  label_specific_affine_param_ = label_specific_affine_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_affine_param)
}

// optional .caffe.LabelSpecificHardMarginParameter label_specific_hard_margin_param = 239;
inline bool LayerParameter::has_label_specific_hard_margin_param() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_label_specific_hard_margin_param() {
  _has_bits_[2] |= 0x01000000u;
}
inline void LayerParameter::clear_has_label_specific_hard_margin_param() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void LayerParameter::clear_label_specific_hard_margin_param() {
  if (label_specific_hard_margin_param_ != NULL) label_specific_hard_margin_param_->Clear();
  clear_has_label_specific_hard_margin_param();
}
inline const ::caffe::LabelSpecificHardMarginParameter& LayerParameter::label_specific_hard_margin_param() const {
  const ::caffe::LabelSpecificHardMarginParameter* p = label_specific_hard_margin_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_hard_margin_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LabelSpecificHardMarginParameter*>(
      &::caffe::_LabelSpecificHardMarginParameter_default_instance_);
}
inline ::caffe::LabelSpecificHardMarginParameter* LayerParameter::release_label_specific_hard_margin_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_hard_margin_param)
  clear_has_label_specific_hard_margin_param();
  ::caffe::LabelSpecificHardMarginParameter* temp = label_specific_hard_margin_param_;
  label_specific_hard_margin_param_ = NULL;
  return temp;
}
inline ::caffe::LabelSpecificHardMarginParameter* LayerParameter::mutable_label_specific_hard_margin_param() {
  set_has_label_specific_hard_margin_param();
  if (label_specific_hard_margin_param_ == NULL) {
    label_specific_hard_margin_param_ = new ::caffe::LabelSpecificHardMarginParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_hard_margin_param)
  return label_specific_hard_margin_param_;
}
inline void LayerParameter::set_allocated_label_specific_hard_margin_param(::caffe::LabelSpecificHardMarginParameter* label_specific_hard_margin_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_specific_hard_margin_param_;
  }
  if (label_specific_hard_margin_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label_specific_hard_margin_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label_specific_hard_margin_param, submessage_arena);
    }
    set_has_label_specific_hard_margin_param();
  } else {
    clear_has_label_specific_hard_margin_param();
  }
  label_specific_hard_margin_param_ = label_specific_hard_margin_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_hard_margin_param)
}

// optional .caffe.LabelSpecificAddParameter label_specific_add_param = 241;
inline bool LayerParameter::has_label_specific_add_param() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_label_specific_add_param() {
  _has_bits_[2] |= 0x02000000u;
}
inline void LayerParameter::clear_has_label_specific_add_param() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void LayerParameter::clear_label_specific_add_param() {
  if (label_specific_add_param_ != NULL) label_specific_add_param_->Clear();
  clear_has_label_specific_add_param();
}
inline const ::caffe::LabelSpecificAddParameter& LayerParameter::label_specific_add_param() const {
  const ::caffe::LabelSpecificAddParameter* p = label_specific_add_param_;
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.label_specific_add_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LabelSpecificAddParameter*>(
      &::caffe::_LabelSpecificAddParameter_default_instance_);
}
inline ::caffe::LabelSpecificAddParameter* LayerParameter::release_label_specific_add_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.label_specific_add_param)
  clear_has_label_specific_add_param();
  ::caffe::LabelSpecificAddParameter* temp = label_specific_add_param_;
  label_specific_add_param_ = NULL;
  return temp;
}
inline ::caffe::LabelSpecificAddParameter* LayerParameter::mutable_label_specific_add_param() {
  set_has_label_specific_add_param();
  if (label_specific_add_param_ == NULL) {
    label_specific_add_param_ = new ::caffe::LabelSpecificAddParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.label_specific_add_param)
  return label_specific_add_param_;
}
inline void LayerParameter::set_allocated_label_specific_add_param(::caffe::LabelSpecificAddParameter* label_specific_add_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_specific_add_param_;
  }
  if (label_specific_add_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      label_specific_add_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label_specific_add_param, submessage_arena);
    }
    set_has_label_specific_add_param();
  } else {
    clear_has_label_specific_add_param();
  }
  label_specific_add_param_ = label_specific_add_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.label_specific_add_param)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
#if LANG_CXX11
inline void TransformationParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.TransformationParameter.mean_file)
}
#endif
inline void TransformationParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

// optional uint32 crop_h = 8 [default = 0];
inline bool TransformationParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TransformationParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TransformationParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TransformationParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_h)
  return crop_h_;
}
inline void TransformationParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_h)
}

// optional uint32 crop_w = 9 [default = 0];
inline bool TransformationParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TransformationParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TransformationParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TransformationParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_w)
  return crop_w_;
}
inline void TransformationParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_w)
}

// optional bool center_crop = 10 [default = false];
inline bool TransformationParameter::has_center_crop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_center_crop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_center_crop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_center_crop() {
  center_crop_ = false;
  clear_has_center_crop();
}
inline bool TransformationParameter::center_crop() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.center_crop)
  return center_crop_;
}
inline void TransformationParameter::set_center_crop(bool value) {
  set_has_center_crop();
  center_crop_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.center_crop)
}

// optional float erase_ratio = 11 [default = 0];
inline bool TransformationParameter::has_erase_ratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TransformationParameter::set_has_erase_ratio() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TransformationParameter::clear_has_erase_ratio() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TransformationParameter::clear_erase_ratio() {
  erase_ratio_ = 0;
  clear_has_erase_ratio();
}
inline float TransformationParameter::erase_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.erase_ratio)
  return erase_ratio_;
}
inline void TransformationParameter::set_erase_ratio(float value) {
  set_has_erase_ratio();
  erase_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.erase_ratio)
}

// optional float scale_min = 12 [default = 0.02];
inline bool TransformationParameter::has_scale_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TransformationParameter::set_has_scale_min() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TransformationParameter::clear_has_scale_min() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TransformationParameter::clear_scale_min() {
  scale_min_ = 0.02f;
  clear_has_scale_min();
}
inline float TransformationParameter::scale_min() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale_min)
  return scale_min_;
}
inline void TransformationParameter::set_scale_min(float value) {
  set_has_scale_min();
  scale_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale_min)
}

// optional float scale_max = 13 [default = 0.4];
inline bool TransformationParameter::has_scale_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TransformationParameter::set_has_scale_max() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TransformationParameter::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TransformationParameter::clear_scale_max() {
  scale_max_ = 0.4f;
  clear_has_scale_max();
}
inline float TransformationParameter::scale_max() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale_max)
  return scale_max_;
}
inline void TransformationParameter::set_scale_max(float value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale_max)
}

// optional float aspect_min = 14 [default = 0.33];
inline bool TransformationParameter::has_aspect_min() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TransformationParameter::set_has_aspect_min() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TransformationParameter::clear_has_aspect_min() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TransformationParameter::clear_aspect_min() {
  aspect_min_ = 0.33f;
  clear_has_aspect_min();
}
inline float TransformationParameter::aspect_min() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.aspect_min)
  return aspect_min_;
}
inline void TransformationParameter::set_aspect_min(float value) {
  set_has_aspect_min();
  aspect_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.aspect_min)
}

// optional float aspect_max = 15 [default = 3];
inline bool TransformationParameter::has_aspect_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TransformationParameter::set_has_aspect_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TransformationParameter::clear_has_aspect_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TransformationParameter::clear_aspect_max() {
  aspect_max_ = 3;
  clear_has_aspect_max();
}
inline float TransformationParameter::aspect_max() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.aspect_max)
  return aspect_max_;
}
inline void TransformationParameter::set_aspect_max(float value) {
  set_has_aspect_max();
  aspect_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.aspect_max)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
inline ::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
inline void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

// optional bool min_is_better = 4 [default = false];
inline bool AccuracyParameter::has_min_is_better() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_min_is_better() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_min_is_better() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_min_is_better() {
  min_is_better_ = false;
  clear_has_min_is_better();
}
inline bool AccuracyParameter::min_is_better() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.min_is_better)
  return min_is_better_;
}
inline void AccuracyParameter::set_min_is_better(bool value) {
  set_has_min_is_better();
  min_is_better_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.min_is_better)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
inline void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
inline void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.99];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.99f;
  clear_has_moving_average_fraction();
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-005];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-005f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

// optional bool disable_mean = 4 [default = false];
inline bool BatchNormParameter::has_disable_mean() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatchNormParameter::set_has_disable_mean() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatchNormParameter::clear_has_disable_mean() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatchNormParameter::clear_disable_mean() {
  disable_mean_ = false;
  clear_has_disable_mean();
}
inline bool BatchNormParameter::disable_mean() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.disable_mean)
  return disable_mean_;
}
inline void BatchNormParameter::set_disable_mean(bool value) {
  set_has_disable_mean();
  disable_mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.disable_mean)
}

// optional bool disable_variance = 5 [default = false];
inline bool BatchNormParameter::has_disable_variance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatchNormParameter::set_has_disable_variance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatchNormParameter::clear_has_disable_variance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatchNormParameter::clear_disable_variance() {
  disable_variance_ = false;
  clear_has_disable_variance();
}
inline bool BatchNormParameter::disable_variance() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.disable_variance)
  return disable_variance_;
}
inline void BatchNormParameter::set_disable_variance(bool value) {
  set_has_disable_variance();
  disable_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.disable_variance)
}

// optional .caffe.FillerParameter scale_filler = 7;
inline bool BatchNormParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->Clear();
  clear_has_scale_filler();
}
inline const ::caffe::FillerParameter& BatchNormParameter::scale_filler() const {
  const ::caffe::FillerParameter* p = scale_filler_;
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.scale_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* BatchNormParameter::release_scale_filler() {
  // @@protoc_insertion_point(field_release:caffe.BatchNormParameter.scale_filler)
  clear_has_scale_filler();
  ::caffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* BatchNormParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) {
    scale_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BatchNormParameter.scale_filler)
  return scale_filler_;
}
inline void BatchNormParameter::set_allocated_scale_filler(::caffe::FillerParameter* scale_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scale_filler_;
  }
  if (scale_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale_filler, submessage_arena);
    }
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
  scale_filler_ = scale_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchNormParameter.scale_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool BatchNormParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& BatchNormParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* BatchNormParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.BatchNormParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* BatchNormParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BatchNormParameter.bias_filler)
  return bias_filler_;
}
inline void BatchNormParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchNormParameter.bias_filler)
}

// optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
inline bool BatchNormParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BatchNormParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BatchNormParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BatchNormParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::BatchNormParameter_Engine BatchNormParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.engine)
  return static_cast< ::caffe::BatchNormParameter_Engine >(engine_);
}
inline void BatchNormParameter::set_engine(::caffe::BatchNormParameter_Engine value) {
  assert(::caffe::BatchNormParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.engine)
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
inline void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
inline void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& BiasParameter::filler() const {
  const ::caffe::FillerParameter* p = filler_;
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
inline void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filler_;
  }
  if (filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    set_has_filler();
  } else {
    clear_has_filler();
  }
  filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

// optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
inline bool ConvolutionParameter::has_cudnn_convolution_algo_seeker() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_cudnn_convolution_algo_seeker() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_cudnn_convolution_algo_seeker() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_cudnn_convolution_algo_seeker() {
  cudnn_convolution_algo_seeker_ = 1;
  clear_has_cudnn_convolution_algo_seeker();
}
inline ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::cudnn_convolution_algo_seeker() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
  return static_cast< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker >(cudnn_convolution_algo_seeker_);
}
inline void ConvolutionParameter::set_cudnn_convolution_algo_seeker(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value) {
  assert(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value));
  set_has_cudnn_convolution_algo_seeker();
  cudnn_convolution_algo_seeker_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
}

// repeated uint32 shape_offset = 20;
inline int ConvolutionParameter::shape_offset_size() const {
  return shape_offset_.size();
}
inline void ConvolutionParameter::clear_shape_offset() {
  shape_offset_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::shape_offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.shape_offset)
  return shape_offset_.Get(index);
}
inline void ConvolutionParameter::set_shape_offset(int index, ::google::protobuf::uint32 value) {
  shape_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.shape_offset)
}
inline void ConvolutionParameter::add_shape_offset(::google::protobuf::uint32 value) {
  shape_offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.shape_offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::shape_offset() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.shape_offset)
  return shape_offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_shape_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.shape_offset)
  return &shape_offset_;
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.axis)
  return axis_;
}
inline void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::offset_size() const {
  return offset_.size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.offset)
  return offset_.Get(index);
}
inline void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.CropParameter.offset)
}
inline void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:caffe.CropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CropParameter.offset)
  return &offset_;
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena();
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
#if LANG_CXX11
inline void DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.source)
}
#endif
inline void DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
#if LANG_CXX11
inline void DataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.DataParameter.mean_file)
}
#endif
inline void DataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
inline void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

// optional bool sqrt_scale = 2 [default = false];
inline bool DropoutParameter::has_sqrt_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_sqrt_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_sqrt_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_sqrt_scale() {
  sqrt_scale_ = false;
  clear_has_sqrt_scale();
}
inline bool DropoutParameter::sqrt_scale() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.sqrt_scale)
  return sqrt_scale_;
}
inline void DropoutParameter::set_sqrt_scale(bool value) {
  set_has_sqrt_scale();
  sqrt_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.sqrt_scale)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
inline int DummyDataParameter::shape_size() const {
  return shape_.size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
inline void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
inline void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
inline ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
inline void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
inline void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
inline void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
inline void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
inline void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
inline ::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
inline void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena();
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
#if LANG_CXX11
inline void HDF5DataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5DataParameter.source)
}
#endif
inline void HDF5DataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena();
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
#if LANG_CXX11
inline void HDF5OutputParameter::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.HDF5OutputParameter.file_name)
}
#endif
inline void HDF5OutputParameter::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena();
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
#if LANG_CXX11
inline void ImageDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.source)
}
#endif
inline void ImageDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional bool face_transform = 13 [default = false];
inline bool ImageDataParameter::has_face_transform() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_face_transform() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_face_transform() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_face_transform() {
  face_transform_ = false;
  clear_has_face_transform();
}
inline bool ImageDataParameter::face_transform() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.face_transform)
  return face_transform_;
}
inline void ImageDataParameter::set_face_transform(bool value) {
  set_has_face_transform();
  face_transform_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.face_transform)
}

// optional float max_shear_ratio = 14 [default = 0];
inline bool ImageDataParameter::has_max_shear_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_max_shear_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_max_shear_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_max_shear_ratio() {
  max_shear_ratio_ = 0;
  clear_has_max_shear_ratio();
}
inline float ImageDataParameter::max_shear_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_shear_ratio)
  return max_shear_ratio_;
}
inline void ImageDataParameter::set_max_shear_ratio(float value) {
  set_has_max_shear_ratio();
  max_shear_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_shear_ratio)
}

// optional float max_aspect_ratio = 15 [default = 0];
inline bool ImageDataParameter::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImageDataParameter::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImageDataParameter::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImageDataParameter::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 0;
  clear_has_max_aspect_ratio();
}
inline float ImageDataParameter::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_aspect_ratio)
  return max_aspect_ratio_;
}
inline void ImageDataParameter::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_aspect_ratio)
}

// optional float max_rotate_angle = 16 [default = 0];
inline bool ImageDataParameter::has_max_rotate_angle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ImageDataParameter::set_has_max_rotate_angle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ImageDataParameter::clear_has_max_rotate_angle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ImageDataParameter::clear_max_rotate_angle() {
  max_rotate_angle_ = 0;
  clear_has_max_rotate_angle();
}
inline float ImageDataParameter::max_rotate_angle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_rotate_angle)
  return max_rotate_angle_;
}
inline void ImageDataParameter::set_max_rotate_angle(float value) {
  set_has_max_rotate_angle();
  max_rotate_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_rotate_angle)
}

// optional float min_random_scale = 17 [default = 1];
inline bool ImageDataParameter::has_min_random_scale() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ImageDataParameter::set_has_min_random_scale() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ImageDataParameter::clear_has_min_random_scale() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ImageDataParameter::clear_min_random_scale() {
  min_random_scale_ = 1;
  clear_has_min_random_scale();
}
inline float ImageDataParameter::min_random_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.min_random_scale)
  return min_random_scale_;
}
inline void ImageDataParameter::set_min_random_scale(float value) {
  set_has_min_random_scale();
  min_random_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.min_random_scale)
}

// optional float max_random_scale = 18 [default = 1];
inline bool ImageDataParameter::has_max_random_scale() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ImageDataParameter::set_has_max_random_scale() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ImageDataParameter::clear_has_max_random_scale() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ImageDataParameter::clear_max_random_scale() {
  max_random_scale_ = 1;
  clear_has_max_random_scale();
}
inline float ImageDataParameter::max_random_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_random_scale)
  return max_random_scale_;
}
inline void ImageDataParameter::set_max_random_scale(float value) {
  set_has_max_random_scale();
  max_random_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_random_scale)
}

// optional uint32 max_random_shift = 19 [default = 0];
inline bool ImageDataParameter::has_max_random_shift() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ImageDataParameter::set_has_max_random_shift() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ImageDataParameter::clear_has_max_random_shift() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ImageDataParameter::clear_max_random_shift() {
  max_random_shift_ = 0u;
  clear_has_max_random_shift();
}
inline ::google::protobuf::uint32 ImageDataParameter::max_random_shift() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.max_random_shift)
  return max_random_shift_;
}
inline void ImageDataParameter::set_max_random_shift(::google::protobuf::uint32 value) {
  set_has_max_random_shift();
  max_random_shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.max_random_shift)
}

// optional bool face_mirror = 20 [default = false];
inline bool ImageDataParameter::has_face_mirror() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_face_mirror() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_face_mirror() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_face_mirror() {
  face_mirror_ = false;
  clear_has_face_mirror();
}
inline bool ImageDataParameter::face_mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.face_mirror)
  return face_mirror_;
}
inline void ImageDataParameter::set_face_mirror(bool value) {
  set_has_face_mirror();
  face_mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.face_mirror)
}

// optional uint32 face_point_num = 21 [default = 0];
inline bool ImageDataParameter::has_face_point_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImageDataParameter::set_has_face_point_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImageDataParameter::clear_has_face_point_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImageDataParameter::clear_face_point_num() {
  face_point_num_ = 0u;
  clear_has_face_point_num();
}
inline ::google::protobuf::uint32 ImageDataParameter::face_point_num() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.face_point_num)
  return face_point_num_;
}
inline void ImageDataParameter::set_face_point_num(::google::protobuf::uint32 value) {
  set_has_face_point_num();
  face_point_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.face_point_num)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
#if LANG_CXX11
inline void ImageDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.mean_file)
}
#endif
inline void ImageDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
#if LANG_CXX11
inline void ImageDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.ImageDataParameter.root_folder)
}
#endif
inline void ImageDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

// optional bool balance_class = 22 [default = false];
inline bool ImageDataParameter::has_balance_class() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ImageDataParameter::set_has_balance_class() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ImageDataParameter::clear_has_balance_class() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ImageDataParameter::clear_balance_class() {
  balance_class_ = false;
  clear_has_balance_class();
}
inline bool ImageDataParameter::balance_class() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.balance_class)
  return balance_class_;
}
inline void ImageDataParameter::set_balance_class(bool value) {
  set_has_balance_class();
  balance_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.balance_class)
}

// optional uint32 balance_by = 23 [default = 0];
inline bool ImageDataParameter::has_balance_by() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ImageDataParameter::set_has_balance_by() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ImageDataParameter::clear_has_balance_by() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ImageDataParameter::clear_balance_by() {
  balance_by_ = 0u;
  clear_has_balance_by();
}
inline ::google::protobuf::uint32 ImageDataParameter::balance_by() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.balance_by)
  return balance_by_;
}
inline void ImageDataParameter::set_balance_by(::google::protobuf::uint32 value) {
  set_has_balance_by();
  balance_by_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.balance_by)
}

// optional uint32 label_cut_start = 24 [default = 0];
inline bool ImageDataParameter::has_label_cut_start() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ImageDataParameter::set_has_label_cut_start() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ImageDataParameter::clear_has_label_cut_start() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ImageDataParameter::clear_label_cut_start() {
  label_cut_start_ = 0u;
  clear_has_label_cut_start();
}
inline ::google::protobuf::uint32 ImageDataParameter::label_cut_start() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.label_cut_start)
  return label_cut_start_;
}
inline void ImageDataParameter::set_label_cut_start(::google::protobuf::uint32 value) {
  set_has_label_cut_start();
  label_cut_start_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.label_cut_start)
}

// optional uint32 label_cut_end = 25 [default = 0];
inline bool ImageDataParameter::has_label_cut_end() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ImageDataParameter::set_has_label_cut_end() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ImageDataParameter::clear_has_label_cut_end() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ImageDataParameter::clear_label_cut_end() {
  label_cut_end_ = 0u;
  clear_has_label_cut_end();
}
inline ::google::protobuf::uint32 ImageDataParameter::label_cut_end() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.label_cut_end)
  return label_cut_end_;
}
inline void ImageDataParameter::set_label_cut_end(::google::protobuf::uint32 value) {
  set_has_label_cut_end();
  label_cut_end_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.label_cut_end)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena();
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
#if LANG_CXX11
inline void InfogainLossParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InfogainLossParameter.source)
}
#endif
inline void InfogainLossParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// optional int32 axis = 2 [default = 1];
inline bool InfogainLossParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfogainLossParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfogainLossParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfogainLossParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InfogainLossParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.axis)
  return axis_;
}
inline void InfogainLossParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.axis)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.transpose)
  return transpose_;
}
inline void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.transpose)
}

// optional bool normalize = 7 [default = false];
inline bool InnerProductParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool InnerProductParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.normalize)
  return normalize_;
}
inline void InnerProductParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.normalize)
}

// -------------------------------------------------------------------

// InnerDistanceParameter

// optional uint32 num_output = 1;
inline bool InnerDistanceParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerDistanceParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerDistanceParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerDistanceParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerDistanceParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.num_output)
  return num_output_;
}
inline void InnerDistanceParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerDistanceParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InnerDistanceParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InnerDistanceParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InnerDistanceParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerDistanceParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.bias_term)
  return bias_term_;
}
inline void InnerDistanceParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerDistanceParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerDistanceParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerDistanceParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerDistanceParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerDistanceParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* InnerDistanceParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerDistanceParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* InnerDistanceParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerDistanceParameter.weight_filler)
  return weight_filler_;
}
inline void InnerDistanceParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerDistanceParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerDistanceParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerDistanceParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerDistanceParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerDistanceParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerDistanceParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* InnerDistanceParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerDistanceParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* InnerDistanceParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerDistanceParameter.bias_filler)
  return bias_filler_;
}
inline void InnerDistanceParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerDistanceParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerDistanceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InnerDistanceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InnerDistanceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InnerDistanceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerDistanceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.axis)
  return axis_;
}
inline void InnerDistanceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerDistanceParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerDistanceParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerDistanceParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerDistanceParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool InnerDistanceParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.transpose)
  return transpose_;
}
inline void InnerDistanceParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.transpose)
}

// optional string distance_type = 7 [default = "L2"];
inline bool InnerDistanceParameter::has_distance_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerDistanceParameter::set_has_distance_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerDistanceParameter::clear_has_distance_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerDistanceParameter::clear_distance_type() {
  distance_type_.ClearToDefaultNoArena(&::caffe::InnerDistanceParameter::_default_distance_type_.get());
  clear_has_distance_type();
}
inline const ::std::string& InnerDistanceParameter::distance_type() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.distance_type)
  return distance_type_.GetNoArena();
}
inline void InnerDistanceParameter::set_distance_type(const ::std::string& value) {
  set_has_distance_type();
  distance_type_.SetNoArena(&::caffe::InnerDistanceParameter::_default_distance_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.distance_type)
}
#if LANG_CXX11
inline void InnerDistanceParameter::set_distance_type(::std::string&& value) {
  set_has_distance_type();
  distance_type_.SetNoArena(
    &::caffe::InnerDistanceParameter::_default_distance_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.InnerDistanceParameter.distance_type)
}
#endif
inline void InnerDistanceParameter::set_distance_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_distance_type();
  distance_type_.SetNoArena(&::caffe::InnerDistanceParameter::_default_distance_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InnerDistanceParameter.distance_type)
}
inline void InnerDistanceParameter::set_distance_type(const char* value, size_t size) {
  set_has_distance_type();
  distance_type_.SetNoArena(&::caffe::InnerDistanceParameter::_default_distance_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InnerDistanceParameter.distance_type)
}
inline ::std::string* InnerDistanceParameter::mutable_distance_type() {
  set_has_distance_type();
  // @@protoc_insertion_point(field_mutable:caffe.InnerDistanceParameter.distance_type)
  return distance_type_.MutableNoArena(&::caffe::InnerDistanceParameter::_default_distance_type_.get());
}
inline ::std::string* InnerDistanceParameter::release_distance_type() {
  // @@protoc_insertion_point(field_release:caffe.InnerDistanceParameter.distance_type)
  clear_has_distance_type();
  return distance_type_.ReleaseNoArena(&::caffe::InnerDistanceParameter::_default_distance_type_.get());
}
inline void InnerDistanceParameter::set_allocated_distance_type(::std::string* distance_type) {
  if (distance_type != NULL) {
    set_has_distance_type();
  } else {
    clear_has_distance_type();
  }
  distance_type_.SetAllocatedNoArena(&::caffe::InnerDistanceParameter::_default_distance_type_.get(), distance_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerDistanceParameter.distance_type)
}

// optional bool normalize = 8 [default = false];
inline bool InnerDistanceParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerDistanceParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerDistanceParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerDistanceParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool InnerDistanceParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.normalize)
  return normalize_;
}
inline void InnerDistanceParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.normalize)
}

// optional bool update_center_only = 9 [default = false];
inline bool InnerDistanceParameter::has_update_center_only() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InnerDistanceParameter::set_has_update_center_only() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InnerDistanceParameter::clear_has_update_center_only() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InnerDistanceParameter::clear_update_center_only() {
  update_center_only_ = false;
  clear_has_update_center_only();
}
inline bool InnerDistanceParameter::update_center_only() const {
  // @@protoc_insertion_point(field_get:caffe.InnerDistanceParameter.update_center_only)
  return update_center_only_;
}
inline void InnerDistanceParameter::set_update_center_only(bool value) {
  set_has_update_center_only();
  update_center_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerDistanceParameter.update_center_only)
}

// -------------------------------------------------------------------

// InputParameter

// repeated .caffe.BlobShape shape = 1;
inline int InputParameter::shape_size() const {
  return shape_.size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
inline void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
inline void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
inline void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

// optional bool transpose = 5 [default = false];
inline bool MemoryDataParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemoryDataParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MemoryDataParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MemoryDataParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool MemoryDataParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.transpose)
  return transpose_;
}
inline void MemoryDataParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.transpose)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-009];
inline bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-009f;
  clear_has_eps();
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
inline void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

// -------------------------------------------------------------------

// ParameterParameter

// optional .caffe.BlobShape shape = 1;
inline bool ParameterParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterParameter::clear_shape() {
  if (shape_ != NULL) shape_->Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ParameterParameter::shape() const {
  const ::caffe::BlobShape* p = shape_;
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BlobShape*>(
      &::caffe::_BlobShape_default_instance_);
}
inline ::caffe::BlobShape* ParameterParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ParameterParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::caffe::BlobShape* ParameterParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.shape)
  return shape_;
}
inline void ParameterParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.shape)
}

// optional .caffe.FillerParameter blob_filler = 2;
inline bool ParameterParameter::has_blob_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParameterParameter::set_has_blob_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParameterParameter::clear_has_blob_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParameterParameter::clear_blob_filler() {
  if (blob_filler_ != NULL) blob_filler_->Clear();
  clear_has_blob_filler();
}
inline const ::caffe::FillerParameter& ParameterParameter::blob_filler() const {
  const ::caffe::FillerParameter* p = blob_filler_;
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.blob_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* ParameterParameter::release_blob_filler() {
  // @@protoc_insertion_point(field_release:caffe.ParameterParameter.blob_filler)
  clear_has_blob_filler();
  ::caffe::FillerParameter* temp = blob_filler_;
  blob_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* ParameterParameter::mutable_blob_filler() {
  set_has_blob_filler();
  if (blob_filler_ == NULL) {
    blob_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.blob_filler)
  return blob_filler_;
}
inline void ParameterParameter::set_allocated_blob_filler(::caffe::FillerParameter* blob_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete blob_filler_;
  }
  if (blob_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blob_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blob_filler, submessage_arena);
    }
    set_has_blob_filler();
  } else {
    clear_has_blob_filler();
  }
  blob_filler_ = blob_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.blob_filler)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

// optional float blobs_lr = 13;
inline bool PoolingParameter::has_blobs_lr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_blobs_lr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_blobs_lr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_blobs_lr() {
  blobs_lr_ = 0;
  clear_has_blobs_lr();
}
inline float PoolingParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.blobs_lr)
  return blobs_lr_;
}
inline void PoolingParameter::set_blobs_lr(float value) {
  set_has_blobs_lr();
  blobs_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.blobs_lr)
}

// optional float blobs_a_min = 14 [default = 0.0001];
inline bool PoolingParameter::has_blobs_a_min() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PoolingParameter::set_has_blobs_a_min() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PoolingParameter::clear_has_blobs_a_min() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PoolingParameter::clear_blobs_a_min() {
  blobs_a_min_ = 0.0001f;
  clear_has_blobs_a_min();
}
inline float PoolingParameter::blobs_a_min() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.blobs_a_min)
  return blobs_a_min_;
}
inline void PoolingParameter::set_blobs_a_min(float value) {
  set_has_blobs_a_min();
  blobs_a_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.blobs_a_min)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena();
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
#if LANG_CXX11
inline void PythonParameter::set_module(::std::string&& value) {
  set_has_module();
  module_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.module)
}
#endif
inline void PythonParameter::set_module(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena();
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
#if LANG_CXX11
inline void PythonParameter::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.layer)
}
#endif
inline void PythonParameter::set_layer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena();
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
#if LANG_CXX11
inline void PythonParameter::set_param_str(::std::string&& value) {
  set_has_param_str();
  param_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.PythonParameter.param_str)
}
#endif
inline void PythonParameter::set_param_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
inline bool RecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.num_output)
  return num_output_;
}
inline void RecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.num_output)
}

// optional .caffe.FillerParameter weight_filler = 2;
inline bool RecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& RecurrentParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* RecurrentParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* RecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.weight_filler)
  return weight_filler_;
}
inline void RecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 3;
inline bool RecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& RecurrentParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* RecurrentParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* RecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.bias_filler)
  return bias_filler_;
}
inline void RecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
inline bool RecurrentParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecurrentParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecurrentParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecurrentParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.debug_info)
  return debug_info_;
}
inline void RecurrentParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.debug_info)
}

// optional bool expose_hidden = 5 [default = false];
inline bool RecurrentParameter::has_expose_hidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecurrentParameter::set_has_expose_hidden() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecurrentParameter::clear_has_expose_hidden() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecurrentParameter::clear_expose_hidden() {
  expose_hidden_ = false;
  clear_has_expose_hidden();
}
inline bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.expose_hidden)
  return expose_hidden_;
}
inline void RecurrentParameter::set_expose_hidden(bool value) {
  set_has_expose_hidden();
  expose_hidden_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.expose_hidden)
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
inline void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
inline void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
inline void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ReshapeParameter::shape() const {
  const ::caffe::BlobShape* p = shape_;
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BlobShape*>(
      &::caffe::_BlobShape_default_instance_);
}
inline ::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
inline void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
inline void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
inline void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::filler() const {
  const ::caffe::FillerParameter* p = filler_;
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
inline void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filler_;
  }
  if (filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    set_has_filler();
  } else {
    clear_has_filler();
  }
  filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
inline void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
inline void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

// optional float min_value = 6;
inline bool ScaleParameter::has_min_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaleParameter::set_has_min_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaleParameter::clear_has_min_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScaleParameter::clear_min_value() {
  min_value_ = 0;
  clear_has_min_value();
}
inline float ScaleParameter::min_value() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.min_value)
  return min_value_;
}
inline void ScaleParameter::set_min_value(float value) {
  set_has_min_value();
  min_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.min_value)
}

// optional float max_value = 7;
inline bool ScaleParameter::has_max_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaleParameter::set_has_max_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaleParameter::clear_has_max_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaleParameter::clear_max_value() {
  max_value_ = 0;
  clear_has_max_value();
}
inline float ScaleParameter::max_value() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.max_value)
  return max_value_;
}
inline void ScaleParameter::set_max_value(float value) {
  set_has_max_value();
  max_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.max_value)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
inline void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

// optional float hard_ratio = 3 [default = 1];
inline bool SoftmaxParameter::has_hard_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SoftmaxParameter::set_has_hard_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SoftmaxParameter::clear_has_hard_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SoftmaxParameter::clear_hard_ratio() {
  hard_ratio_ = 1;
  clear_has_hard_ratio();
}
inline float SoftmaxParameter::hard_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.hard_ratio)
  return hard_ratio_;
}
inline void SoftmaxParameter::set_hard_ratio(float value) {
  set_has_hard_ratio();
  hard_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.hard_ratio)
}

// repeated float class_weight = 4;
inline int SoftmaxParameter::class_weight_size() const {
  return class_weight_.size();
}
inline void SoftmaxParameter::clear_class_weight() {
  class_weight_.Clear();
}
inline float SoftmaxParameter::class_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.class_weight)
  return class_weight_.Get(index);
}
inline void SoftmaxParameter::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.class_weight)
}
inline void SoftmaxParameter::add_class_weight(float value) {
  class_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SoftmaxParameter.class_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
SoftmaxParameter::class_weight() const {
  // @@protoc_insertion_point(field_list:caffe.SoftmaxParameter.class_weight)
  return class_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
SoftmaxParameter::mutable_class_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SoftmaxParameter.class_weight)
  return &class_weight_;
}

// optional int32 hard_mining_label = 5;
inline bool SoftmaxParameter::has_hard_mining_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoftmaxParameter::set_has_hard_mining_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoftmaxParameter::clear_has_hard_mining_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoftmaxParameter::clear_hard_mining_label() {
  hard_mining_label_ = 0;
  clear_has_hard_mining_label();
}
inline ::google::protobuf::int32 SoftmaxParameter::hard_mining_label() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.hard_mining_label)
  return hard_mining_label_;
}
inline void SoftmaxParameter::set_hard_mining_label(::google::protobuf::int32 value) {
  set_has_hard_mining_label();
  hard_mining_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.hard_mining_label)
}

// optional float cutting_point = 6;
inline bool SoftmaxParameter::has_cutting_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoftmaxParameter::set_has_cutting_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoftmaxParameter::clear_has_cutting_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoftmaxParameter::clear_cutting_point() {
  cutting_point_ = 0;
  clear_has_cutting_point();
}
inline float SoftmaxParameter::cutting_point() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.cutting_point)
  return cutting_point_;
}
inline void SoftmaxParameter::set_cutting_point(float value) {
  set_has_cutting_point();
  cutting_point_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.cutting_point)
}

// optional string normalize_type = 7 [default = "Softmax"];
inline bool SoftmaxParameter::has_normalize_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_normalize_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_normalize_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_normalize_type() {
  normalize_type_.ClearToDefaultNoArena(&::caffe::SoftmaxParameter::_default_normalize_type_.get());
  clear_has_normalize_type();
}
inline const ::std::string& SoftmaxParameter::normalize_type() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.normalize_type)
  return normalize_type_.GetNoArena();
}
inline void SoftmaxParameter::set_normalize_type(const ::std::string& value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(&::caffe::SoftmaxParameter::_default_normalize_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.normalize_type)
}
#if LANG_CXX11
inline void SoftmaxParameter::set_normalize_type(::std::string&& value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(
    &::caffe::SoftmaxParameter::_default_normalize_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.SoftmaxParameter.normalize_type)
}
#endif
inline void SoftmaxParameter::set_normalize_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_normalize_type();
  normalize_type_.SetNoArena(&::caffe::SoftmaxParameter::_default_normalize_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SoftmaxParameter.normalize_type)
}
inline void SoftmaxParameter::set_normalize_type(const char* value, size_t size) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(&::caffe::SoftmaxParameter::_default_normalize_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SoftmaxParameter.normalize_type)
}
inline ::std::string* SoftmaxParameter::mutable_normalize_type() {
  set_has_normalize_type();
  // @@protoc_insertion_point(field_mutable:caffe.SoftmaxParameter.normalize_type)
  return normalize_type_.MutableNoArena(&::caffe::SoftmaxParameter::_default_normalize_type_.get());
}
inline ::std::string* SoftmaxParameter::release_normalize_type() {
  // @@protoc_insertion_point(field_release:caffe.SoftmaxParameter.normalize_type)
  clear_has_normalize_type();
  return normalize_type_.ReleaseNoArena(&::caffe::SoftmaxParameter::_default_normalize_type_.get());
}
inline void SoftmaxParameter::set_allocated_normalize_type(::std::string* normalize_type) {
  if (normalize_type != NULL) {
    set_has_normalize_type();
  } else {
    clear_has_normalize_type();
  }
  normalize_type_.SetAllocatedNoArena(&::caffe::SoftmaxParameter::_default_normalize_type_.get(), normalize_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SoftmaxParameter.normalize_type)
}

// optional float label_smooth_factor = 8 [default = 0];
inline bool SoftmaxParameter::has_label_smooth_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SoftmaxParameter::set_has_label_smooth_factor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SoftmaxParameter::clear_has_label_smooth_factor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SoftmaxParameter::clear_label_smooth_factor() {
  label_smooth_factor_ = 0;
  clear_has_label_smooth_factor();
}
inline float SoftmaxParameter::label_smooth_factor() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.label_smooth_factor)
  return label_smooth_factor_;
}
inline void SoftmaxParameter::set_label_smooth_factor(float value) {
  set_has_label_smooth_factor();
  label_smooth_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.label_smooth_factor)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
inline void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
inline void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// MILParameter

// optional .caffe.MILParameter.MILType type = 1 [default = MAX];
inline bool MILParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MILParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MILParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MILParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::MILParameter_MILType MILParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.MILParameter.type)
  return static_cast< ::caffe::MILParameter_MILType >(type_);
}
inline void MILParameter::set_type(::caffe::MILParameter_MILType value) {
  assert(::caffe::MILParameter_MILType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILParameter.type)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena();
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
#if LANG_CXX11
inline void WindowDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.source)
}
#endif
inline void WindowDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena();
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
#if LANG_CXX11
inline void WindowDataParameter::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.mean_file)
}
#endif
inline void WindowDataParameter::set_mean_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get());
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena();
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
#if LANG_CXX11
inline void WindowDataParameter::set_crop_mode(::std::string&& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(
    &::caffe::WindowDataParameter::_default_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.crop_mode)
}
#endif
inline void WindowDataParameter::set_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crop_mode();
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get());
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get());
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(&::caffe::WindowDataParameter::_default_crop_mode_.get(), crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena();
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
#if LANG_CXX11
inline void WindowDataParameter::set_root_folder(::std::string&& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.WindowDataParameter.root_folder)
}
#endif
inline void WindowDataParameter::set_root_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// MILDataParameter

// optional string source = 1;
inline bool MILDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MILDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MILDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MILDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& MILDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.source)
  return source_.GetNoArena();
}
inline void MILDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.source)
}
#if LANG_CXX11
inline void MILDataParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MILDataParameter.source)
}
#endif
inline void MILDataParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.source)
}
inline void MILDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.source)
}
inline ::std::string* MILDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MILDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MILDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.source)
}

// optional uint32 num_scales = 2 [default = 1];
inline bool MILDataParameter::has_num_scales() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MILDataParameter::set_has_num_scales() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MILDataParameter::clear_has_num_scales() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MILDataParameter::clear_num_scales() {
  num_scales_ = 1u;
  clear_has_num_scales();
}
inline ::google::protobuf::uint32 MILDataParameter::num_scales() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.num_scales)
  return num_scales_;
}
inline void MILDataParameter::set_num_scales(::google::protobuf::uint32 value) {
  set_has_num_scales();
  num_scales_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.num_scales)
}

// optional float scale_factor = 6 [default = 1];
inline bool MILDataParameter::has_scale_factor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MILDataParameter::set_has_scale_factor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MILDataParameter::clear_has_scale_factor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MILDataParameter::clear_scale_factor() {
  scale_factor_ = 1;
  clear_has_scale_factor();
}
inline float MILDataParameter::scale_factor() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.scale_factor)
  return scale_factor_;
}
inline void MILDataParameter::set_scale_factor(float value) {
  set_has_scale_factor();
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.scale_factor)
}

// optional uint32 channels = 4 [default = 3];
inline bool MILDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MILDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MILDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MILDataParameter::clear_channels() {
  channels_ = 3u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MILDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.channels)
  return channels_;
}
inline void MILDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.channels)
}

// optional uint32 images_per_batch = 3;
inline bool MILDataParameter::has_images_per_batch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MILDataParameter::set_has_images_per_batch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MILDataParameter::clear_has_images_per_batch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MILDataParameter::clear_images_per_batch() {
  images_per_batch_ = 0u;
  clear_has_images_per_batch();
}
inline ::google::protobuf::uint32 MILDataParameter::images_per_batch() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.images_per_batch)
  return images_per_batch_;
}
inline void MILDataParameter::set_images_per_batch(::google::protobuf::uint32 value) {
  set_has_images_per_batch();
  images_per_batch_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.images_per_batch)
}

// optional uint32 n_classes = 5;
inline bool MILDataParameter::has_n_classes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MILDataParameter::set_has_n_classes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MILDataParameter::clear_has_n_classes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MILDataParameter::clear_n_classes() {
  n_classes_ = 0u;
  clear_has_n_classes();
}
inline ::google::protobuf::uint32 MILDataParameter::n_classes() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.n_classes)
  return n_classes_;
}
inline void MILDataParameter::set_n_classes(::google::protobuf::uint32 value) {
  set_has_n_classes();
  n_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.n_classes)
}

// optional string label_file = 7;
inline bool MILDataParameter::has_label_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MILDataParameter::set_has_label_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MILDataParameter::clear_has_label_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MILDataParameter::clear_label_file() {
  label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_file();
}
inline const ::std::string& MILDataParameter::label_file() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.label_file)
  return label_file_.GetNoArena();
}
inline void MILDataParameter::set_label_file(const ::std::string& value) {
  set_has_label_file();
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.label_file)
}
#if LANG_CXX11
inline void MILDataParameter::set_label_file(::std::string&& value) {
  set_has_label_file();
  label_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MILDataParameter.label_file)
}
#endif
inline void MILDataParameter::set_label_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_file();
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.label_file)
}
inline void MILDataParameter::set_label_file(const char* value, size_t size) {
  set_has_label_file();
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.label_file)
}
inline ::std::string* MILDataParameter::mutable_label_file() {
  set_has_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.label_file)
  return label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MILDataParameter::release_label_file() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.label_file)
  clear_has_label_file();
  return label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MILDataParameter::set_allocated_label_file(::std::string* label_file) {
  if (label_file != NULL) {
    set_has_label_file();
  } else {
    clear_has_label_file();
  }
  label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.label_file)
}

// optional string root_dir = 11;
inline bool MILDataParameter::has_root_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MILDataParameter::set_has_root_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MILDataParameter::clear_has_root_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MILDataParameter::clear_root_dir() {
  root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_dir();
}
inline const ::std::string& MILDataParameter::root_dir() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.root_dir)
  return root_dir_.GetNoArena();
}
inline void MILDataParameter::set_root_dir(const ::std::string& value) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.root_dir)
}
#if LANG_CXX11
inline void MILDataParameter::set_root_dir(::std::string&& value) {
  set_has_root_dir();
  root_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MILDataParameter.root_dir)
}
#endif
inline void MILDataParameter::set_root_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.root_dir)
}
inline void MILDataParameter::set_root_dir(const char* value, size_t size) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.root_dir)
}
inline ::std::string* MILDataParameter::mutable_root_dir() {
  set_has_root_dir();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.root_dir)
  return root_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MILDataParameter::release_root_dir() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.root_dir)
  clear_has_root_dir();
  return root_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MILDataParameter::set_allocated_root_dir(::std::string* root_dir) {
  if (root_dir != NULL) {
    set_has_root_dir();
  } else {
    clear_has_root_dir();
  }
  root_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.root_dir)
}

// optional string ext = 12;
inline bool MILDataParameter::has_ext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MILDataParameter::set_has_ext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MILDataParameter::clear_has_ext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MILDataParameter::clear_ext() {
  ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ext();
}
inline const ::std::string& MILDataParameter::ext() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.ext)
  return ext_.GetNoArena();
}
inline void MILDataParameter::set_ext(const ::std::string& value) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.ext)
}
#if LANG_CXX11
inline void MILDataParameter::set_ext(::std::string&& value) {
  set_has_ext();
  ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.MILDataParameter.ext)
}
#endif
inline void MILDataParameter::set_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MILDataParameter.ext)
}
inline void MILDataParameter::set_ext(const char* value, size_t size) {
  set_has_ext();
  ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MILDataParameter.ext)
}
inline ::std::string* MILDataParameter::mutable_ext() {
  set_has_ext();
  // @@protoc_insertion_point(field_mutable:caffe.MILDataParameter.ext)
  return ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MILDataParameter::release_ext() {
  // @@protoc_insertion_point(field_release:caffe.MILDataParameter.ext)
  clear_has_ext();
  return ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MILDataParameter::set_allocated_ext(::std::string* ext) {
  if (ext != NULL) {
    set_has_ext();
  } else {
    clear_has_ext();
  }
  ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext);
  // @@protoc_insertion_point(field_set_allocated:caffe.MILDataParameter.ext)
}

// optional bool randomize = 13 [default = true];
inline bool MILDataParameter::has_randomize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MILDataParameter::set_has_randomize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MILDataParameter::clear_has_randomize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MILDataParameter::clear_randomize() {
  randomize_ = true;
  clear_has_randomize();
}
inline bool MILDataParameter::randomize() const {
  // @@protoc_insertion_point(field_get:caffe.MILDataParameter.randomize)
  return randomize_;
}
inline void MILDataParameter::set_randomize(bool value) {
  set_has_randomize();
  randomize_ = value;
  // @@protoc_insertion_point(field_set:caffe.MILDataParameter.randomize)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
inline ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
inline void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
inline void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
inline void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void V1LayerParameter::set_bottom(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(std::move(value));
}
#endif
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
inline ::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#if LANG_CXX11
inline void V1LayerParameter::add_bottom(::std::string&& value) {
  bottom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
#endif
inline void V1LayerParameter::add_bottom(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::top_size() const {
  return top_.size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void V1LayerParameter::set_top(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(std::move(value));
}
#endif
inline void V1LayerParameter::set_top(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
inline ::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
inline void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#if LANG_CXX11
inline void V1LayerParameter::add_top(::std::string&& value) {
  top_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
#endif
inline void V1LayerParameter::add_top(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena();
}
inline void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
#if LANG_CXX11
inline void V1LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V1LayerParameter.name)
}
#endif
inline void V1LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
inline ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
inline int V1LayerParameter::include_size() const {
  return include_.size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
inline int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_type() {
  _has_bits_[1] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
inline void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
inline int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::param_size() const {
  return param_.size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void V1LayerParameter::set_param(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(std::move(value));
}
#endif
inline void V1LayerParameter::set_param(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
inline ::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
inline void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#if LANG_CXX11
inline void V1LayerParameter::add_param(::std::string&& value) {
  param_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
#endif
inline void V1LayerParameter::add_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  const ::caffe::AccuracyParameter* p = accuracy_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::AccuracyParameter*>(
      &::caffe::_AccuracyParameter_default_instance_);
}
inline ::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accuracy_param_;
  }
  if (accuracy_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accuracy_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accuracy_param, submessage_arena);
    }
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  accuracy_param_ = accuracy_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  const ::caffe::ArgMaxParameter* p = argmax_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ArgMaxParameter*>(
      &::caffe::_ArgMaxParameter_default_instance_);
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
inline void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete argmax_param_;
  }
  if (argmax_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      argmax_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, argmax_param, submessage_arena);
    }
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  argmax_param_ = argmax_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  const ::caffe::ConcatParameter* p = concat_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConcatParameter*>(
      &::caffe::_ConcatParameter_default_instance_);
}
inline ::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline ::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
inline void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete concat_param_;
  }
  if (concat_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      concat_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, concat_param, submessage_arena);
    }
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  concat_param_ = concat_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  const ::caffe::ContrastiveLossParameter* p = contrastive_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ContrastiveLossParameter*>(
      &::caffe::_ContrastiveLossParameter_default_instance_);
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete contrastive_loss_param_;
  }
  if (contrastive_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contrastive_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contrastive_loss_param, submessage_arena);
    }
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  contrastive_loss_param_ = contrastive_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  const ::caffe::ConvolutionParameter* p = convolution_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ConvolutionParameter*>(
      &::caffe::_ConvolutionParameter_default_instance_);
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
inline void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete convolution_param_;
  }
  if (convolution_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      convolution_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, convolution_param, submessage_arena);
    }
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  convolution_param_ = convolution_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  const ::caffe::DataParameter* p = data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DataParameter*>(
      &::caffe::_DataParameter_default_instance_);
}
inline ::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline ::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
inline void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_param_;
  }
  if (data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_param, submessage_arena);
    }
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  data_param_ = data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  const ::caffe::DropoutParameter* p = dropout_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DropoutParameter*>(
      &::caffe::_DropoutParameter_default_instance_);
}
inline ::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline ::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
inline void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dropout_param_;
  }
  if (dropout_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dropout_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropout_param, submessage_arena);
    }
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  dropout_param_ = dropout_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  const ::caffe::DummyDataParameter* p = dummy_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::DummyDataParameter*>(
      &::caffe::_DummyDataParameter_default_instance_);
}
inline ::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dummy_data_param_;
  }
  if (dummy_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dummy_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dummy_data_param, submessage_arena);
    }
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  dummy_data_param_ = dummy_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  const ::caffe::EltwiseParameter* p = eltwise_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EltwiseParameter*>(
      &::caffe::_EltwiseParameter_default_instance_);
}
inline ::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete eltwise_param_;
  }
  if (eltwise_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      eltwise_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eltwise_param, submessage_arena);
    }
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  eltwise_param_ = eltwise_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  const ::caffe::ExpParameter* p = exp_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ExpParameter*>(
      &::caffe::_ExpParameter_default_instance_);
}
inline ::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline ::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
inline void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exp_param_;
  }
  if (exp_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exp_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exp_param, submessage_arena);
    }
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  exp_param_ = exp_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  const ::caffe::HDF5DataParameter* p = hdf5_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5DataParameter*>(
      &::caffe::_HDF5DataParameter_default_instance_);
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_data_param_;
  }
  if (hdf5_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_data_param, submessage_arena);
    }
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  hdf5_data_param_ = hdf5_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  const ::caffe::HingeLossParameter* p = hinge_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HingeLossParameter*>(
      &::caffe::_HingeLossParameter_default_instance_);
}
inline ::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hinge_loss_param_;
  }
  if (hinge_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hinge_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hinge_loss_param, submessage_arena);
    }
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  hinge_loss_param_ = hinge_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  const ::caffe::ImageDataParameter* p = image_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ImageDataParameter*>(
      &::caffe::_ImageDataParameter_default_instance_);
}
inline ::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
inline void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_data_param_;
  }
  if (image_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_data_param, submessage_arena);
    }
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  image_data_param_ = image_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  const ::caffe::InfogainLossParameter* p = infogain_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InfogainLossParameter*>(
      &::caffe::_InfogainLossParameter_default_instance_);
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete infogain_loss_param_;
  }
  if (infogain_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      infogain_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, infogain_loss_param, submessage_arena);
    }
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  infogain_loss_param_ = infogain_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  const ::caffe::InnerProductParameter* p = inner_product_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InnerProductParameter*>(
      &::caffe::_InnerProductParameter_default_instance_);
}
inline ::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inner_product_param_;
  }
  if (inner_product_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inner_product_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inner_product_param, submessage_arena);
    }
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  inner_product_param_ = inner_product_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  const ::caffe::LRNParameter* p = lrn_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LRNParameter*>(
      &::caffe::_LRNParameter_default_instance_);
}
inline ::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline ::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
inline void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lrn_param_;
  }
  if (lrn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lrn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lrn_param, submessage_arena);
    }
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  lrn_param_ = lrn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  const ::caffe::MemoryDataParameter* p = memory_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MemoryDataParameter*>(
      &::caffe::_MemoryDataParameter_default_instance_);
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete memory_data_param_;
  }
  if (memory_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      memory_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, memory_data_param, submessage_arena);
    }
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  memory_data_param_ = memory_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  const ::caffe::MVNParameter* p = mvn_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::MVNParameter*>(
      &::caffe::_MVNParameter_default_instance_);
}
inline ::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline ::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
inline void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mvn_param_;
  }
  if (mvn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mvn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mvn_param, submessage_arena);
    }
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  mvn_param_ = mvn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  const ::caffe::PoolingParameter* p = pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PoolingParameter*>(
      &::caffe::_PoolingParameter_default_instance_);
}
inline ::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline ::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
inline void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pooling_param_;
  }
  if (pooling_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pooling_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pooling_param, submessage_arena);
    }
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  pooling_param_ = pooling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V1LayerParameter::set_has_power_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V1LayerParameter::clear_has_power_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  const ::caffe::PowerParameter* p = power_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PowerParameter*>(
      &::caffe::_PowerParameter_default_instance_);
}
inline ::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline ::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
inline void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete power_param_;
  }
  if (power_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      power_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, power_param, submessage_arena);
    }
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  power_param_ = power_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V1LayerParameter::set_has_relu_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  const ::caffe::ReLUParameter* p = relu_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ReLUParameter*>(
      &::caffe::_ReLUParameter_default_instance_);
}
inline ::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline ::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
inline void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete relu_param_;
  }
  if (relu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relu_param, submessage_arena);
    }
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  relu_param_ = relu_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  const ::caffe::SigmoidParameter* p = sigmoid_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SigmoidParameter*>(
      &::caffe::_SigmoidParameter_default_instance_);
}
inline ::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sigmoid_param_;
  }
  if (sigmoid_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sigmoid_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sigmoid_param, submessage_arena);
    }
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  sigmoid_param_ = sigmoid_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  const ::caffe::SoftmaxParameter* p = softmax_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SoftmaxParameter*>(
      &::caffe::_SoftmaxParameter_default_instance_);
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
inline void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete softmax_param_;
  }
  if (softmax_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      softmax_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, softmax_param, submessage_arena);
    }
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  softmax_param_ = softmax_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V1LayerParameter::set_has_slice_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  const ::caffe::SliceParameter* p = slice_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SliceParameter*>(
      &::caffe::_SliceParameter_default_instance_);
}
inline ::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline ::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
inline void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slice_param_;
  }
  if (slice_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slice_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slice_param, submessage_arena);
    }
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  slice_param_ = slice_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  const ::caffe::TanHParameter* p = tanh_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TanHParameter*>(
      &::caffe::_TanHParameter_default_instance_);
}
inline ::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline ::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
inline void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tanh_param_;
  }
  if (tanh_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tanh_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tanh_param, submessage_arena);
    }
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  tanh_param_ = tanh_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  const ::caffe::ThresholdParameter* p = threshold_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ThresholdParameter*>(
      &::caffe::_ThresholdParameter_default_instance_);
}
inline ::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
inline void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete threshold_param_;
  }
  if (threshold_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      threshold_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, threshold_param, submessage_arena);
    }
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  threshold_param_ = threshold_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  const ::caffe::WindowDataParameter* p = window_data_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::WindowDataParameter*>(
      &::caffe::_WindowDataParameter_default_instance_);
}
inline ::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
inline void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_data_param_;
  }
  if (window_data_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      window_data_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window_data_param, submessage_arena);
    }
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  window_data_param_ = window_data_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V1LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  const ::caffe::TransformationParameter* p = transform_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TransformationParameter*>(
      &::caffe::_TransformationParameter_default_instance_);
}
inline ::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline ::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
inline void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_param_;
  }
  if (transform_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transform_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transform_param, submessage_arena);
    }
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  transform_param_ = transform_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V1LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  const ::caffe::LossParameter* p = loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LossParameter*>(
      &::caffe::_LossParameter_default_instance_);
}
inline ::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline ::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
inline void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete loss_param_;
  }
  if (loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loss_param, submessage_arena);
    }
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  loss_param_ = loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->Clear();
  clear_has_layer();
}
inline const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  const ::caffe::V0LayerParameter* p = layer_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::V0LayerParameter*>(
      &::caffe::_V0LayerParameter_default_instance_);
}
inline ::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
inline void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete layer_;
  }
  if (layer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      layer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, layer, submessage_arena);
    }
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_ = layer;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

// optional .caffe.BNParameter bn_param = 43;
inline bool V1LayerParameter::has_bn_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_bn_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_bn_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_bn_param() {
  if (bn_param_ != NULL) bn_param_->Clear();
  clear_has_bn_param();
}
inline const ::caffe::BNParameter& V1LayerParameter::bn_param() const {
  const ::caffe::BNParameter* p = bn_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bn_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::BNParameter*>(
      &::caffe::_BNParameter_default_instance_);
}
inline ::caffe::BNParameter* V1LayerParameter::release_bn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.bn_param)
  clear_has_bn_param();
  ::caffe::BNParameter* temp = bn_param_;
  bn_param_ = NULL;
  return temp;
}
inline ::caffe::BNParameter* V1LayerParameter::mutable_bn_param() {
  set_has_bn_param();
  if (bn_param_ == NULL) {
    bn_param_ = new ::caffe::BNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bn_param)
  return bn_param_;
}
inline void V1LayerParameter::set_allocated_bn_param(::caffe::BNParameter* bn_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bn_param_;
  }
  if (bn_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bn_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bn_param, submessage_arena);
    }
    set_has_bn_param();
  } else {
    clear_has_bn_param();
  }
  bn_param_ = bn_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.bn_param)
}

// optional .caffe.LocalParameter local_param = 44;
inline bool V1LayerParameter::has_local_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_local_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_local_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_local_param() {
  if (local_param_ != NULL) local_param_->Clear();
  clear_has_local_param();
}
inline const ::caffe::LocalParameter& V1LayerParameter::local_param() const {
  const ::caffe::LocalParameter* p = local_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.local_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::LocalParameter*>(
      &::caffe::_LocalParameter_default_instance_);
}
inline ::caffe::LocalParameter* V1LayerParameter::release_local_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.local_param)
  clear_has_local_param();
  ::caffe::LocalParameter* temp = local_param_;
  local_param_ = NULL;
  return temp;
}
inline ::caffe::LocalParameter* V1LayerParameter::mutable_local_param() {
  set_has_local_param();
  if (local_param_ == NULL) {
    local_param_ = new ::caffe::LocalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.local_param)
  return local_param_;
}
inline void V1LayerParameter::set_allocated_local_param(::caffe::LocalParameter* local_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete local_param_;
  }
  if (local_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_param, submessage_arena);
    }
    set_has_local_param();
  } else {
    clear_has_local_param();
  }
  local_param_ = local_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.local_param)
}

// optional .caffe.PReLUParameter prelu_param = 45;
inline bool V1LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->Clear();
  clear_has_prelu_param();
}
inline const ::caffe::PReLUParameter& V1LayerParameter::prelu_param() const {
  const ::caffe::PReLUParameter* p = prelu_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.prelu_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::PReLUParameter*>(
      &::caffe::_PReLUParameter_default_instance_);
}
inline ::caffe::PReLUParameter* V1LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline ::caffe::PReLUParameter* V1LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.prelu_param)
  return prelu_param_;
}
inline void V1LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prelu_param_;
  }
  if (prelu_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prelu_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prelu_param, submessage_arena);
    }
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  prelu_param_ = prelu_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.prelu_param)
}

// optional .caffe.InsanityParameter insanity_param = 46;
inline bool V1LayerParameter::has_insanity_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_insanity_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_insanity_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_insanity_param() {
  if (insanity_param_ != NULL) insanity_param_->Clear();
  clear_has_insanity_param();
}
inline const ::caffe::InsanityParameter& V1LayerParameter::insanity_param() const {
  const ::caffe::InsanityParameter* p = insanity_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.insanity_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::InsanityParameter*>(
      &::caffe::_InsanityParameter_default_instance_);
}
inline ::caffe::InsanityParameter* V1LayerParameter::release_insanity_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.insanity_param)
  clear_has_insanity_param();
  ::caffe::InsanityParameter* temp = insanity_param_;
  insanity_param_ = NULL;
  return temp;
}
inline ::caffe::InsanityParameter* V1LayerParameter::mutable_insanity_param() {
  set_has_insanity_param();
  if (insanity_param_ == NULL) {
    insanity_param_ = new ::caffe::InsanityParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.insanity_param)
  return insanity_param_;
}
inline void V1LayerParameter::set_allocated_insanity_param(::caffe::InsanityParameter* insanity_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete insanity_param_;
  }
  if (insanity_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      insanity_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, insanity_param, submessage_arena);
    }
    set_has_insanity_param();
  } else {
    clear_has_insanity_param();
  }
  insanity_param_ = insanity_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.insanity_param)
}

// optional .caffe.TripletLossParameter triplet_loss_param = 47;
inline bool V1LayerParameter::has_triplet_loss_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_triplet_loss_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_triplet_loss_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_triplet_loss_param() {
  if (triplet_loss_param_ != NULL) triplet_loss_param_->Clear();
  clear_has_triplet_loss_param();
}
inline const ::caffe::TripletLossParameter& V1LayerParameter::triplet_loss_param() const {
  const ::caffe::TripletLossParameter* p = triplet_loss_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.triplet_loss_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::TripletLossParameter*>(
      &::caffe::_TripletLossParameter_default_instance_);
}
inline ::caffe::TripletLossParameter* V1LayerParameter::release_triplet_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.triplet_loss_param)
  clear_has_triplet_loss_param();
  ::caffe::TripletLossParameter* temp = triplet_loss_param_;
  triplet_loss_param_ = NULL;
  return temp;
}
inline ::caffe::TripletLossParameter* V1LayerParameter::mutable_triplet_loss_param() {
  set_has_triplet_loss_param();
  if (triplet_loss_param_ == NULL) {
    triplet_loss_param_ = new ::caffe::TripletLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.triplet_loss_param)
  return triplet_loss_param_;
}
inline void V1LayerParameter::set_allocated_triplet_loss_param(::caffe::TripletLossParameter* triplet_loss_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete triplet_loss_param_;
  }
  if (triplet_loss_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      triplet_loss_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, triplet_loss_param, submessage_arena);
    }
    set_has_triplet_loss_param();
  } else {
    clear_has_triplet_loss_param();
  }
  triplet_loss_param_ = triplet_loss_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.triplet_loss_param)
}

// optional .caffe.ROIPoolingParameter roi_pooling_param = 48;
inline bool V1LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->Clear();
  clear_has_roi_pooling_param();
}
inline const ::caffe::ROIPoolingParameter& V1LayerParameter::roi_pooling_param() const {
  const ::caffe::ROIPoolingParameter* p = roi_pooling_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.roi_pooling_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::ROIPoolingParameter*>(
      &::caffe::_ROIPoolingParameter_default_instance_);
}
inline ::caffe::ROIPoolingParameter* V1LayerParameter::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.roi_pooling_param)
  clear_has_roi_pooling_param();
  ::caffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
inline ::caffe::ROIPoolingParameter* V1LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
inline void V1LayerParameter::set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roi_pooling_param_;
  }
  if (roi_pooling_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roi_pooling_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roi_pooling_param, submessage_arena);
    }
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  roi_pooling_param_ = roi_pooling_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.roi_pooling_param)
}

// optional .caffe.EltwiseAffineParameter eltwise_affine_param = 49;
inline bool V1LayerParameter::has_eltwise_affine_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_affine_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_eltwise_affine_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_eltwise_affine_param() {
  if (eltwise_affine_param_ != NULL) eltwise_affine_param_->Clear();
  clear_has_eltwise_affine_param();
}
inline const ::caffe::EltwiseAffineParameter& V1LayerParameter::eltwise_affine_param() const {
  const ::caffe::EltwiseAffineParameter* p = eltwise_affine_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_affine_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::EltwiseAffineParameter*>(
      &::caffe::_EltwiseAffineParameter_default_instance_);
}
inline ::caffe::EltwiseAffineParameter* V1LayerParameter::release_eltwise_affine_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_affine_param)
  clear_has_eltwise_affine_param();
  ::caffe::EltwiseAffineParameter* temp = eltwise_affine_param_;
  eltwise_affine_param_ = NULL;
  return temp;
}
inline ::caffe::EltwiseAffineParameter* V1LayerParameter::mutable_eltwise_affine_param() {
  set_has_eltwise_affine_param();
  if (eltwise_affine_param_ == NULL) {
    eltwise_affine_param_ = new ::caffe::EltwiseAffineParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_affine_param)
  return eltwise_affine_param_;
}
inline void V1LayerParameter::set_allocated_eltwise_affine_param(::caffe::EltwiseAffineParameter* eltwise_affine_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete eltwise_affine_param_;
  }
  if (eltwise_affine_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      eltwise_affine_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eltwise_affine_param, submessage_arena);
    }
    set_has_eltwise_affine_param();
  } else {
    clear_has_eltwise_affine_param();
  }
  eltwise_affine_param_ = eltwise_affine_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_affine_param)
}

// optional .caffe.SubRegionParameter sub_region_param = 50;
inline bool V1LayerParameter::has_sub_region_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_sub_region_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_sub_region_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_sub_region_param() {
  if (sub_region_param_ != NULL) sub_region_param_->Clear();
  clear_has_sub_region_param();
}
inline const ::caffe::SubRegionParameter& V1LayerParameter::sub_region_param() const {
  const ::caffe::SubRegionParameter* p = sub_region_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sub_region_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::SubRegionParameter*>(
      &::caffe::_SubRegionParameter_default_instance_);
}
inline ::caffe::SubRegionParameter* V1LayerParameter::release_sub_region_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sub_region_param)
  clear_has_sub_region_param();
  ::caffe::SubRegionParameter* temp = sub_region_param_;
  sub_region_param_ = NULL;
  return temp;
}
inline ::caffe::SubRegionParameter* V1LayerParameter::mutable_sub_region_param() {
  set_has_sub_region_param();
  if (sub_region_param_ == NULL) {
    sub_region_param_ = new ::caffe::SubRegionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sub_region_param)
  return sub_region_param_;
}
inline void V1LayerParameter::set_allocated_sub_region_param(::caffe::SubRegionParameter* sub_region_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sub_region_param_;
  }
  if (sub_region_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sub_region_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sub_region_param, submessage_arena);
    }
    set_has_sub_region_param();
  } else {
    clear_has_sub_region_param();
  }
  sub_region_param_ = sub_region_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sub_region_param)
}

// optional .caffe.NoiseParameter noise_param = 51;
inline bool V1LayerParameter::has_noise_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_noise_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_noise_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->Clear();
  clear_has_noise_param();
}
inline const ::caffe::NoiseParameter& V1LayerParameter::noise_param() const {
  const ::caffe::NoiseParameter* p = noise_param_;
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.noise_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::NoiseParameter*>(
      &::caffe::_NoiseParameter_default_instance_);
}
inline ::caffe::NoiseParameter* V1LayerParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.noise_param)
  clear_has_noise_param();
  ::caffe::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
inline ::caffe::NoiseParameter* V1LayerParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.noise_param)
  return noise_param_;
}
inline void V1LayerParameter::set_allocated_noise_param(::caffe::NoiseParameter* noise_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete noise_param_;
  }
  if (noise_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      noise_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, noise_param, submessage_arena);
    }
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  noise_param_ = noise_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.noise_param)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena();
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
#if LANG_CXX11
inline void V0LayerParameter::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.name)
}
#endif
inline void V0LayerParameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena();
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
#if LANG_CXX11
inline void V0LayerParameter::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.type)
}
#endif
inline void V0LayerParameter::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena();
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
#if LANG_CXX11
inline void V0LayerParameter::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.source)
}
#endif
inline void V0LayerParameter::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena();
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
#if LANG_CXX11
inline void V0LayerParameter::set_meanfile(::std::string&& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.meanfile)
}
#endif
inline void V0LayerParameter::set_meanfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get());
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena();
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
#if LANG_CXX11
inline void V0LayerParameter::set_det_crop_mode(::std::string&& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(
    &::caffe::V0LayerParameter::_default_det_crop_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.V0LayerParameter.det_crop_mode)
}
#endif
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get());
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get());
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(&::caffe::V0LayerParameter::_default_det_crop_mode_.get(), det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  const ::caffe::HDF5OutputParameter* p = hdf5_output_param_;
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::HDF5OutputParameter*>(
      &::caffe::_HDF5OutputParameter_default_instance_);
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdf5_output_param_;
  }
  if (hdf5_output_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdf5_output_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdf5_output_param, submessage_arena);
    }
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  hdf5_output_param_ = hdf5_output_param;
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// TripletLossParameter

// optional float margin = 1 [default = 1];
inline bool TripletLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripletLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripletLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripletLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float TripletLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.TripletLossParameter.margin)
  return margin_;
}
inline void TripletLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.TripletLossParameter.margin)
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0u;
  clear_has_pooled_h();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_h)
  return pooled_h_;
}
inline void ROIPoolingParameter::set_pooled_h(::google::protobuf::uint32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_h)
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0u;
  clear_has_pooled_w();
}
inline ::google::protobuf::uint32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_w)
  return pooled_w_;
}
inline void ROIPoolingParameter::set_pooled_w(::google::protobuf::uint32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.spatial_scale)
}

// -------------------------------------------------------------------

// InsanityParameter

// optional float lb = 1 [default = 5];
inline bool InsanityParameter::has_lb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsanityParameter::set_has_lb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsanityParameter::clear_has_lb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsanityParameter::clear_lb() {
  lb_ = 5;
  clear_has_lb();
}
inline float InsanityParameter::lb() const {
  // @@protoc_insertion_point(field_get:caffe.InsanityParameter.lb)
  return lb_;
}
inline void InsanityParameter::set_lb(float value) {
  set_has_lb();
  lb_ = value;
  // @@protoc_insertion_point(field_set:caffe.InsanityParameter.lb)
}

// optional float ub = 2 [default = 10];
inline bool InsanityParameter::has_ub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsanityParameter::set_has_ub() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsanityParameter::clear_has_ub() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsanityParameter::clear_ub() {
  ub_ = 10;
  clear_has_ub();
}
inline float InsanityParameter::ub() const {
  // @@protoc_insertion_point(field_get:caffe.InsanityParameter.ub)
  return ub_;
}
inline void InsanityParameter::set_ub(float value) {
  set_has_ub();
  ub_ = value;
  // @@protoc_insertion_point(field_set:caffe.InsanityParameter.ub)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& PReLUParameter::filler() const {
  const ::caffe::FillerParameter* p = filler_;
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
inline void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filler_;
  }
  if (filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filler, submessage_arena);
    }
    set_has_filler();
  } else {
    clear_has_filler();
  }
  filler_ = filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

// -------------------------------------------------------------------

// BNParameter

// optional .caffe.FillerParameter slope_filler = 1;
inline bool BNParameter::has_slope_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BNParameter::set_has_slope_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BNParameter::clear_has_slope_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BNParameter::clear_slope_filler() {
  if (slope_filler_ != NULL) slope_filler_->Clear();
  clear_has_slope_filler();
}
inline const ::caffe::FillerParameter& BNParameter::slope_filler() const {
  const ::caffe::FillerParameter* p = slope_filler_;
  // @@protoc_insertion_point(field_get:caffe.BNParameter.slope_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* BNParameter::release_slope_filler() {
  // @@protoc_insertion_point(field_release:caffe.BNParameter.slope_filler)
  clear_has_slope_filler();
  ::caffe::FillerParameter* temp = slope_filler_;
  slope_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* BNParameter::mutable_slope_filler() {
  set_has_slope_filler();
  if (slope_filler_ == NULL) {
    slope_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BNParameter.slope_filler)
  return slope_filler_;
}
inline void BNParameter::set_allocated_slope_filler(::caffe::FillerParameter* slope_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slope_filler_;
  }
  if (slope_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slope_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slope_filler, submessage_arena);
    }
    set_has_slope_filler();
  } else {
    clear_has_slope_filler();
  }
  slope_filler_ = slope_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.BNParameter.slope_filler)
}

// optional .caffe.FillerParameter bias_filler = 2;
inline bool BNParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BNParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BNParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BNParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& BNParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.BNParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* BNParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.BNParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* BNParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BNParameter.bias_filler)
  return bias_filler_;
}
inline void BNParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.BNParameter.bias_filler)
}

// optional float momentum = 3 [default = 0.9];
inline bool BNParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BNParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BNParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BNParameter::clear_momentum() {
  momentum_ = 0.9f;
  clear_has_momentum();
}
inline float BNParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.momentum)
  return momentum_;
}
inline void BNParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.momentum)
}

// optional float eps = 4 [default = 1e-005];
inline bool BNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BNParameter::clear_eps() {
  eps_ = 1e-005f;
  clear_has_eps();
}
inline float BNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.eps)
  return eps_;
}
inline void BNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.eps)
}

// optional bool frozen = 5 [default = false];
inline bool BNParameter::has_frozen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BNParameter::set_has_frozen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BNParameter::clear_has_frozen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BNParameter::clear_frozen() {
  frozen_ = false;
  clear_has_frozen();
}
inline bool BNParameter::frozen() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.frozen)
  return frozen_;
}
inline void BNParameter::set_frozen(bool value) {
  set_has_frozen();
  frozen_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.frozen)
}

// optional .caffe.BNParameter.Engine engine = 6 [default = DEFAULT];
inline bool BNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::BNParameter_Engine BNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.BNParameter.engine)
  return static_cast< ::caffe::BNParameter_Engine >(engine_);
}
inline void BNParameter::set_engine(::caffe::BNParameter_Engine value) {
  assert(::caffe::BNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.BNParameter.engine)
}

// -------------------------------------------------------------------

// LocalParameter

// optional uint32 num_output = 1;
inline bool LocalParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocalParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocalParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocalParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 LocalParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.num_output)
  return num_output_;
}
inline void LocalParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool LocalParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LocalParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LocalParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LocalParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool LocalParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.bias_term)
  return bias_term_;
}
inline void LocalParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.bias_term)
}

// optional uint32 pad = 3 [default = 0];
inline bool LocalParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocalParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocalParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocalParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 LocalParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.pad)
  return pad_;
}
inline void LocalParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.pad)
}

// optional uint32 kernel_size = 4;
inline bool LocalParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LocalParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LocalParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LocalParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 LocalParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.kernel_size)
  return kernel_size_;
}
inline void LocalParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.kernel_size)
}

// optional uint32 stride = 6 [default = 1];
inline bool LocalParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LocalParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LocalParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LocalParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 LocalParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.stride)
  return stride_;
}
inline void LocalParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.LocalParameter.stride)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool LocalParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocalParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocalParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocalParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& LocalParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* LocalParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.LocalParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* LocalParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LocalParameter.weight_filler)
  return weight_filler_;
}
inline void LocalParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.LocalParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool LocalParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocalParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocalParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocalParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& LocalParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.LocalParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* LocalParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.LocalParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* LocalParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LocalParameter.bias_filler)
  return bias_filler_;
}
inline void LocalParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.LocalParameter.bias_filler)
}

// -------------------------------------------------------------------

// EltwiseAffineParameter

// optional .caffe.FillerParameter slope_filler = 1;
inline bool EltwiseAffineParameter::has_slope_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseAffineParameter::set_has_slope_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseAffineParameter::clear_has_slope_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseAffineParameter::clear_slope_filler() {
  if (slope_filler_ != NULL) slope_filler_->Clear();
  clear_has_slope_filler();
}
inline const ::caffe::FillerParameter& EltwiseAffineParameter::slope_filler() const {
  const ::caffe::FillerParameter* p = slope_filler_;
  // @@protoc_insertion_point(field_get:caffe.EltwiseAffineParameter.slope_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* EltwiseAffineParameter::release_slope_filler() {
  // @@protoc_insertion_point(field_release:caffe.EltwiseAffineParameter.slope_filler)
  clear_has_slope_filler();
  ::caffe::FillerParameter* temp = slope_filler_;
  slope_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* EltwiseAffineParameter::mutable_slope_filler() {
  set_has_slope_filler();
  if (slope_filler_ == NULL) {
    slope_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EltwiseAffineParameter.slope_filler)
  return slope_filler_;
}
inline void EltwiseAffineParameter::set_allocated_slope_filler(::caffe::FillerParameter* slope_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slope_filler_;
  }
  if (slope_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slope_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slope_filler, submessage_arena);
    }
    set_has_slope_filler();
  } else {
    clear_has_slope_filler();
  }
  slope_filler_ = slope_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.EltwiseAffineParameter.slope_filler)
}

// optional .caffe.FillerParameter bias_filler = 2;
inline bool EltwiseAffineParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EltwiseAffineParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EltwiseAffineParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EltwiseAffineParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& EltwiseAffineParameter::bias_filler() const {
  const ::caffe::FillerParameter* p = bias_filler_;
  // @@protoc_insertion_point(field_get:caffe.EltwiseAffineParameter.bias_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* EltwiseAffineParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EltwiseAffineParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* EltwiseAffineParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EltwiseAffineParameter.bias_filler)
  return bias_filler_;
}
inline void EltwiseAffineParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bias_filler_;
  }
  if (bias_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bias_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bias_filler, submessage_arena);
    }
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  bias_filler_ = bias_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.EltwiseAffineParameter.bias_filler)
}

// optional bool channel_shared = 3 [default = false];
inline bool EltwiseAffineParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EltwiseAffineParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EltwiseAffineParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EltwiseAffineParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool EltwiseAffineParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseAffineParameter.channel_shared)
  return channel_shared_;
}
inline void EltwiseAffineParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseAffineParameter.channel_shared)
}

// -------------------------------------------------------------------

// SubRegionParameter

// optional uint32 region_height = 1;
inline bool SubRegionParameter::has_region_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubRegionParameter::set_has_region_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubRegionParameter::clear_has_region_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubRegionParameter::clear_region_height() {
  region_height_ = 0u;
  clear_has_region_height();
}
inline ::google::protobuf::uint32 SubRegionParameter::region_height() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.region_height)
  return region_height_;
}
inline void SubRegionParameter::set_region_height(::google::protobuf::uint32 value) {
  set_has_region_height();
  region_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.region_height)
}

// optional uint32 region_width = 2;
inline bool SubRegionParameter::has_region_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubRegionParameter::set_has_region_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubRegionParameter::clear_has_region_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubRegionParameter::clear_region_width() {
  region_width_ = 0u;
  clear_has_region_width();
}
inline ::google::protobuf::uint32 SubRegionParameter::region_width() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.region_width)
  return region_width_;
}
inline void SubRegionParameter::set_region_width(::google::protobuf::uint32 value) {
  set_has_region_width();
  region_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.region_width)
}

// optional uint32 data_height = 3;
inline bool SubRegionParameter::has_data_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubRegionParameter::set_has_data_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubRegionParameter::clear_has_data_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubRegionParameter::clear_data_height() {
  data_height_ = 0u;
  clear_has_data_height();
}
inline ::google::protobuf::uint32 SubRegionParameter::data_height() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.data_height)
  return data_height_;
}
inline void SubRegionParameter::set_data_height(::google::protobuf::uint32 value) {
  set_has_data_height();
  data_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.data_height)
}

// optional uint32 data_width = 4;
inline bool SubRegionParameter::has_data_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubRegionParameter::set_has_data_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubRegionParameter::clear_has_data_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubRegionParameter::clear_data_width() {
  data_width_ = 0u;
  clear_has_data_width();
}
inline ::google::protobuf::uint32 SubRegionParameter::data_width() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.data_width)
  return data_width_;
}
inline void SubRegionParameter::set_data_width(::google::protobuf::uint32 value) {
  set_has_data_width();
  data_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.data_width)
}

// optional uint32 as_dim = 5 [default = 1];
inline bool SubRegionParameter::has_as_dim() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubRegionParameter::set_has_as_dim() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubRegionParameter::clear_has_as_dim() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubRegionParameter::clear_as_dim() {
  as_dim_ = 1u;
  clear_has_as_dim();
}
inline ::google::protobuf::uint32 SubRegionParameter::as_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SubRegionParameter.as_dim)
  return as_dim_;
}
inline void SubRegionParameter::set_as_dim(::google::protobuf::uint32 value) {
  set_has_as_dim();
  as_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SubRegionParameter.as_dim)
}

// -------------------------------------------------------------------

// NoiseParameter

// optional float gaussian_std = 1 [default = 0];
inline bool NoiseParameter::has_gaussian_std() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoiseParameter::set_has_gaussian_std() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoiseParameter::clear_has_gaussian_std() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoiseParameter::clear_gaussian_std() {
  gaussian_std_ = 0;
  clear_has_gaussian_std();
}
inline float NoiseParameter::gaussian_std() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.gaussian_std)
  return gaussian_std_;
}
inline void NoiseParameter::set_gaussian_std(float value) {
  set_has_gaussian_std();
  gaussian_std_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.gaussian_std)
}

// optional float uniform_range = 2 [default = 0];
inline bool NoiseParameter::has_uniform_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoiseParameter::set_has_uniform_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoiseParameter::clear_has_uniform_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoiseParameter::clear_uniform_range() {
  uniform_range_ = 0;
  clear_has_uniform_range();
}
inline float NoiseParameter::uniform_range() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.uniform_range)
  return uniform_range_;
}
inline void NoiseParameter::set_uniform_range(float value) {
  set_has_uniform_range();
  uniform_range_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.uniform_range)
}

// optional float bias = 3 [default = 0];
inline bool NoiseParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoiseParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoiseParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoiseParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float NoiseParameter::bias() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.bias)
  return bias_;
}
inline void NoiseParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.bias)
}

// -------------------------------------------------------------------

// HotspotParameter

// optional float gaussian_std = 1 [default = 1];
inline bool HotspotParameter::has_gaussian_std() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HotspotParameter::set_has_gaussian_std() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HotspotParameter::clear_has_gaussian_std() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HotspotParameter::clear_gaussian_std() {
  gaussian_std_ = 1;
  clear_has_gaussian_std();
}
inline float HotspotParameter::gaussian_std() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.gaussian_std)
  return gaussian_std_;
}
inline void HotspotParameter::set_gaussian_std(float value) {
  set_has_gaussian_std();
  gaussian_std_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.gaussian_std)
}

// optional uint32 output_height = 2 [default = 0];
inline bool HotspotParameter::has_output_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HotspotParameter::set_has_output_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HotspotParameter::clear_has_output_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HotspotParameter::clear_output_height() {
  output_height_ = 0u;
  clear_has_output_height();
}
inline ::google::protobuf::uint32 HotspotParameter::output_height() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.output_height)
  return output_height_;
}
inline void HotspotParameter::set_output_height(::google::protobuf::uint32 value) {
  set_has_output_height();
  output_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.output_height)
}

// optional uint32 output_width = 3 [default = 0];
inline bool HotspotParameter::has_output_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HotspotParameter::set_has_output_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HotspotParameter::clear_has_output_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HotspotParameter::clear_output_width() {
  output_width_ = 0u;
  clear_has_output_width();
}
inline ::google::protobuf::uint32 HotspotParameter::output_width() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.output_width)
  return output_width_;
}
inline void HotspotParameter::set_output_width(::google::protobuf::uint32 value) {
  set_has_output_width();
  output_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.output_width)
}

// optional uint32 data_height = 4 [default = 0];
inline bool HotspotParameter::has_data_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HotspotParameter::set_has_data_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HotspotParameter::clear_has_data_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HotspotParameter::clear_data_height() {
  data_height_ = 0u;
  clear_has_data_height();
}
inline ::google::protobuf::uint32 HotspotParameter::data_height() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.data_height)
  return data_height_;
}
inline void HotspotParameter::set_data_height(::google::protobuf::uint32 value) {
  set_has_data_height();
  data_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.data_height)
}

// optional uint32 data_width = 5 [default = 0];
inline bool HotspotParameter::has_data_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HotspotParameter::set_has_data_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HotspotParameter::clear_has_data_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HotspotParameter::clear_data_width() {
  data_width_ = 0u;
  clear_has_data_width();
}
inline ::google::protobuf::uint32 HotspotParameter::data_width() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.data_width)
  return data_width_;
}
inline void HotspotParameter::set_data_width(::google::protobuf::uint32 value) {
  set_has_data_width();
  data_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.data_width)
}

// optional bool mean_removed = 6 [default = true];
inline bool HotspotParameter::has_mean_removed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HotspotParameter::set_has_mean_removed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HotspotParameter::clear_has_mean_removed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HotspotParameter::clear_mean_removed() {
  mean_removed_ = true;
  clear_has_mean_removed();
}
inline bool HotspotParameter::mean_removed() const {
  // @@protoc_insertion_point(field_get:caffe.HotspotParameter.mean_removed)
  return mean_removed_;
}
inline void HotspotParameter::set_mean_removed(bool value) {
  set_has_mean_removed();
  mean_removed_ = value;
  // @@protoc_insertion_point(field_set:caffe.HotspotParameter.mean_removed)
}

// -------------------------------------------------------------------

// PredictBoxParameter

// optional uint32 stride = 1 [default = 2];
inline bool PredictBoxParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PredictBoxParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PredictBoxParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PredictBoxParameter::clear_stride() {
  stride_ = 2u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PredictBoxParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.stride)
  return stride_;
}
inline void PredictBoxParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.stride)
}

// optional uint32 receptive_field = 2 [default = 12];
inline bool PredictBoxParameter::has_receptive_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PredictBoxParameter::set_has_receptive_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PredictBoxParameter::clear_has_receptive_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PredictBoxParameter::clear_receptive_field() {
  receptive_field_ = 12u;
  clear_has_receptive_field();
}
inline ::google::protobuf::uint32 PredictBoxParameter::receptive_field() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.receptive_field)
  return receptive_field_;
}
inline void PredictBoxParameter::set_receptive_field(::google::protobuf::uint32 value) {
  set_has_receptive_field();
  receptive_field_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.receptive_field)
}

// optional bool nms = 3 [default = true];
inline bool PredictBoxParameter::has_nms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PredictBoxParameter::set_has_nms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PredictBoxParameter::clear_has_nms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PredictBoxParameter::clear_nms() {
  nms_ = true;
  clear_has_nms();
}
inline bool PredictBoxParameter::nms() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.nms)
  return nms_;
}
inline void PredictBoxParameter::set_nms(bool value) {
  set_has_nms();
  nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.nms)
}

// optional bool output_vector = 4 [default = true];
inline bool PredictBoxParameter::has_output_vector() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PredictBoxParameter::set_has_output_vector() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PredictBoxParameter::clear_has_output_vector() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PredictBoxParameter::clear_output_vector() {
  output_vector_ = true;
  clear_has_output_vector();
}
inline bool PredictBoxParameter::output_vector() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.output_vector)
  return output_vector_;
}
inline void PredictBoxParameter::set_output_vector(bool value) {
  set_has_output_vector();
  output_vector_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.output_vector)
}

// optional float positive_thresh = 5 [default = 0.5];
inline bool PredictBoxParameter::has_positive_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PredictBoxParameter::set_has_positive_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PredictBoxParameter::clear_has_positive_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PredictBoxParameter::clear_positive_thresh() {
  positive_thresh_ = 0.5f;
  clear_has_positive_thresh();
}
inline float PredictBoxParameter::positive_thresh() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.positive_thresh)
  return positive_thresh_;
}
inline void PredictBoxParameter::set_positive_thresh(float value) {
  set_has_positive_thresh();
  positive_thresh_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.positive_thresh)
}

// optional bool bbreg_exp = 6 [default = true];
inline bool PredictBoxParameter::has_bbreg_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PredictBoxParameter::set_has_bbreg_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PredictBoxParameter::clear_has_bbreg_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PredictBoxParameter::clear_bbreg_exp() {
  bbreg_exp_ = true;
  clear_has_bbreg_exp();
}
inline bool PredictBoxParameter::bbreg_exp() const {
  // @@protoc_insertion_point(field_get:caffe.PredictBoxParameter.bbreg_exp)
  return bbreg_exp_;
}
inline void PredictBoxParameter::set_bbreg_exp(bool value) {
  set_has_bbreg_exp();
  bbreg_exp_ = value;
  // @@protoc_insertion_point(field_set:caffe.PredictBoxParameter.bbreg_exp)
}

// -------------------------------------------------------------------

// FCNDataParameter

// optional uint32 template_h = 1 [default = 48];
inline bool FCNDataParameter::has_template_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCNDataParameter::set_has_template_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCNDataParameter::clear_has_template_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCNDataParameter::clear_template_h() {
  template_h_ = 48u;
  clear_has_template_h();
}
inline ::google::protobuf::uint32 FCNDataParameter::template_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.template_h)
  return template_h_;
}
inline void FCNDataParameter::set_template_h(::google::protobuf::uint32 value) {
  set_has_template_h();
  template_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.template_h)
}

// optional uint32 template_w = 2 [default = 42];
inline bool FCNDataParameter::has_template_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCNDataParameter::set_has_template_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCNDataParameter::clear_has_template_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCNDataParameter::clear_template_w() {
  template_w_ = 42u;
  clear_has_template_w();
}
inline ::google::protobuf::uint32 FCNDataParameter::template_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.template_w)
  return template_w_;
}
inline void FCNDataParameter::set_template_w(::google::protobuf::uint32 value) {
  set_has_template_w();
  template_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.template_w)
}

// optional float expand_left = 3 [default = 0.25];
inline bool FCNDataParameter::has_expand_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCNDataParameter::set_has_expand_left() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCNDataParameter::clear_has_expand_left() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCNDataParameter::clear_expand_left() {
  expand_left_ = 0.25f;
  clear_has_expand_left();
}
inline float FCNDataParameter::expand_left() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_left)
  return expand_left_;
}
inline void FCNDataParameter::set_expand_left(float value) {
  set_has_expand_left();
  expand_left_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_left)
}

// optional float expand_right = 4 [default = 0.25];
inline bool FCNDataParameter::has_expand_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCNDataParameter::set_has_expand_right() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCNDataParameter::clear_has_expand_right() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCNDataParameter::clear_expand_right() {
  expand_right_ = 0.25f;
  clear_has_expand_right();
}
inline float FCNDataParameter::expand_right() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_right)
  return expand_right_;
}
inline void FCNDataParameter::set_expand_right(float value) {
  set_has_expand_right();
  expand_right_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_right)
}

// optional float expand_top = 5 [default = 0.5];
inline bool FCNDataParameter::has_expand_top() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCNDataParameter::set_has_expand_top() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCNDataParameter::clear_has_expand_top() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCNDataParameter::clear_expand_top() {
  expand_top_ = 0.5f;
  clear_has_expand_top();
}
inline float FCNDataParameter::expand_top() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_top)
  return expand_top_;
}
inline void FCNDataParameter::set_expand_top(float value) {
  set_has_expand_top();
  expand_top_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_top)
}

// optional float expand_bottom = 6 [default = 0.25];
inline bool FCNDataParameter::has_expand_bottom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FCNDataParameter::set_has_expand_bottom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FCNDataParameter::clear_has_expand_bottom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FCNDataParameter::clear_expand_bottom() {
  expand_bottom_ = 0.25f;
  clear_has_expand_bottom();
}
inline float FCNDataParameter::expand_bottom() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.expand_bottom)
  return expand_bottom_;
}
inline void FCNDataParameter::set_expand_bottom(float value) {
  set_has_expand_bottom();
  expand_bottom_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.expand_bottom)
}

// optional float roi_multiply_h = 7 [default = 5];
inline bool FCNDataParameter::has_roi_multiply_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FCNDataParameter::set_has_roi_multiply_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FCNDataParameter::clear_has_roi_multiply_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FCNDataParameter::clear_roi_multiply_h() {
  roi_multiply_h_ = 5;
  clear_has_roi_multiply_h();
}
inline float FCNDataParameter::roi_multiply_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.roi_multiply_h)
  return roi_multiply_h_;
}
inline void FCNDataParameter::set_roi_multiply_h(float value) {
  set_has_roi_multiply_h();
  roi_multiply_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.roi_multiply_h)
}

// optional float roi_multiply_w = 8 [default = 5];
inline bool FCNDataParameter::has_roi_multiply_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FCNDataParameter::set_has_roi_multiply_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FCNDataParameter::clear_has_roi_multiply_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FCNDataParameter::clear_roi_multiply_w() {
  roi_multiply_w_ = 5;
  clear_has_roi_multiply_w();
}
inline float FCNDataParameter::roi_multiply_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.roi_multiply_w)
  return roi_multiply_w_;
}
inline void FCNDataParameter::set_roi_multiply_w(float value) {
  set_has_roi_multiply_w();
  roi_multiply_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.roi_multiply_w)
}

// optional float scale_step = 9 [default = 1.1];
inline bool FCNDataParameter::has_scale_step() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FCNDataParameter::set_has_scale_step() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FCNDataParameter::clear_has_scale_step() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FCNDataParameter::clear_scale_step() {
  scale_step_ = 1.1f;
  clear_has_scale_step();
}
inline float FCNDataParameter::scale_step() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.scale_step)
  return scale_step_;
}
inline void FCNDataParameter::set_scale_step(float value) {
  set_has_scale_step();
  scale_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.scale_step)
}

// optional int32 scale_step_num = 10 [default = 5];
inline bool FCNDataParameter::has_scale_step_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FCNDataParameter::set_has_scale_step_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FCNDataParameter::clear_has_scale_step_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FCNDataParameter::clear_scale_step_num() {
  scale_step_num_ = 5;
  clear_has_scale_step_num();
}
inline ::google::protobuf::int32 FCNDataParameter::scale_step_num() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.scale_step_num)
  return scale_step_num_;
}
inline void FCNDataParameter::set_scale_step_num(::google::protobuf::int32 value) {
  set_has_scale_step_num();
  scale_step_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.scale_step_num)
}

// optional int32 gaussian_size_h = 11 [default = 7];
inline bool FCNDataParameter::has_gaussian_size_h() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FCNDataParameter::set_has_gaussian_size_h() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FCNDataParameter::clear_has_gaussian_size_h() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FCNDataParameter::clear_gaussian_size_h() {
  gaussian_size_h_ = 7;
  clear_has_gaussian_size_h();
}
inline ::google::protobuf::int32 FCNDataParameter::gaussian_size_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_size_h)
  return gaussian_size_h_;
}
inline void FCNDataParameter::set_gaussian_size_h(::google::protobuf::int32 value) {
  set_has_gaussian_size_h();
  gaussian_size_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_size_h)
}

// optional int32 gaussian_size_w = 12 [default = 7];
inline bool FCNDataParameter::has_gaussian_size_w() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FCNDataParameter::set_has_gaussian_size_w() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FCNDataParameter::clear_has_gaussian_size_w() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FCNDataParameter::clear_gaussian_size_w() {
  gaussian_size_w_ = 7;
  clear_has_gaussian_size_w();
}
inline ::google::protobuf::int32 FCNDataParameter::gaussian_size_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_size_w)
  return gaussian_size_w_;
}
inline void FCNDataParameter::set_gaussian_size_w(::google::protobuf::int32 value) {
  set_has_gaussian_size_w();
  gaussian_size_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_size_w)
}

// optional float gaussian_std_h = 13 [default = 1.5];
inline bool FCNDataParameter::has_gaussian_std_h() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FCNDataParameter::set_has_gaussian_std_h() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FCNDataParameter::clear_has_gaussian_std_h() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FCNDataParameter::clear_gaussian_std_h() {
  gaussian_std_h_ = 1.5f;
  clear_has_gaussian_std_h();
}
inline float FCNDataParameter::gaussian_std_h() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_std_h)
  return gaussian_std_h_;
}
inline void FCNDataParameter::set_gaussian_std_h(float value) {
  set_has_gaussian_std_h();
  gaussian_std_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_std_h)
}

// optional float gaussian_std_w = 14 [default = 1.5];
inline bool FCNDataParameter::has_gaussian_std_w() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FCNDataParameter::set_has_gaussian_std_w() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FCNDataParameter::clear_has_gaussian_std_w() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FCNDataParameter::clear_gaussian_std_w() {
  gaussian_std_w_ = 1.5f;
  clear_has_gaussian_std_w();
}
inline float FCNDataParameter::gaussian_std_w() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.gaussian_std_w)
  return gaussian_std_w_;
}
inline void FCNDataParameter::set_gaussian_std_w(float value) {
  set_has_gaussian_std_w();
  gaussian_std_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.gaussian_std_w)
}

// optional bool use_hog = 15 [default = false];
inline bool FCNDataParameter::has_use_hog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCNDataParameter::set_has_use_hog() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCNDataParameter::clear_has_use_hog() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCNDataParameter::clear_use_hog() {
  use_hog_ = false;
  clear_has_use_hog();
}
inline bool FCNDataParameter::use_hog() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.use_hog)
  return use_hog_;
}
inline void FCNDataParameter::set_use_hog(bool value) {
  set_has_use_hog();
  use_hog_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.use_hog)
}

// optional int32 hog_cell_size = 16 [default = 4];
inline bool FCNDataParameter::has_hog_cell_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FCNDataParameter::set_has_hog_cell_size() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FCNDataParameter::clear_has_hog_cell_size() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FCNDataParameter::clear_hog_cell_size() {
  hog_cell_size_ = 4;
  clear_has_hog_cell_size();
}
inline ::google::protobuf::int32 FCNDataParameter::hog_cell_size() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.hog_cell_size)
  return hog_cell_size_;
}
inline void FCNDataParameter::set_hog_cell_size(::google::protobuf::int32 value) {
  set_has_hog_cell_size();
  hog_cell_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.hog_cell_size)
}

// optional float min_iou = 17 [default = 0.8];
inline bool FCNDataParameter::has_min_iou() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FCNDataParameter::set_has_min_iou() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FCNDataParameter::clear_has_min_iou() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FCNDataParameter::clear_min_iou() {
  min_iou_ = 0.8f;
  clear_has_min_iou();
}
inline float FCNDataParameter::min_iou() const {
  // @@protoc_insertion_point(field_get:caffe.FCNDataParameter.min_iou)
  return min_iou_;
}
inline void FCNDataParameter::set_min_iou(float value) {
  set_has_min_iou();
  min_iou_ = value;
  // @@protoc_insertion_point(field_set:caffe.FCNDataParameter.min_iou)
}

// -------------------------------------------------------------------

// CenterLossParameter

// optional uint32 num_output = 1;
inline bool CenterLossParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CenterLossParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CenterLossParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CenterLossParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 CenterLossParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.num_output)
  return num_output_;
}
inline void CenterLossParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.CenterLossParameter.num_output)
}

// optional .caffe.FillerParameter center_filler = 2;
inline bool CenterLossParameter::has_center_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CenterLossParameter::set_has_center_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CenterLossParameter::clear_has_center_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CenterLossParameter::clear_center_filler() {
  if (center_filler_ != NULL) center_filler_->Clear();
  clear_has_center_filler();
}
inline const ::caffe::FillerParameter& CenterLossParameter::center_filler() const {
  const ::caffe::FillerParameter* p = center_filler_;
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.center_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* CenterLossParameter::release_center_filler() {
  // @@protoc_insertion_point(field_release:caffe.CenterLossParameter.center_filler)
  clear_has_center_filler();
  ::caffe::FillerParameter* temp = center_filler_;
  center_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* CenterLossParameter::mutable_center_filler() {
  set_has_center_filler();
  if (center_filler_ == NULL) {
    center_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.CenterLossParameter.center_filler)
  return center_filler_;
}
inline void CenterLossParameter::set_allocated_center_filler(::caffe::FillerParameter* center_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete center_filler_;
  }
  if (center_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center_filler, submessage_arena);
    }
    set_has_center_filler();
  } else {
    clear_has_center_filler();
  }
  center_filler_ = center_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.CenterLossParameter.center_filler)
}

// optional int32 axis = 3 [default = 1];
inline bool CenterLossParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CenterLossParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CenterLossParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CenterLossParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 CenterLossParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.axis)
  return axis_;
}
inline void CenterLossParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CenterLossParameter.axis)
}

// optional string distance_type = 29 [default = "L2"];
inline bool CenterLossParameter::has_distance_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CenterLossParameter::set_has_distance_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CenterLossParameter::clear_has_distance_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CenterLossParameter::clear_distance_type() {
  distance_type_.ClearToDefaultNoArena(&::caffe::CenterLossParameter::_default_distance_type_.get());
  clear_has_distance_type();
}
inline const ::std::string& CenterLossParameter::distance_type() const {
  // @@protoc_insertion_point(field_get:caffe.CenterLossParameter.distance_type)
  return distance_type_.GetNoArena();
}
inline void CenterLossParameter::set_distance_type(const ::std::string& value) {
  set_has_distance_type();
  distance_type_.SetNoArena(&::caffe::CenterLossParameter::_default_distance_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.CenterLossParameter.distance_type)
}
#if LANG_CXX11
inline void CenterLossParameter::set_distance_type(::std::string&& value) {
  set_has_distance_type();
  distance_type_.SetNoArena(
    &::caffe::CenterLossParameter::_default_distance_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.CenterLossParameter.distance_type)
}
#endif
inline void CenterLossParameter::set_distance_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_distance_type();
  distance_type_.SetNoArena(&::caffe::CenterLossParameter::_default_distance_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.CenterLossParameter.distance_type)
}
inline void CenterLossParameter::set_distance_type(const char* value, size_t size) {
  set_has_distance_type();
  distance_type_.SetNoArena(&::caffe::CenterLossParameter::_default_distance_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.CenterLossParameter.distance_type)
}
inline ::std::string* CenterLossParameter::mutable_distance_type() {
  set_has_distance_type();
  // @@protoc_insertion_point(field_mutable:caffe.CenterLossParameter.distance_type)
  return distance_type_.MutableNoArena(&::caffe::CenterLossParameter::_default_distance_type_.get());
}
inline ::std::string* CenterLossParameter::release_distance_type() {
  // @@protoc_insertion_point(field_release:caffe.CenterLossParameter.distance_type)
  clear_has_distance_type();
  return distance_type_.ReleaseNoArena(&::caffe::CenterLossParameter::_default_distance_type_.get());
}
inline void CenterLossParameter::set_allocated_distance_type(::std::string* distance_type) {
  if (distance_type != NULL) {
    set_has_distance_type();
  } else {
    clear_has_distance_type();
  }
  distance_type_.SetAllocatedNoArena(&::caffe::CenterLossParameter::_default_distance_type_.get(), distance_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.CenterLossParameter.distance_type)
}

// -------------------------------------------------------------------

// FlipParameter

// optional bool flip_width = 1 [default = true];
inline bool FlipParameter::has_flip_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlipParameter::set_has_flip_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlipParameter::clear_has_flip_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlipParameter::clear_flip_width() {
  flip_width_ = true;
  clear_has_flip_width();
}
inline bool FlipParameter::flip_width() const {
  // @@protoc_insertion_point(field_get:caffe.FlipParameter.flip_width)
  return flip_width_;
}
inline void FlipParameter::set_flip_width(bool value) {
  set_has_flip_width();
  flip_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlipParameter.flip_width)
}

// optional bool flip_height = 2 [default = false];
inline bool FlipParameter::has_flip_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlipParameter::set_has_flip_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlipParameter::clear_has_flip_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlipParameter::clear_flip_height() {
  flip_height_ = false;
  clear_has_flip_height();
}
inline bool FlipParameter::flip_height() const {
  // @@protoc_insertion_point(field_get:caffe.FlipParameter.flip_height)
  return flip_height_;
}
inline void FlipParameter::set_flip_height(bool value) {
  set_has_flip_height();
  flip_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlipParameter.flip_height)
}

// -------------------------------------------------------------------

// NormalizeParameter

// optional string normalize_type = 1 [default = "L2"];
inline bool NormalizeParameter::has_normalize_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizeParameter::set_has_normalize_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizeParameter::clear_has_normalize_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizeParameter::clear_normalize_type() {
  normalize_type_.ClearToDefaultNoArena(&::caffe::NormalizeParameter::_default_normalize_type_.get());
  clear_has_normalize_type();
}
inline const ::std::string& NormalizeParameter::normalize_type() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.normalize_type)
  return normalize_type_.GetNoArena();
}
inline void NormalizeParameter::set_normalize_type(const ::std::string& value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(&::caffe::NormalizeParameter::_default_normalize_type_.get(), value);
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.normalize_type)
}
#if LANG_CXX11
inline void NormalizeParameter::set_normalize_type(::std::string&& value) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(
    &::caffe::NormalizeParameter::_default_normalize_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.NormalizeParameter.normalize_type)
}
#endif
inline void NormalizeParameter::set_normalize_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_normalize_type();
  normalize_type_.SetNoArena(&::caffe::NormalizeParameter::_default_normalize_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NormalizeParameter.normalize_type)
}
inline void NormalizeParameter::set_normalize_type(const char* value, size_t size) {
  set_has_normalize_type();
  normalize_type_.SetNoArena(&::caffe::NormalizeParameter::_default_normalize_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NormalizeParameter.normalize_type)
}
inline ::std::string* NormalizeParameter::mutable_normalize_type() {
  set_has_normalize_type();
  // @@protoc_insertion_point(field_mutable:caffe.NormalizeParameter.normalize_type)
  return normalize_type_.MutableNoArena(&::caffe::NormalizeParameter::_default_normalize_type_.get());
}
inline ::std::string* NormalizeParameter::release_normalize_type() {
  // @@protoc_insertion_point(field_release:caffe.NormalizeParameter.normalize_type)
  clear_has_normalize_type();
  return normalize_type_.ReleaseNoArena(&::caffe::NormalizeParameter::_default_normalize_type_.get());
}
inline void NormalizeParameter::set_allocated_normalize_type(::std::string* normalize_type) {
  if (normalize_type != NULL) {
    set_has_normalize_type();
  } else {
    clear_has_normalize_type();
  }
  normalize_type_.SetAllocatedNoArena(&::caffe::NormalizeParameter::_default_normalize_type_.get(), normalize_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.NormalizeParameter.normalize_type)
}

// optional bool fix_gradient = 2 [default = false];
inline bool NormalizeParameter::has_fix_gradient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizeParameter::set_has_fix_gradient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizeParameter::clear_has_fix_gradient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizeParameter::clear_fix_gradient() {
  fix_gradient_ = false;
  clear_has_fix_gradient();
}
inline bool NormalizeParameter::fix_gradient() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.fix_gradient)
  return fix_gradient_;
}
inline void NormalizeParameter::set_fix_gradient(bool value) {
  set_has_fix_gradient();
  fix_gradient_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.fix_gradient)
}

// optional bool bp_norm = 3 [default = false];
inline bool NormalizeParameter::has_bp_norm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizeParameter::set_has_bp_norm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizeParameter::clear_has_bp_norm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizeParameter::clear_bp_norm() {
  bp_norm_ = false;
  clear_has_bp_norm();
}
inline bool NormalizeParameter::bp_norm() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.bp_norm)
  return bp_norm_;
}
inline void NormalizeParameter::set_bp_norm(bool value) {
  set_has_bp_norm();
  bp_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.bp_norm)
}

// -------------------------------------------------------------------

// GeneralContrastiveParameter

// optional float positive_margin = 1 [default = 0];
inline bool GeneralContrastiveParameter::has_positive_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralContrastiveParameter::set_has_positive_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralContrastiveParameter::clear_has_positive_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralContrastiveParameter::clear_positive_margin() {
  positive_margin_ = 0;
  clear_has_positive_margin();
}
inline float GeneralContrastiveParameter::positive_margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_margin)
  return positive_margin_;
}
inline void GeneralContrastiveParameter::set_positive_margin(float value) {
  set_has_positive_margin();
  positive_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_margin)
}

// optional float negative_margin = 2 [default = 1];
inline bool GeneralContrastiveParameter::has_negative_margin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GeneralContrastiveParameter::set_has_negative_margin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GeneralContrastiveParameter::clear_has_negative_margin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GeneralContrastiveParameter::clear_negative_margin() {
  negative_margin_ = 1;
  clear_has_negative_margin();
}
inline float GeneralContrastiveParameter::negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.negative_margin)
  return negative_margin_;
}
inline void GeneralContrastiveParameter::set_negative_margin(float value) {
  set_has_negative_margin();
  negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.negative_margin)
}

// optional float positive_weight = 3 [default = 1];
inline bool GeneralContrastiveParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GeneralContrastiveParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GeneralContrastiveParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GeneralContrastiveParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
inline float GeneralContrastiveParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_weight)
  return positive_weight_;
}
inline void GeneralContrastiveParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_weight)
}

// optional float negative_weight = 4 [default = 1];
inline bool GeneralContrastiveParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GeneralContrastiveParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GeneralContrastiveParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GeneralContrastiveParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
inline float GeneralContrastiveParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.negative_weight)
  return negative_weight_;
}
inline void GeneralContrastiveParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.negative_weight)
}

// optional float normalize_negative = 5 [default = 0];
inline bool GeneralContrastiveParameter::has_normalize_negative() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeneralContrastiveParameter::set_has_normalize_negative() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeneralContrastiveParameter::clear_has_normalize_negative() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeneralContrastiveParameter::clear_normalize_negative() {
  normalize_negative_ = 0;
  clear_has_normalize_negative();
}
inline float GeneralContrastiveParameter::normalize_negative() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.normalize_negative)
  return normalize_negative_;
}
inline void GeneralContrastiveParameter::set_normalize_negative(float value) {
  set_has_normalize_negative();
  normalize_negative_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.normalize_negative)
}

// optional float positive_outlier_thresh = 6 [default = 4];
inline bool GeneralContrastiveParameter::has_positive_outlier_thresh() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GeneralContrastiveParameter::set_has_positive_outlier_thresh() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GeneralContrastiveParameter::clear_has_positive_outlier_thresh() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GeneralContrastiveParameter::clear_positive_outlier_thresh() {
  positive_outlier_thresh_ = 4;
  clear_has_positive_outlier_thresh();
}
inline float GeneralContrastiveParameter::positive_outlier_thresh() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_outlier_thresh)
  return positive_outlier_thresh_;
}
inline void GeneralContrastiveParameter::set_positive_outlier_thresh(float value) {
  set_has_positive_outlier_thresh();
  positive_outlier_thresh_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_outlier_thresh)
}

// optional bool square = 7 [default = false];
inline bool GeneralContrastiveParameter::has_square() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeneralContrastiveParameter::set_has_square() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeneralContrastiveParameter::clear_has_square() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeneralContrastiveParameter::clear_square() {
  square_ = false;
  clear_has_square();
}
inline bool GeneralContrastiveParameter::square() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.square)
  return square_;
}
inline void GeneralContrastiveParameter::set_square(bool value) {
  set_has_square();
  square_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.square)
}

// optional bool max_negative_only = 8 [default = false];
inline bool GeneralContrastiveParameter::has_max_negative_only() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GeneralContrastiveParameter::set_has_max_negative_only() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GeneralContrastiveParameter::clear_has_max_negative_only() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GeneralContrastiveParameter::clear_max_negative_only() {
  max_negative_only_ = false;
  clear_has_max_negative_only();
}
inline bool GeneralContrastiveParameter::max_negative_only() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.max_negative_only)
  return max_negative_only_;
}
inline void GeneralContrastiveParameter::set_max_negative_only(bool value) {
  set_has_max_negative_only();
  max_negative_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.max_negative_only)
}

// optional bool max_positive_only = 9 [default = false];
inline bool GeneralContrastiveParameter::has_max_positive_only() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GeneralContrastiveParameter::set_has_max_positive_only() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GeneralContrastiveParameter::clear_has_max_positive_only() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GeneralContrastiveParameter::clear_max_positive_only() {
  max_positive_only_ = false;
  clear_has_max_positive_only();
}
inline bool GeneralContrastiveParameter::max_positive_only() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.max_positive_only)
  return max_positive_only_;
}
inline void GeneralContrastiveParameter::set_max_positive_only(bool value) {
  set_has_max_positive_only();
  max_positive_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.max_positive_only)
}

// optional bool positive_first = 10 [default = false];
inline bool GeneralContrastiveParameter::has_positive_first() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GeneralContrastiveParameter::set_has_positive_first() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GeneralContrastiveParameter::clear_has_positive_first() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GeneralContrastiveParameter::clear_positive_first() {
  positive_first_ = false;
  clear_has_positive_first();
}
inline bool GeneralContrastiveParameter::positive_first() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_first)
  return positive_first_;
}
inline void GeneralContrastiveParameter::set_positive_first(bool value) {
  set_has_positive_first();
  positive_first_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_first)
}

// optional float positive_upper_bound = 11 [default = 1];
inline bool GeneralContrastiveParameter::has_positive_upper_bound() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GeneralContrastiveParameter::set_has_positive_upper_bound() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GeneralContrastiveParameter::clear_has_positive_upper_bound() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GeneralContrastiveParameter::clear_positive_upper_bound() {
  positive_upper_bound_ = 1;
  clear_has_positive_upper_bound();
}
inline float GeneralContrastiveParameter::positive_upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.positive_upper_bound)
  return positive_upper_bound_;
}
inline void GeneralContrastiveParameter::set_positive_upper_bound(float value) {
  set_has_positive_upper_bound();
  positive_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.positive_upper_bound)
}

// optional bool exp_negative_weight = 12 [default = false];
inline bool GeneralContrastiveParameter::has_exp_negative_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GeneralContrastiveParameter::set_has_exp_negative_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GeneralContrastiveParameter::clear_has_exp_negative_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GeneralContrastiveParameter::clear_exp_negative_weight() {
  exp_negative_weight_ = false;
  clear_has_exp_negative_weight();
}
inline bool GeneralContrastiveParameter::exp_negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.exp_negative_weight)
  return exp_negative_weight_;
}
inline void GeneralContrastiveParameter::set_exp_negative_weight(bool value) {
  set_has_exp_negative_weight();
  exp_negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.exp_negative_weight)
}

// optional bool add_intra_mae = 13 [default = false];
inline bool GeneralContrastiveParameter::has_add_intra_mae() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GeneralContrastiveParameter::set_has_add_intra_mae() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GeneralContrastiveParameter::clear_has_add_intra_mae() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GeneralContrastiveParameter::clear_add_intra_mae() {
  add_intra_mae_ = false;
  clear_has_add_intra_mae();
}
inline bool GeneralContrastiveParameter::add_intra_mae() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.add_intra_mae)
  return add_intra_mae_;
}
inline void GeneralContrastiveParameter::set_add_intra_mae(bool value) {
  set_has_add_intra_mae();
  add_intra_mae_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.add_intra_mae)
}

// optional float max_negative_margin = 14 [default = 1.2];
inline bool GeneralContrastiveParameter::has_max_negative_margin() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GeneralContrastiveParameter::set_has_max_negative_margin() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GeneralContrastiveParameter::clear_has_max_negative_margin() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GeneralContrastiveParameter::clear_max_negative_margin() {
  max_negative_margin_ = 1.2f;
  clear_has_max_negative_margin();
}
inline float GeneralContrastiveParameter::max_negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralContrastiveParameter.max_negative_margin)
  return max_negative_margin_;
}
inline void GeneralContrastiveParameter::set_max_negative_margin(float value) {
  set_has_max_negative_margin();
  max_negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralContrastiveParameter.max_negative_margin)
}

// -------------------------------------------------------------------

// BatchContrastiveParameter

// optional float positive_margin = 1 [default = 1];
inline bool BatchContrastiveParameter::has_positive_margin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchContrastiveParameter::set_has_positive_margin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchContrastiveParameter::clear_has_positive_margin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchContrastiveParameter::clear_positive_margin() {
  positive_margin_ = 1;
  clear_has_positive_margin();
}
inline float BatchContrastiveParameter::positive_margin() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.positive_margin)
  return positive_margin_;
}
inline void BatchContrastiveParameter::set_positive_margin(float value) {
  set_has_positive_margin();
  positive_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.positive_margin)
}

// optional float negative_margin = 2 [default = 1];
inline bool BatchContrastiveParameter::has_negative_margin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchContrastiveParameter::set_has_negative_margin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchContrastiveParameter::clear_has_negative_margin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchContrastiveParameter::clear_negative_margin() {
  negative_margin_ = 1;
  clear_has_negative_margin();
}
inline float BatchContrastiveParameter::negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.negative_margin)
  return negative_margin_;
}
inline void BatchContrastiveParameter::set_negative_margin(float value) {
  set_has_negative_margin();
  negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.negative_margin)
}

// optional float positive_weight = 3 [default = 1];
inline bool BatchContrastiveParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatchContrastiveParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatchContrastiveParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatchContrastiveParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
inline float BatchContrastiveParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.positive_weight)
  return positive_weight_;
}
inline void BatchContrastiveParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.positive_weight)
}

// optional float negative_weight = 4 [default = 1];
inline bool BatchContrastiveParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatchContrastiveParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatchContrastiveParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatchContrastiveParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
inline float BatchContrastiveParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.negative_weight)
  return negative_weight_;
}
inline void BatchContrastiveParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.negative_weight)
}

// optional bool max_only = 5 [default = false];
inline bool BatchContrastiveParameter::has_max_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchContrastiveParameter::set_has_max_only() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchContrastiveParameter::clear_has_max_only() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchContrastiveParameter::clear_max_only() {
  max_only_ = false;
  clear_has_max_only();
}
inline bool BatchContrastiveParameter::max_only() const {
  // @@protoc_insertion_point(field_get:caffe.BatchContrastiveParameter.max_only)
  return max_only_;
}
inline void BatchContrastiveParameter::set_max_only(bool value) {
  set_has_max_only();
  max_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchContrastiveParameter.max_only)
}

// -------------------------------------------------------------------

// SoftContrastiveParameter

// optional float positive_margin = 1 [default = 1];
inline bool SoftContrastiveParameter::has_positive_margin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoftContrastiveParameter::set_has_positive_margin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoftContrastiveParameter::clear_has_positive_margin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoftContrastiveParameter::clear_positive_margin() {
  positive_margin_ = 1;
  clear_has_positive_margin();
}
inline float SoftContrastiveParameter::positive_margin() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.positive_margin)
  return positive_margin_;
}
inline void SoftContrastiveParameter::set_positive_margin(float value) {
  set_has_positive_margin();
  positive_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.positive_margin)
}

// optional float negative_margin = 2 [default = 1];
inline bool SoftContrastiveParameter::has_negative_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SoftContrastiveParameter::set_has_negative_margin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SoftContrastiveParameter::clear_has_negative_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SoftContrastiveParameter::clear_negative_margin() {
  negative_margin_ = 1;
  clear_has_negative_margin();
}
inline float SoftContrastiveParameter::negative_margin() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.negative_margin)
  return negative_margin_;
}
inline void SoftContrastiveParameter::set_negative_margin(float value) {
  set_has_negative_margin();
  negative_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.negative_margin)
}

// optional float positive_weight = 3 [default = 1];
inline bool SoftContrastiveParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SoftContrastiveParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SoftContrastiveParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SoftContrastiveParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
inline float SoftContrastiveParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.positive_weight)
  return positive_weight_;
}
inline void SoftContrastiveParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.positive_weight)
}

// optional float negative_weight = 4 [default = 1];
inline bool SoftContrastiveParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SoftContrastiveParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SoftContrastiveParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SoftContrastiveParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
inline float SoftContrastiveParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.negative_weight)
  return negative_weight_;
}
inline void SoftContrastiveParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.negative_weight)
}

// optional float exponent_scale = 5 [default = 1];
inline bool SoftContrastiveParameter::has_exponent_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftContrastiveParameter::set_has_exponent_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftContrastiveParameter::clear_has_exponent_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftContrastiveParameter::clear_exponent_scale() {
  exponent_scale_ = 1;
  clear_has_exponent_scale();
}
inline float SoftContrastiveParameter::exponent_scale() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.exponent_scale)
  return exponent_scale_;
}
inline void SoftContrastiveParameter::set_exponent_scale(float value) {
  set_has_exponent_scale();
  exponent_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.exponent_scale)
}

// optional bool square = 6 [default = false];
inline bool SoftContrastiveParameter::has_square() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftContrastiveParameter::set_has_square() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftContrastiveParameter::clear_has_square() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftContrastiveParameter::clear_square() {
  square_ = false;
  clear_has_square();
}
inline bool SoftContrastiveParameter::square() const {
  // @@protoc_insertion_point(field_get:caffe.SoftContrastiveParameter.square)
  return square_;
}
inline void SoftContrastiveParameter::set_square(bool value) {
  set_has_square();
  square_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftContrastiveParameter.square)
}

// -------------------------------------------------------------------

// GeneralTripletParameter

// optional float margin = 1 [default = 0.2];
inline bool GeneralTripletParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GeneralTripletParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GeneralTripletParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GeneralTripletParameter::clear_margin() {
  margin_ = 0.2f;
  clear_has_margin();
}
inline float GeneralTripletParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.margin)
  return margin_;
}
inline void GeneralTripletParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.margin)
}

// optional bool add_center_loss = 2 [default = true];
inline bool GeneralTripletParameter::has_add_center_loss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GeneralTripletParameter::set_has_add_center_loss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GeneralTripletParameter::clear_has_add_center_loss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GeneralTripletParameter::clear_add_center_loss() {
  add_center_loss_ = true;
  clear_has_add_center_loss();
}
inline bool GeneralTripletParameter::add_center_loss() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.add_center_loss)
  return add_center_loss_;
}
inline void GeneralTripletParameter::set_add_center_loss(bool value) {
  set_has_add_center_loss();
  add_center_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.add_center_loss)
}

// optional bool hardest_only = 3 [default = false];
inline bool GeneralTripletParameter::has_hardest_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralTripletParameter::set_has_hardest_only() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralTripletParameter::clear_has_hardest_only() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralTripletParameter::clear_hardest_only() {
  hardest_only_ = false;
  clear_has_hardest_only();
}
inline bool GeneralTripletParameter::hardest_only() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.hardest_only)
  return hardest_only_;
}
inline void GeneralTripletParameter::set_hardest_only(bool value) {
  set_has_hardest_only();
  hardest_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.hardest_only)
}

// optional bool positive_first = 4 [default = false];
inline bool GeneralTripletParameter::has_positive_first() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeneralTripletParameter::set_has_positive_first() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeneralTripletParameter::clear_has_positive_first() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeneralTripletParameter::clear_positive_first() {
  positive_first_ = false;
  clear_has_positive_first();
}
inline bool GeneralTripletParameter::positive_first() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.positive_first)
  return positive_first_;
}
inline void GeneralTripletParameter::set_positive_first(bool value) {
  set_has_positive_first();
  positive_first_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.positive_first)
}

// optional float positive_upper_bound = 5 [default = 1];
inline bool GeneralTripletParameter::has_positive_upper_bound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GeneralTripletParameter::set_has_positive_upper_bound() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GeneralTripletParameter::clear_has_positive_upper_bound() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GeneralTripletParameter::clear_positive_upper_bound() {
  positive_upper_bound_ = 1;
  clear_has_positive_upper_bound();
}
inline float GeneralTripletParameter::positive_upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.positive_upper_bound)
  return positive_upper_bound_;
}
inline void GeneralTripletParameter::set_positive_upper_bound(float value) {
  set_has_positive_upper_bound();
  positive_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.positive_upper_bound)
}

// optional float positive_weight = 6 [default = 1];
inline bool GeneralTripletParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GeneralTripletParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GeneralTripletParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GeneralTripletParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
inline float GeneralTripletParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.positive_weight)
  return positive_weight_;
}
inline void GeneralTripletParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.positive_weight)
}

// optional float negative_weight = 7 [default = 1];
inline bool GeneralTripletParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeneralTripletParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeneralTripletParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeneralTripletParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
inline float GeneralTripletParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.GeneralTripletParameter.negative_weight)
  return negative_weight_;
}
inline void GeneralTripletParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GeneralTripletParameter.negative_weight)
}

// -------------------------------------------------------------------

// SoftTruncationParameter

// optional float c = 1 [default = 2];
inline bool SoftTruncationParameter::has_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftTruncationParameter::set_has_c() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftTruncationParameter::clear_has_c() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftTruncationParameter::clear_c() {
  c_ = 2;
  clear_has_c();
}
inline float SoftTruncationParameter::c() const {
  // @@protoc_insertion_point(field_get:caffe.SoftTruncationParameter.c)
  return c_;
}
inline void SoftTruncationParameter::set_c(float value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftTruncationParameter.c)
}

// -------------------------------------------------------------------

// TruncationParameter

// optional float lower_bound = 1 [default = 0];
inline bool TruncationParameter::has_lower_bound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TruncationParameter::set_has_lower_bound() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TruncationParameter::clear_has_lower_bound() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TruncationParameter::clear_lower_bound() {
  lower_bound_ = 0;
  clear_has_lower_bound();
}
inline float TruncationParameter::lower_bound() const {
  // @@protoc_insertion_point(field_get:caffe.TruncationParameter.lower_bound)
  return lower_bound_;
}
inline void TruncationParameter::set_lower_bound(float value) {
  set_has_lower_bound();
  lower_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.TruncationParameter.lower_bound)
}

// optional float upper_bound = 2 [default = 5];
inline bool TruncationParameter::has_upper_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TruncationParameter::set_has_upper_bound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TruncationParameter::clear_has_upper_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TruncationParameter::clear_upper_bound() {
  upper_bound_ = 5;
  clear_has_upper_bound();
}
inline float TruncationParameter::upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.TruncationParameter.upper_bound)
  return upper_bound_;
}
inline void TruncationParameter::set_upper_bound(float value) {
  set_has_upper_bound();
  upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.TruncationParameter.upper_bound)
}

// -------------------------------------------------------------------

// ProposalParameter

// optional uint32 feat_stride = 1 [default = 16];
inline bool ProposalParameter::has_feat_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProposalParameter::set_has_feat_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProposalParameter::clear_has_feat_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProposalParameter::clear_feat_stride() {
  feat_stride_ = 16u;
  clear_has_feat_stride();
}
inline ::google::protobuf::uint32 ProposalParameter::feat_stride() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.feat_stride)
  return feat_stride_;
}
inline void ProposalParameter::set_feat_stride(::google::protobuf::uint32 value) {
  set_has_feat_stride();
  feat_stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.feat_stride)
}

// optional uint32 base_size = 2 [default = 16];
inline bool ProposalParameter::has_base_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProposalParameter::set_has_base_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProposalParameter::clear_has_base_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProposalParameter::clear_base_size() {
  base_size_ = 16u;
  clear_has_base_size();
}
inline ::google::protobuf::uint32 ProposalParameter::base_size() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.base_size)
  return base_size_;
}
inline void ProposalParameter::set_base_size(::google::protobuf::uint32 value) {
  set_has_base_size();
  base_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.base_size)
}

// optional uint32 min_size = 3 [default = 16];
inline bool ProposalParameter::has_min_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProposalParameter::set_has_min_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProposalParameter::clear_has_min_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProposalParameter::clear_min_size() {
  min_size_ = 16u;
  clear_has_min_size();
}
inline ::google::protobuf::uint32 ProposalParameter::min_size() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.min_size)
  return min_size_;
}
inline void ProposalParameter::set_min_size(::google::protobuf::uint32 value) {
  set_has_min_size();
  min_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.min_size)
}

// repeated float ratio = 4;
inline int ProposalParameter::ratio_size() const {
  return ratio_.size();
}
inline void ProposalParameter::clear_ratio() {
  ratio_.Clear();
}
inline float ProposalParameter::ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.ratio)
  return ratio_.Get(index);
}
inline void ProposalParameter::set_ratio(int index, float value) {
  ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.ratio)
}
inline void ProposalParameter::add_ratio(float value) {
  ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalParameter.ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalParameter::ratio() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalParameter.ratio)
  return ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalParameter::mutable_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalParameter.ratio)
  return &ratio_;
}

// repeated float scale = 5;
inline int ProposalParameter::scale_size() const {
  return scale_.size();
}
inline void ProposalParameter::clear_scale() {
  scale_.Clear();
}
inline float ProposalParameter::scale(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.scale)
  return scale_.Get(index);
}
inline void ProposalParameter::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.scale)
}
inline void ProposalParameter::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ProposalParameter.scale)
}
inline const ::google::protobuf::RepeatedField< float >&
ProposalParameter::scale() const {
  // @@protoc_insertion_point(field_list:caffe.ProposalParameter.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedField< float >*
ProposalParameter::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ProposalParameter.scale)
  return &scale_;
}

// optional uint32 pre_nms_topn = 6 [default = 6000];
inline bool ProposalParameter::has_pre_nms_topn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProposalParameter::set_has_pre_nms_topn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProposalParameter::clear_has_pre_nms_topn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProposalParameter::clear_pre_nms_topn() {
  pre_nms_topn_ = 6000u;
  clear_has_pre_nms_topn();
}
inline ::google::protobuf::uint32 ProposalParameter::pre_nms_topn() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.pre_nms_topn)
  return pre_nms_topn_;
}
inline void ProposalParameter::set_pre_nms_topn(::google::protobuf::uint32 value) {
  set_has_pre_nms_topn();
  pre_nms_topn_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.pre_nms_topn)
}

// optional uint32 post_nms_topn = 7 [default = 300];
inline bool ProposalParameter::has_post_nms_topn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProposalParameter::set_has_post_nms_topn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProposalParameter::clear_has_post_nms_topn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProposalParameter::clear_post_nms_topn() {
  post_nms_topn_ = 300u;
  clear_has_post_nms_topn();
}
inline ::google::protobuf::uint32 ProposalParameter::post_nms_topn() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.post_nms_topn)
  return post_nms_topn_;
}
inline void ProposalParameter::set_post_nms_topn(::google::protobuf::uint32 value) {
  set_has_post_nms_topn();
  post_nms_topn_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.post_nms_topn)
}

// optional float nms_thresh = 8 [default = 0.7];
inline bool ProposalParameter::has_nms_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProposalParameter::set_has_nms_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProposalParameter::clear_has_nms_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProposalParameter::clear_nms_thresh() {
  nms_thresh_ = 0.7f;
  clear_has_nms_thresh();
}
inline float ProposalParameter::nms_thresh() const {
  // @@protoc_insertion_point(field_get:caffe.ProposalParameter.nms_thresh)
  return nms_thresh_;
}
inline void ProposalParameter::set_nms_thresh(float value) {
  set_has_nms_thresh();
  nms_thresh_ = value;
  // @@protoc_insertion_point(field_set:caffe.ProposalParameter.nms_thresh)
}

// -------------------------------------------------------------------

// PSROIPoolingParameter

// required float spatial_scale = 1;
inline bool PSROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PSROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PSROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PSROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 0;
  clear_has_spatial_scale();
}
inline float PSROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void PSROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.spatial_scale)
}

// required int32 output_dim = 2;
inline bool PSROIPoolingParameter::has_output_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PSROIPoolingParameter::set_has_output_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PSROIPoolingParameter::clear_has_output_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PSROIPoolingParameter::clear_output_dim() {
  output_dim_ = 0;
  clear_has_output_dim();
}
inline ::google::protobuf::int32 PSROIPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.output_dim)
  return output_dim_;
}
inline void PSROIPoolingParameter::set_output_dim(::google::protobuf::int32 value) {
  set_has_output_dim();
  output_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.output_dim)
}

// required int32 group_size = 3;
inline bool PSROIPoolingParameter::has_group_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PSROIPoolingParameter::set_has_group_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PSROIPoolingParameter::clear_has_group_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PSROIPoolingParameter::clear_group_size() {
  group_size_ = 0;
  clear_has_group_size();
}
inline ::google::protobuf::int32 PSROIPoolingParameter::group_size() const {
  // @@protoc_insertion_point(field_get:caffe.PSROIPoolingParameter.group_size)
  return group_size_;
}
inline void PSROIPoolingParameter::set_group_size(::google::protobuf::int32 value) {
  set_has_group_size();
  group_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PSROIPoolingParameter.group_size)
}

// -------------------------------------------------------------------

// PairwiseParameter

// optional .caffe.PairwiseParameter.PairwiseOp operation = 1 [default = SUM];
inline bool PairwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PairwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PairwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PairwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::PairwiseParameter_PairwiseOp PairwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.PairwiseParameter.operation)
  return static_cast< ::caffe::PairwiseParameter_PairwiseOp >(operation_);
}
inline void PairwiseParameter::set_operation(::caffe::PairwiseParameter_PairwiseOp value) {
  assert(::caffe::PairwiseParameter_PairwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.PairwiseParameter.operation)
}

// repeated float coeff = 2;
inline int PairwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void PairwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float PairwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PairwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void PairwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PairwiseParameter.coeff)
}
inline void PairwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PairwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
PairwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.PairwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
PairwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PairwiseParameter.coeff)
  return &coeff_;
}

// -------------------------------------------------------------------

// SmoothL1Parameter

// optional float turn_point = 1 [default = 1];
inline bool SmoothL1Parameter::has_turn_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmoothL1Parameter::set_has_turn_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmoothL1Parameter::clear_has_turn_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmoothL1Parameter::clear_turn_point() {
  turn_point_ = 1;
  clear_has_turn_point();
}
inline float SmoothL1Parameter::turn_point() const {
  // @@protoc_insertion_point(field_get:caffe.SmoothL1Parameter.turn_point)
  return turn_point_;
}
inline void SmoothL1Parameter::set_turn_point(float value) {
  set_has_turn_point();
  turn_point_ = value;
  // @@protoc_insertion_point(field_set:caffe.SmoothL1Parameter.turn_point)
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::order_size() const {
  return order_.size();
}
inline void PermuteParameter::clear_order() {
  order_.Clear();
}
inline ::google::protobuf::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PermuteParameter.order)
  return order_.Get(index);
}
inline void PermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PermuteParameter.order)
}
inline void PermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PermuteParameter.order)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:caffe.PermuteParameter.order)
  return order_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PermuteParameter.order)
  return &order_;
}

// -------------------------------------------------------------------

// NCAParameter

// optional bool min_negative_only = 1 [default = false];
inline bool NCAParameter::has_min_negative_only() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NCAParameter::set_has_min_negative_only() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NCAParameter::clear_has_min_negative_only() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NCAParameter::clear_min_negative_only() {
  min_negative_only_ = false;
  clear_has_min_negative_only();
}
inline bool NCAParameter::min_negative_only() const {
  // @@protoc_insertion_point(field_get:caffe.NCAParameter.min_negative_only)
  return min_negative_only_;
}
inline void NCAParameter::set_min_negative_only(bool value) {
  set_has_min_negative_only();
  min_negative_only_ = value;
  // @@protoc_insertion_point(field_set:caffe.NCAParameter.min_negative_only)
}

// -------------------------------------------------------------------

// LargeMarginInnerProductParameter

// optional uint32 num_output = 1;
inline bool LargeMarginInnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LargeMarginInnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LargeMarginInnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 LargeMarginInnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.num_output)
  return num_output_;
}
inline void LargeMarginInnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.num_output)
}

// optional .caffe.LargeMarginInnerProductParameter.LargeMarginType type = 2 [default = SINGLE];
inline bool LargeMarginInnerProductParameter::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LargeMarginInnerProductParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LargeMarginInnerProductParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::LargeMarginInnerProductParameter_LargeMarginType LargeMarginInnerProductParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.type)
  return static_cast< ::caffe::LargeMarginInnerProductParameter_LargeMarginType >(type_);
}
inline void LargeMarginInnerProductParameter::set_type(::caffe::LargeMarginInnerProductParameter_LargeMarginType value) {
  assert(::caffe::LargeMarginInnerProductParameter_LargeMarginType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.type)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool LargeMarginInnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LargeMarginInnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LargeMarginInnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& LargeMarginInnerProductParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* LargeMarginInnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.LargeMarginInnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* LargeMarginInnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LargeMarginInnerProductParameter.weight_filler)
  return weight_filler_;
}
inline void LargeMarginInnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.LargeMarginInnerProductParameter.weight_filler)
}

// optional int32 axis = 4 [default = 1];
inline bool LargeMarginInnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LargeMarginInnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LargeMarginInnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 LargeMarginInnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.axis)
  return axis_;
}
inline void LargeMarginInnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.axis)
}

// optional float base = 5 [default = 1];
inline bool LargeMarginInnerProductParameter::has_base() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_base() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LargeMarginInnerProductParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LargeMarginInnerProductParameter::clear_base() {
  base_ = 1;
  clear_has_base();
}
inline float LargeMarginInnerProductParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.base)
  return base_;
}
inline void LargeMarginInnerProductParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.base)
}

// optional float gamma = 6 [default = 0];
inline bool LargeMarginInnerProductParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LargeMarginInnerProductParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LargeMarginInnerProductParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float LargeMarginInnerProductParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.gamma)
  return gamma_;
}
inline void LargeMarginInnerProductParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.gamma)
}

// optional float power = 7 [default = 1];
inline bool LargeMarginInnerProductParameter::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LargeMarginInnerProductParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LargeMarginInnerProductParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float LargeMarginInnerProductParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.power)
  return power_;
}
inline void LargeMarginInnerProductParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.power)
}

// optional int32 iteration = 8 [default = 0];
inline bool LargeMarginInnerProductParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LargeMarginInnerProductParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LargeMarginInnerProductParameter::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
inline ::google::protobuf::int32 LargeMarginInnerProductParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.iteration)
  return iteration_;
}
inline void LargeMarginInnerProductParameter::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.iteration)
}

// optional float lambda_min = 9 [default = 0];
inline bool LargeMarginInnerProductParameter::has_lambda_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LargeMarginInnerProductParameter::set_has_lambda_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LargeMarginInnerProductParameter::clear_has_lambda_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LargeMarginInnerProductParameter::clear_lambda_min() {
  lambda_min_ = 0;
  clear_has_lambda_min();
}
inline float LargeMarginInnerProductParameter::lambda_min() const {
  // @@protoc_insertion_point(field_get:caffe.LargeMarginInnerProductParameter.lambda_min)
  return lambda_min_;
}
inline void LargeMarginInnerProductParameter::set_lambda_min(float value) {
  set_has_lambda_min();
  lambda_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LargeMarginInnerProductParameter.lambda_min)
}

// -------------------------------------------------------------------

// LabelSpecificRescaleParameter

// optional float positive_weight = 1 [default = 1];
inline bool LabelSpecificRescaleParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LabelSpecificRescaleParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LabelSpecificRescaleParameter::clear_positive_weight() {
  positive_weight_ = 1;
  clear_has_positive_weight();
}
inline float LabelSpecificRescaleParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight)
  return positive_weight_;
}
inline void LabelSpecificRescaleParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight)
}

// optional float negative_weight = 2 [default = 1];
inline bool LabelSpecificRescaleParameter::has_negative_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_negative_weight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LabelSpecificRescaleParameter::clear_has_negative_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LabelSpecificRescaleParameter::clear_negative_weight() {
  negative_weight_ = 1;
  clear_has_negative_weight();
}
inline float LabelSpecificRescaleParameter::negative_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.negative_weight)
  return negative_weight_;
}
inline void LabelSpecificRescaleParameter::set_negative_weight(float value) {
  set_has_negative_weight();
  negative_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.negative_weight)
}

// optional float positive_lower_bound = 3 [default = 0];
inline bool LabelSpecificRescaleParameter::has_positive_lower_bound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_positive_lower_bound() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelSpecificRescaleParameter::clear_has_positive_lower_bound() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelSpecificRescaleParameter::clear_positive_lower_bound() {
  positive_lower_bound_ = 0;
  clear_has_positive_lower_bound();
}
inline float LabelSpecificRescaleParameter::positive_lower_bound() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_lower_bound)
  return positive_lower_bound_;
}
inline void LabelSpecificRescaleParameter::set_positive_lower_bound(float value) {
  set_has_positive_lower_bound();
  positive_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_lower_bound)
}

// optional float negative_upper_bound = 4 [default = 0];
inline bool LabelSpecificRescaleParameter::has_negative_upper_bound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_negative_upper_bound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelSpecificRescaleParameter::clear_has_negative_upper_bound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelSpecificRescaleParameter::clear_negative_upper_bound() {
  negative_upper_bound_ = 0;
  clear_has_negative_upper_bound();
}
inline float LabelSpecificRescaleParameter::negative_upper_bound() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.negative_upper_bound)
  return negative_upper_bound_;
}
inline void LabelSpecificRescaleParameter::set_negative_upper_bound(float value) {
  set_has_negative_upper_bound();
  negative_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.negative_upper_bound)
}

// optional bool rescale_test = 5 [default = false];
inline bool LabelSpecificRescaleParameter::has_rescale_test() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_rescale_test() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LabelSpecificRescaleParameter::clear_has_rescale_test() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LabelSpecificRescaleParameter::clear_rescale_test() {
  rescale_test_ = false;
  clear_has_rescale_test();
}
inline bool LabelSpecificRescaleParameter::rescale_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.rescale_test)
  return rescale_test_;
}
inline void LabelSpecificRescaleParameter::set_rescale_test(bool value) {
  set_has_rescale_test();
  rescale_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.rescale_test)
}

// optional bool for_ip = 6 [default = false];
inline bool LabelSpecificRescaleParameter::has_for_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_for_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LabelSpecificRescaleParameter::clear_has_for_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LabelSpecificRescaleParameter::clear_for_ip() {
  for_ip_ = false;
  clear_has_for_ip();
}
inline bool LabelSpecificRescaleParameter::for_ip() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.for_ip)
  return for_ip_;
}
inline void LabelSpecificRescaleParameter::set_for_ip(bool value) {
  set_has_for_ip();
  for_ip_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.for_ip)
}

// optional float positive_weight_base = 7 [default = 0];
inline bool LabelSpecificRescaleParameter::has_positive_weight_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_positive_weight_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelSpecificRescaleParameter::clear_has_positive_weight_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelSpecificRescaleParameter::clear_positive_weight_base() {
  positive_weight_base_ = 0;
  clear_has_positive_weight_base();
}
inline float LabelSpecificRescaleParameter::positive_weight_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight_base)
  return positive_weight_base_;
}
inline void LabelSpecificRescaleParameter::set_positive_weight_base(float value) {
  set_has_positive_weight_base();
  positive_weight_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight_base)
}

// optional float gamma = 8 [default = 0];
inline bool LabelSpecificRescaleParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LabelSpecificRescaleParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LabelSpecificRescaleParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float LabelSpecificRescaleParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.gamma)
  return gamma_;
}
inline void LabelSpecificRescaleParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.gamma)
}

// optional float power = 9 [default = 1];
inline bool LabelSpecificRescaleParameter::has_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LabelSpecificRescaleParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LabelSpecificRescaleParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float LabelSpecificRescaleParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.power)
  return power_;
}
inline void LabelSpecificRescaleParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.power)
}

// optional float positive_weight_min = 10 [default = 0];
inline bool LabelSpecificRescaleParameter::has_positive_weight_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_positive_weight_min() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LabelSpecificRescaleParameter::clear_has_positive_weight_min() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LabelSpecificRescaleParameter::clear_positive_weight_min() {
  positive_weight_min_ = 0;
  clear_has_positive_weight_min();
}
inline float LabelSpecificRescaleParameter::positive_weight_min() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight_min)
  return positive_weight_min_;
}
inline void LabelSpecificRescaleParameter::set_positive_weight_min(float value) {
  set_has_positive_weight_min();
  positive_weight_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight_min)
}

// optional float positive_weight_max = 11 [default = 0];
inline bool LabelSpecificRescaleParameter::has_positive_weight_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_positive_weight_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LabelSpecificRescaleParameter::clear_has_positive_weight_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LabelSpecificRescaleParameter::clear_positive_weight_max() {
  positive_weight_max_ = 0;
  clear_has_positive_weight_max();
}
inline float LabelSpecificRescaleParameter::positive_weight_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.positive_weight_max)
  return positive_weight_max_;
}
inline void LabelSpecificRescaleParameter::set_positive_weight_max(float value) {
  set_has_positive_weight_max();
  positive_weight_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.positive_weight_max)
}

// optional uint32 iteration = 12 [default = 0];
inline bool LabelSpecificRescaleParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LabelSpecificRescaleParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LabelSpecificRescaleParameter::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
inline ::google::protobuf::uint32 LabelSpecificRescaleParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.iteration)
  return iteration_;
}
inline void LabelSpecificRescaleParameter::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.iteration)
}

// optional bool bias_fix = 13 [default = false];
inline bool LabelSpecificRescaleParameter::has_bias_fix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_bias_fix() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LabelSpecificRescaleParameter::clear_has_bias_fix() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LabelSpecificRescaleParameter::clear_bias_fix() {
  bias_fix_ = false;
  clear_has_bias_fix();
}
inline bool LabelSpecificRescaleParameter::bias_fix() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.bias_fix)
  return bias_fix_;
}
inline void LabelSpecificRescaleParameter::set_bias_fix(bool value) {
  set_has_bias_fix();
  bias_fix_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.bias_fix)
}

// optional bool power_on_positive = 14 [default = false];
inline bool LabelSpecificRescaleParameter::has_power_on_positive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LabelSpecificRescaleParameter::set_has_power_on_positive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LabelSpecificRescaleParameter::clear_has_power_on_positive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LabelSpecificRescaleParameter::clear_power_on_positive() {
  power_on_positive_ = false;
  clear_has_power_on_positive();
}
inline bool LabelSpecificRescaleParameter::power_on_positive() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificRescaleParameter.power_on_positive)
  return power_on_positive_;
}
inline void LabelSpecificRescaleParameter::set_power_on_positive(bool value) {
  set_has_power_on_positive();
  power_on_positive_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificRescaleParameter.power_on_positive)
}

// -------------------------------------------------------------------

// InfimumLossParamter

// optional float infimum = 1 [default = 0.25];
inline bool InfimumLossParamter::has_infimum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfimumLossParamter::set_has_infimum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfimumLossParamter::clear_has_infimum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfimumLossParamter::clear_infimum() {
  infimum_ = 0.25f;
  clear_has_infimum();
}
inline float InfimumLossParamter::infimum() const {
  // @@protoc_insertion_point(field_get:caffe.InfimumLossParamter.infimum)
  return infimum_;
}
inline void InfimumLossParamter::set_infimum(float value) {
  set_has_infimum();
  infimum_ = value;
  // @@protoc_insertion_point(field_set:caffe.InfimumLossParamter.infimum)
}

// -------------------------------------------------------------------

// OrdinalRegressionParameter

// optional uint32 k = 1;
inline bool OrdinalRegressionParameter::has_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrdinalRegressionParameter::set_has_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrdinalRegressionParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrdinalRegressionParameter::clear_k() {
  k_ = 0u;
  clear_has_k();
}
inline ::google::protobuf::uint32 OrdinalRegressionParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.OrdinalRegressionParameter.k)
  return k_;
}
inline void OrdinalRegressionParameter::set_k(::google::protobuf::uint32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.OrdinalRegressionParameter.k)
}

// optional string weight_file = 2;
inline bool OrdinalRegressionParameter::has_weight_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrdinalRegressionParameter::set_has_weight_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrdinalRegressionParameter::clear_has_weight_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrdinalRegressionParameter::clear_weight_file() {
  weight_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight_file();
}
inline const ::std::string& OrdinalRegressionParameter::weight_file() const {
  // @@protoc_insertion_point(field_get:caffe.OrdinalRegressionParameter.weight_file)
  return weight_file_.GetNoArena();
}
inline void OrdinalRegressionParameter::set_weight_file(const ::std::string& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.OrdinalRegressionParameter.weight_file)
}
#if LANG_CXX11
inline void OrdinalRegressionParameter::set_weight_file(::std::string&& value) {
  set_has_weight_file();
  weight_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe.OrdinalRegressionParameter.weight_file)
}
#endif
inline void OrdinalRegressionParameter::set_weight_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.OrdinalRegressionParameter.weight_file)
}
inline void OrdinalRegressionParameter::set_weight_file(const char* value, size_t size) {
  set_has_weight_file();
  weight_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.OrdinalRegressionParameter.weight_file)
}
inline ::std::string* OrdinalRegressionParameter::mutable_weight_file() {
  set_has_weight_file();
  // @@protoc_insertion_point(field_mutable:caffe.OrdinalRegressionParameter.weight_file)
  return weight_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrdinalRegressionParameter::release_weight_file() {
  // @@protoc_insertion_point(field_release:caffe.OrdinalRegressionParameter.weight_file)
  clear_has_weight_file();
  return weight_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrdinalRegressionParameter::set_allocated_weight_file(::std::string* weight_file) {
  if (weight_file != NULL) {
    set_has_weight_file();
  } else {
    clear_has_weight_file();
  }
  weight_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.OrdinalRegressionParameter.weight_file)
}

// -------------------------------------------------------------------

// ResizeParameter

// optional uint32 height = 1;
inline bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResizeParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height)
  return height_;
}
inline void ResizeParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height)
}

// optional uint32 width = 2;
inline bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResizeParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width)
  return width_;
}
inline void ResizeParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width)
}

// optional bool is_pyramid_test = 3 [default = false];
inline bool ResizeParameter::has_is_pyramid_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResizeParameter::set_has_is_pyramid_test() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResizeParameter::clear_has_is_pyramid_test() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResizeParameter::clear_is_pyramid_test() {
  is_pyramid_test_ = false;
  clear_has_is_pyramid_test();
}
inline bool ResizeParameter::is_pyramid_test() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.is_pyramid_test)
  return is_pyramid_test_;
}
inline void ResizeParameter::set_is_pyramid_test(bool value) {
  set_has_is_pyramid_test();
  is_pyramid_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.is_pyramid_test)
}

// optional float out_height_scale = 4;
inline bool ResizeParameter::has_out_height_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResizeParameter::set_has_out_height_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResizeParameter::clear_has_out_height_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResizeParameter::clear_out_height_scale() {
  out_height_scale_ = 0;
  clear_has_out_height_scale();
}
inline float ResizeParameter::out_height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_height_scale)
  return out_height_scale_;
}
inline void ResizeParameter::set_out_height_scale(float value) {
  set_has_out_height_scale();
  out_height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_height_scale)
}

// optional float out_width_scale = 5;
inline bool ResizeParameter::has_out_width_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResizeParameter::set_has_out_width_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResizeParameter::clear_has_out_width_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResizeParameter::clear_out_width_scale() {
  out_width_scale_ = 0;
  clear_has_out_width_scale();
}
inline float ResizeParameter::out_width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.out_width_scale)
  return out_width_scale_;
}
inline void ResizeParameter::set_out_width_scale(float value) {
  set_has_out_width_scale();
  out_width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.out_width_scale)
}

// -------------------------------------------------------------------

// MarginInnerProductParameter

// optional uint32 num_output = 1;
inline bool MarginInnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarginInnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarginInnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarginInnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 MarginInnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.num_output)
  return num_output_;
}
inline void MarginInnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.num_output)
}

// optional .caffe.MarginInnerProductParameter.MarginType type = 2 [default = SINGLE];
inline bool MarginInnerProductParameter::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarginInnerProductParameter::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarginInnerProductParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarginInnerProductParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::MarginInnerProductParameter_MarginType MarginInnerProductParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.type)
  return static_cast< ::caffe::MarginInnerProductParameter_MarginType >(type_);
}
inline void MarginInnerProductParameter::set_type(::caffe::MarginInnerProductParameter_MarginType value) {
  assert(::caffe::MarginInnerProductParameter_MarginType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.type)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool MarginInnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarginInnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarginInnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarginInnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& MarginInnerProductParameter::weight_filler() const {
  const ::caffe::FillerParameter* p = weight_filler_;
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.weight_filler)
  return p != NULL ? *p : *reinterpret_cast<const ::caffe::FillerParameter*>(
      &::caffe::_FillerParameter_default_instance_);
}
inline ::caffe::FillerParameter* MarginInnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.MarginInnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline ::caffe::FillerParameter* MarginInnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.MarginInnerProductParameter.weight_filler)
  return weight_filler_;
}
inline void MarginInnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weight_filler_;
  }
  if (weight_filler) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weight_filler = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weight_filler, submessage_arena);
    }
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  weight_filler_ = weight_filler;
  // @@protoc_insertion_point(field_set_allocated:caffe.MarginInnerProductParameter.weight_filler)
}

// optional int32 axis = 4 [default = 1];
inline bool MarginInnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarginInnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarginInnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarginInnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 MarginInnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.axis)
  return axis_;
}
inline void MarginInnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.axis)
}

// optional float base = 5 [default = 1];
inline bool MarginInnerProductParameter::has_base() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarginInnerProductParameter::set_has_base() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarginInnerProductParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarginInnerProductParameter::clear_base() {
  base_ = 1;
  clear_has_base();
}
inline float MarginInnerProductParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.base)
  return base_;
}
inline void MarginInnerProductParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.base)
}

// optional float gamma = 6 [default = 0];
inline bool MarginInnerProductParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarginInnerProductParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarginInnerProductParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarginInnerProductParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float MarginInnerProductParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.gamma)
  return gamma_;
}
inline void MarginInnerProductParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.gamma)
}

// optional float power = 7 [default = 1];
inline bool MarginInnerProductParameter::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarginInnerProductParameter::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarginInnerProductParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarginInnerProductParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float MarginInnerProductParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.power)
  return power_;
}
inline void MarginInnerProductParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.power)
}

// optional int32 iteration = 8 [default = 0];
inline bool MarginInnerProductParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarginInnerProductParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarginInnerProductParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarginInnerProductParameter::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
inline ::google::protobuf::int32 MarginInnerProductParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.iteration)
  return iteration_;
}
inline void MarginInnerProductParameter::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.iteration)
}

// optional float lambda_min = 9 [default = 0];
inline bool MarginInnerProductParameter::has_lambda_min() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarginInnerProductParameter::set_has_lambda_min() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarginInnerProductParameter::clear_has_lambda_min() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarginInnerProductParameter::clear_lambda_min() {
  lambda_min_ = 0;
  clear_has_lambda_min();
}
inline float MarginInnerProductParameter::lambda_min() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.lambda_min)
  return lambda_min_;
}
inline void MarginInnerProductParameter::set_lambda_min(float value) {
  set_has_lambda_min();
  lambda_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.lambda_min)
}

// -------------------------------------------------------------------

// FeatureDecayLossParameter

// optional float decay_threshold = 1 [default = 20];
inline bool FeatureDecayLossParameter::has_decay_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureDecayLossParameter::set_has_decay_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureDecayLossParameter::clear_has_decay_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureDecayLossParameter::clear_decay_threshold() {
  decay_threshold_ = 20;
  clear_has_decay_threshold();
}
inline float FeatureDecayLossParameter::decay_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.FeatureDecayLossParameter.decay_threshold)
  return decay_threshold_;
}
inline void FeatureDecayLossParameter::set_decay_threshold(float value) {
  set_has_decay_threshold();
  decay_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.FeatureDecayLossParameter.decay_threshold)
}

// optional bool force_decay = 2 [default = false];
inline bool FeatureDecayLossParameter::has_force_decay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureDecayLossParameter::set_has_force_decay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureDecayLossParameter::clear_has_force_decay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureDecayLossParameter::clear_force_decay() {
  force_decay_ = false;
  clear_has_force_decay();
}
inline bool FeatureDecayLossParameter::force_decay() const {
  // @@protoc_insertion_point(field_get:caffe.FeatureDecayLossParameter.force_decay)
  return force_decay_;
}
inline void FeatureDecayLossParameter::set_force_decay(bool value) {
  set_has_force_decay();
  force_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.FeatureDecayLossParameter.force_decay)
}

// -------------------------------------------------------------------

// ConfidencePenaltyLossParameter

// optional float beta = 1 [default = 0.1];
inline bool ConfidencePenaltyLossParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfidencePenaltyLossParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfidencePenaltyLossParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfidencePenaltyLossParameter::clear_beta() {
  beta_ = 0.1f;
  clear_has_beta();
}
inline float ConfidencePenaltyLossParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.ConfidencePenaltyLossParameter.beta)
  return beta_;
}
inline void ConfidencePenaltyLossParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConfidencePenaltyLossParameter.beta)
}

// -------------------------------------------------------------------

// FocalLossParameter

// optional .caffe.FocalLossParameter.Type type = 1 [default = ORIGIN];
inline bool FocalLossParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FocalLossParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FocalLossParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FocalLossParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::FocalLossParameter_Type FocalLossParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.type)
  return static_cast< ::caffe::FocalLossParameter_Type >(type_);
}
inline void FocalLossParameter::set_type(::caffe::FocalLossParameter_Type value) {
  assert(::caffe::FocalLossParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.type)
}

// optional float gamma = 2 [default = 2];
inline bool FocalLossParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FocalLossParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FocalLossParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FocalLossParameter::clear_gamma() {
  gamma_ = 2;
  clear_has_gamma();
}
inline float FocalLossParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.gamma)
  return gamma_;
}
inline void FocalLossParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.gamma)
}

// optional float alpha = 3 [default = 1];
inline bool FocalLossParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FocalLossParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FocalLossParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FocalLossParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float FocalLossParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.alpha)
  return alpha_;
}
inline void FocalLossParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.alpha)
}

// optional float beta = 4 [default = 1];
inline bool FocalLossParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FocalLossParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FocalLossParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FocalLossParameter::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
inline float FocalLossParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.FocalLossParameter.beta)
  return beta_;
}
inline void FocalLossParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocalLossParameter.beta)
}

// -------------------------------------------------------------------

// LabelSpecificMarginParameter

// optional .caffe.LabelSpecificMarginParameter.MarginType type = 9 [default = HARD];
inline bool LabelSpecificMarginParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LabelSpecificMarginParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LabelSpecificMarginParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::LabelSpecificMarginParameter_MarginType LabelSpecificMarginParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.type)
  return static_cast< ::caffe::LabelSpecificMarginParameter_MarginType >(type_);
}
inline void LabelSpecificMarginParameter::set_type(::caffe::LabelSpecificMarginParameter_MarginType value) {
  assert(::caffe::LabelSpecificMarginParameter_MarginType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.type)
}

// optional float margin_base = 1 [default = 0];
inline bool LabelSpecificMarginParameter::has_margin_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_margin_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelSpecificMarginParameter::clear_has_margin_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelSpecificMarginParameter::clear_margin_base() {
  margin_base_ = 0;
  clear_has_margin_base();
}
inline float LabelSpecificMarginParameter::margin_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.margin_base)
  return margin_base_;
}
inline void LabelSpecificMarginParameter::set_margin_base(float value) {
  set_has_margin_base();
  margin_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.margin_base)
}

// optional float margin_max = 2 [default = 10];
inline bool LabelSpecificMarginParameter::has_margin_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_margin_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LabelSpecificMarginParameter::clear_has_margin_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LabelSpecificMarginParameter::clear_margin_max() {
  margin_max_ = 10;
  clear_has_margin_max();
}
inline float LabelSpecificMarginParameter::margin_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.margin_max)
  return margin_max_;
}
inline void LabelSpecificMarginParameter::set_margin_max(float value) {
  set_has_margin_max();
  margin_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.margin_max)
}

// optional float power = 3 [default = 1];
inline bool LabelSpecificMarginParameter::has_power() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_power() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LabelSpecificMarginParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LabelSpecificMarginParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float LabelSpecificMarginParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.power)
  return power_;
}
inline void LabelSpecificMarginParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.power)
}

// optional float gamma = 4 [default = 1];
inline bool LabelSpecificMarginParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LabelSpecificMarginParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LabelSpecificMarginParameter::clear_gamma() {
  gamma_ = 1;
  clear_has_gamma();
}
inline float LabelSpecificMarginParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.gamma)
  return gamma_;
}
inline void LabelSpecificMarginParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.gamma)
}

// optional int32 iteration = 5 [default = 0];
inline bool LabelSpecificMarginParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelSpecificMarginParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelSpecificMarginParameter::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
inline ::google::protobuf::int32 LabelSpecificMarginParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.iteration)
  return iteration_;
}
inline void LabelSpecificMarginParameter::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.iteration)
}

// optional bool reset_margin = 6 [default = false];
inline bool LabelSpecificMarginParameter::has_reset_margin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_reset_margin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelSpecificMarginParameter::clear_has_reset_margin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelSpecificMarginParameter::clear_reset_margin() {
  reset_margin_ = false;
  clear_has_reset_margin();
}
inline bool LabelSpecificMarginParameter::reset_margin() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.reset_margin)
  return reset_margin_;
}
inline void LabelSpecificMarginParameter::set_reset_margin(bool value) {
  set_has_reset_margin();
  reset_margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.reset_margin)
}

// optional bool margin_on_test = 7 [default = false];
inline bool LabelSpecificMarginParameter::has_margin_on_test() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_margin_on_test() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LabelSpecificMarginParameter::clear_has_margin_on_test() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LabelSpecificMarginParameter::clear_margin_on_test() {
  margin_on_test_ = false;
  clear_has_margin_on_test();
}
inline bool LabelSpecificMarginParameter::margin_on_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.margin_on_test)
  return margin_on_test_;
}
inline void LabelSpecificMarginParameter::set_margin_on_test(bool value) {
  set_has_margin_on_test();
  margin_on_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.margin_on_test)
}

// optional bool auto_tune = 8 [default = false];
inline bool LabelSpecificMarginParameter::has_auto_tune() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LabelSpecificMarginParameter::set_has_auto_tune() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LabelSpecificMarginParameter::clear_has_auto_tune() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LabelSpecificMarginParameter::clear_auto_tune() {
  auto_tune_ = false;
  clear_has_auto_tune();
}
inline bool LabelSpecificMarginParameter::auto_tune() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificMarginParameter.auto_tune)
  return auto_tune_;
}
inline void LabelSpecificMarginParameter::set_auto_tune(bool value) {
  set_has_auto_tune();
  auto_tune_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificMarginParameter.auto_tune)
}

// -------------------------------------------------------------------

// ChannelScaleParameter

// optional bool do_forward = 1 [default = true];
inline bool ChannelScaleParameter::has_do_forward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelScaleParameter::set_has_do_forward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelScaleParameter::clear_has_do_forward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChannelScaleParameter::clear_do_forward() {
  do_forward_ = true;
  clear_has_do_forward();
}
inline bool ChannelScaleParameter::do_forward() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.do_forward)
  return do_forward_;
}
inline void ChannelScaleParameter::set_do_forward(bool value) {
  set_has_do_forward();
  do_forward_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.do_forward)
}

// optional bool do_backward_feature = 2 [default = true];
inline bool ChannelScaleParameter::has_do_backward_feature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChannelScaleParameter::set_has_do_backward_feature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChannelScaleParameter::clear_has_do_backward_feature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChannelScaleParameter::clear_do_backward_feature() {
  do_backward_feature_ = true;
  clear_has_do_backward_feature();
}
inline bool ChannelScaleParameter::do_backward_feature() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.do_backward_feature)
  return do_backward_feature_;
}
inline void ChannelScaleParameter::set_do_backward_feature(bool value) {
  set_has_do_backward_feature();
  do_backward_feature_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.do_backward_feature)
}

// optional bool do_backward_scale = 3 [default = true];
inline bool ChannelScaleParameter::has_do_backward_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChannelScaleParameter::set_has_do_backward_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChannelScaleParameter::clear_has_do_backward_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChannelScaleParameter::clear_do_backward_scale() {
  do_backward_scale_ = true;
  clear_has_do_backward_scale();
}
inline bool ChannelScaleParameter::do_backward_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.do_backward_scale)
  return do_backward_scale_;
}
inline void ChannelScaleParameter::set_do_backward_scale(bool value) {
  set_has_do_backward_scale();
  do_backward_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.do_backward_scale)
}

// optional bool global_scale = 4 [default = false];
inline bool ChannelScaleParameter::has_global_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelScaleParameter::set_has_global_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelScaleParameter::clear_has_global_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelScaleParameter::clear_global_scale() {
  global_scale_ = false;
  clear_has_global_scale();
}
inline bool ChannelScaleParameter::global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.global_scale)
  return global_scale_;
}
inline void ChannelScaleParameter::set_global_scale(bool value) {
  set_has_global_scale();
  global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.global_scale)
}

// optional float max_global_scale = 5 [default = 1000];
inline bool ChannelScaleParameter::has_max_global_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChannelScaleParameter::set_has_max_global_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChannelScaleParameter::clear_has_max_global_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChannelScaleParameter::clear_max_global_scale() {
  max_global_scale_ = 1000;
  clear_has_max_global_scale();
}
inline float ChannelScaleParameter::max_global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.max_global_scale)
  return max_global_scale_;
}
inline void ChannelScaleParameter::set_max_global_scale(float value) {
  set_has_max_global_scale();
  max_global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.max_global_scale)
}

// optional float min_global_scale = 6 [default = 0];
inline bool ChannelScaleParameter::has_min_global_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelScaleParameter::set_has_min_global_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelScaleParameter::clear_has_min_global_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelScaleParameter::clear_min_global_scale() {
  min_global_scale_ = 0;
  clear_has_min_global_scale();
}
inline float ChannelScaleParameter::min_global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.min_global_scale)
  return min_global_scale_;
}
inline void ChannelScaleParameter::set_min_global_scale(float value) {
  set_has_min_global_scale();
  min_global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.min_global_scale)
}

// optional float init_global_scale = 7 [default = 1];
inline bool ChannelScaleParameter::has_init_global_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelScaleParameter::set_has_init_global_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelScaleParameter::clear_has_init_global_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelScaleParameter::clear_init_global_scale() {
  init_global_scale_ = 1;
  clear_has_init_global_scale();
}
inline float ChannelScaleParameter::init_global_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ChannelScaleParameter.init_global_scale)
  return init_global_scale_;
}
inline void ChannelScaleParameter::set_init_global_scale(float value) {
  set_has_init_global_scale();
  init_global_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ChannelScaleParameter.init_global_scale)
}

// -------------------------------------------------------------------

// LabelSpecificAffineParameter

// optional float scale_base = 1 [default = 1];
inline bool LabelSpecificAffineParameter::has_scale_base() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_scale_base() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LabelSpecificAffineParameter::clear_has_scale_base() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LabelSpecificAffineParameter::clear_scale_base() {
  scale_base_ = 1;
  clear_has_scale_base();
}
inline float LabelSpecificAffineParameter::scale_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_base)
  return scale_base_;
}
inline void LabelSpecificAffineParameter::set_scale_base(float value) {
  set_has_scale_base();
  scale_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_base)
}

// optional float scale_gamma = 2 [default = 0];
inline bool LabelSpecificAffineParameter::has_scale_gamma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_scale_gamma() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelSpecificAffineParameter::clear_has_scale_gamma() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelSpecificAffineParameter::clear_scale_gamma() {
  scale_gamma_ = 0;
  clear_has_scale_gamma();
}
inline float LabelSpecificAffineParameter::scale_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_gamma)
  return scale_gamma_;
}
inline void LabelSpecificAffineParameter::set_scale_gamma(float value) {
  set_has_scale_gamma();
  scale_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_gamma)
}

// optional float scale_power = 3 [default = 1];
inline bool LabelSpecificAffineParameter::has_scale_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_scale_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LabelSpecificAffineParameter::clear_has_scale_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LabelSpecificAffineParameter::clear_scale_power() {
  scale_power_ = 1;
  clear_has_scale_power();
}
inline float LabelSpecificAffineParameter::scale_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_power)
  return scale_power_;
}
inline void LabelSpecificAffineParameter::set_scale_power(float value) {
  set_has_scale_power();
  scale_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_power)
}

// optional float scale_max = 4 [default = 1];
inline bool LabelSpecificAffineParameter::has_scale_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_scale_max() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LabelSpecificAffineParameter::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LabelSpecificAffineParameter::clear_scale_max() {
  scale_max_ = 1;
  clear_has_scale_max();
}
inline float LabelSpecificAffineParameter::scale_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.scale_max)
  return scale_max_;
}
inline void LabelSpecificAffineParameter::set_scale_max(float value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.scale_max)
}

// optional bool transform_test = 5 [default = false];
inline bool LabelSpecificAffineParameter::has_transform_test() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_transform_test() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LabelSpecificAffineParameter::clear_has_transform_test() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LabelSpecificAffineParameter::clear_transform_test() {
  transform_test_ = false;
  clear_has_transform_test();
}
inline bool LabelSpecificAffineParameter::transform_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.transform_test)
  return transform_test_;
}
inline void LabelSpecificAffineParameter::set_transform_test(bool value) {
  set_has_transform_test();
  transform_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.transform_test)
}

// optional uint32 iteration = 6 [default = 0];
inline bool LabelSpecificAffineParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelSpecificAffineParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelSpecificAffineParameter::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
inline ::google::protobuf::uint32 LabelSpecificAffineParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.iteration)
  return iteration_;
}
inline void LabelSpecificAffineParameter::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.iteration)
}

// optional float bias_base = 7 [default = 0];
inline bool LabelSpecificAffineParameter::has_bias_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_bias_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelSpecificAffineParameter::clear_has_bias_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelSpecificAffineParameter::clear_bias_base() {
  bias_base_ = 0;
  clear_has_bias_base();
}
inline float LabelSpecificAffineParameter::bias_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_base)
  return bias_base_;
}
inline void LabelSpecificAffineParameter::set_bias_base(float value) {
  set_has_bias_base();
  bias_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_base)
}

// optional float bias_gamma = 8 [default = 0];
inline bool LabelSpecificAffineParameter::has_bias_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_bias_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LabelSpecificAffineParameter::clear_has_bias_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LabelSpecificAffineParameter::clear_bias_gamma() {
  bias_gamma_ = 0;
  clear_has_bias_gamma();
}
inline float LabelSpecificAffineParameter::bias_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_gamma)
  return bias_gamma_;
}
inline void LabelSpecificAffineParameter::set_bias_gamma(float value) {
  set_has_bias_gamma();
  bias_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_gamma)
}

// optional float bias_power = 9 [default = 1];
inline bool LabelSpecificAffineParameter::has_bias_power() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_bias_power() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LabelSpecificAffineParameter::clear_has_bias_power() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LabelSpecificAffineParameter::clear_bias_power() {
  bias_power_ = 1;
  clear_has_bias_power();
}
inline float LabelSpecificAffineParameter::bias_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_power)
  return bias_power_;
}
inline void LabelSpecificAffineParameter::set_bias_power(float value) {
  set_has_bias_power();
  bias_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_power)
}

// optional float bias_max = 10 [default = 0];
inline bool LabelSpecificAffineParameter::has_bias_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_bias_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LabelSpecificAffineParameter::clear_has_bias_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LabelSpecificAffineParameter::clear_bias_max() {
  bias_max_ = 0;
  clear_has_bias_max();
}
inline float LabelSpecificAffineParameter::bias_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.bias_max)
  return bias_max_;
}
inline void LabelSpecificAffineParameter::set_bias_max(float value) {
  set_has_bias_max();
  bias_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.bias_max)
}

// optional float power_base = 11 [default = 1];
inline bool LabelSpecificAffineParameter::has_power_base() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_power_base() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LabelSpecificAffineParameter::clear_has_power_base() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LabelSpecificAffineParameter::clear_power_base() {
  power_base_ = 1;
  clear_has_power_base();
}
inline float LabelSpecificAffineParameter::power_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_base)
  return power_base_;
}
inline void LabelSpecificAffineParameter::set_power_base(float value) {
  set_has_power_base();
  power_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_base)
}

// optional float power_gamma = 12 [default = 0];
inline bool LabelSpecificAffineParameter::has_power_gamma() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_power_gamma() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LabelSpecificAffineParameter::clear_has_power_gamma() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LabelSpecificAffineParameter::clear_power_gamma() {
  power_gamma_ = 0;
  clear_has_power_gamma();
}
inline float LabelSpecificAffineParameter::power_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_gamma)
  return power_gamma_;
}
inline void LabelSpecificAffineParameter::set_power_gamma(float value) {
  set_has_power_gamma();
  power_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_gamma)
}

// optional float power_power = 13 [default = -1];
inline bool LabelSpecificAffineParameter::has_power_power() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_power_power() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LabelSpecificAffineParameter::clear_has_power_power() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LabelSpecificAffineParameter::clear_power_power() {
  power_power_ = -1;
  clear_has_power_power();
}
inline float LabelSpecificAffineParameter::power_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_power)
  return power_power_;
}
inline void LabelSpecificAffineParameter::set_power_power(float value) {
  set_has_power_power();
  power_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_power)
}

// optional float power_min = 14 [default = 0.5];
inline bool LabelSpecificAffineParameter::has_power_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_power_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LabelSpecificAffineParameter::clear_has_power_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LabelSpecificAffineParameter::clear_power_min() {
  power_min_ = 0.5f;
  clear_has_power_min();
}
inline float LabelSpecificAffineParameter::power_min() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.power_min)
  return power_min_;
}
inline void LabelSpecificAffineParameter::set_power_min(float value) {
  set_has_power_min();
  power_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.power_min)
}

// optional bool auto_tune = 15 [default = false];
inline bool LabelSpecificAffineParameter::has_auto_tune() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_auto_tune() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LabelSpecificAffineParameter::clear_has_auto_tune() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LabelSpecificAffineParameter::clear_auto_tune() {
  auto_tune_ = false;
  clear_has_auto_tune();
}
inline bool LabelSpecificAffineParameter::auto_tune() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.auto_tune)
  return auto_tune_;
}
inline void LabelSpecificAffineParameter::set_auto_tune(bool value) {
  set_has_auto_tune();
  auto_tune_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.auto_tune)
}

// optional bool reset = 16 [default = false];
inline bool LabelSpecificAffineParameter::has_reset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LabelSpecificAffineParameter::set_has_reset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LabelSpecificAffineParameter::clear_has_reset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LabelSpecificAffineParameter::clear_reset() {
  reset_ = false;
  clear_has_reset();
}
inline bool LabelSpecificAffineParameter::reset() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAffineParameter.reset)
  return reset_;
}
inline void LabelSpecificAffineParameter::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAffineParameter.reset)
}

// -------------------------------------------------------------------

// LabelSpecificHardMarginParameter

// optional float positive_weight = 1 [default = 0.5];
inline bool LabelSpecificHardMarginParameter::has_positive_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelSpecificHardMarginParameter::set_has_positive_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelSpecificHardMarginParameter::clear_has_positive_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelSpecificHardMarginParameter::clear_positive_weight() {
  positive_weight_ = 0.5f;
  clear_has_positive_weight();
}
inline float LabelSpecificHardMarginParameter::positive_weight() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificHardMarginParameter.positive_weight)
  return positive_weight_;
}
inline void LabelSpecificHardMarginParameter::set_positive_weight(float value) {
  set_has_positive_weight();
  positive_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificHardMarginParameter.positive_weight)
}

// -------------------------------------------------------------------

// LabelSpecificStatisticsParameter

// optional bool scale_for_angle = 1 [default = true];
inline bool LabelSpecificStatisticsParameter::has_scale_for_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelSpecificStatisticsParameter::set_has_scale_for_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelSpecificStatisticsParameter::clear_has_scale_for_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelSpecificStatisticsParameter::clear_scale_for_angle() {
  scale_for_angle_ = true;
  clear_has_scale_for_angle();
}
inline bool LabelSpecificStatisticsParameter::scale_for_angle() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificStatisticsParameter.scale_for_angle)
  return scale_for_angle_;
}
inline void LabelSpecificStatisticsParameter::set_scale_for_angle(bool value) {
  set_has_scale_for_angle();
  scale_for_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificStatisticsParameter.scale_for_angle)
}

// optional float scale_factor = 2 [default = 30];
inline bool LabelSpecificStatisticsParameter::has_scale_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelSpecificStatisticsParameter::set_has_scale_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelSpecificStatisticsParameter::clear_has_scale_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelSpecificStatisticsParameter::clear_scale_factor() {
  scale_factor_ = 30;
  clear_has_scale_factor();
}
inline float LabelSpecificStatisticsParameter::scale_factor() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificStatisticsParameter.scale_factor)
  return scale_factor_;
}
inline void LabelSpecificStatisticsParameter::set_scale_factor(float value) {
  set_has_scale_factor();
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificStatisticsParameter.scale_factor)
}

// -------------------------------------------------------------------

// LabelSpecificAddParameter

// optional float bias = 1 [default = 0];
inline bool LabelSpecificAddParameter::has_bias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelSpecificAddParameter::set_has_bias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelSpecificAddParameter::clear_has_bias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelSpecificAddParameter::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float LabelSpecificAddParameter::bias() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias)
  return bias_;
}
inline void LabelSpecificAddParameter::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias)
}

// optional bool transform_test = 2 [default = false];
inline bool LabelSpecificAddParameter::has_transform_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelSpecificAddParameter::set_has_transform_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelSpecificAddParameter::clear_has_transform_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelSpecificAddParameter::clear_transform_test() {
  transform_test_ = false;
  clear_has_transform_test();
}
inline bool LabelSpecificAddParameter::transform_test() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.transform_test)
  return transform_test_;
}
inline void LabelSpecificAddParameter::set_transform_test(bool value) {
  set_has_transform_test();
  transform_test_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.transform_test)
}

// optional float bias_base = 3 [default = 0];
inline bool LabelSpecificAddParameter::has_bias_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelSpecificAddParameter::set_has_bias_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelSpecificAddParameter::clear_has_bias_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelSpecificAddParameter::clear_bias_base() {
  bias_base_ = 0;
  clear_has_bias_base();
}
inline float LabelSpecificAddParameter::bias_base() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_base)
  return bias_base_;
}
inline void LabelSpecificAddParameter::set_bias_base(float value) {
  set_has_bias_base();
  bias_base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_base)
}

// optional float bias_gamma = 4 [default = 0];
inline bool LabelSpecificAddParameter::has_bias_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LabelSpecificAddParameter::set_has_bias_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LabelSpecificAddParameter::clear_has_bias_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LabelSpecificAddParameter::clear_bias_gamma() {
  bias_gamma_ = 0;
  clear_has_bias_gamma();
}
inline float LabelSpecificAddParameter::bias_gamma() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_gamma)
  return bias_gamma_;
}
inline void LabelSpecificAddParameter::set_bias_gamma(float value) {
  set_has_bias_gamma();
  bias_gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_gamma)
}

// optional float bias_power = 5 [default = 1];
inline bool LabelSpecificAddParameter::has_bias_power() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LabelSpecificAddParameter::set_has_bias_power() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LabelSpecificAddParameter::clear_has_bias_power() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LabelSpecificAddParameter::clear_bias_power() {
  bias_power_ = 1;
  clear_has_bias_power();
}
inline float LabelSpecificAddParameter::bias_power() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_power)
  return bias_power_;
}
inline void LabelSpecificAddParameter::set_bias_power(float value) {
  set_has_bias_power();
  bias_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_power)
}

// optional float bias_min = 6 [default = 0];
inline bool LabelSpecificAddParameter::has_bias_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LabelSpecificAddParameter::set_has_bias_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LabelSpecificAddParameter::clear_has_bias_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LabelSpecificAddParameter::clear_bias_min() {
  bias_min_ = 0;
  clear_has_bias_min();
}
inline float LabelSpecificAddParameter::bias_min() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_min)
  return bias_min_;
}
inline void LabelSpecificAddParameter::set_bias_min(float value) {
  set_has_bias_min();
  bias_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_min)
}

// optional float bias_max = 7 [default = 0];
inline bool LabelSpecificAddParameter::has_bias_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LabelSpecificAddParameter::set_has_bias_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LabelSpecificAddParameter::clear_has_bias_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LabelSpecificAddParameter::clear_bias_max() {
  bias_max_ = 0;
  clear_has_bias_max();
}
inline float LabelSpecificAddParameter::bias_max() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.bias_max)
  return bias_max_;
}
inline void LabelSpecificAddParameter::set_bias_max(float value) {
  set_has_bias_max();
  bias_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.bias_max)
}

// optional uint32 iteration = 8 [default = 0];
inline bool LabelSpecificAddParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LabelSpecificAddParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LabelSpecificAddParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LabelSpecificAddParameter::clear_iteration() {
  iteration_ = 0u;
  clear_has_iteration();
}
inline ::google::protobuf::uint32 LabelSpecificAddParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.LabelSpecificAddParameter.iteration)
  return iteration_;
}
inline void LabelSpecificAddParameter::set_iteration(::google::protobuf::uint32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelSpecificAddParameter.iteration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SnapshotFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SnapshotFormat>() {
  return ::caffe::SolverParameter_SnapshotFormat_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverType>() {
  return ::caffe::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParamSpec_DimCheckMode>() {
  return ::caffe::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::LossParameter_NormalizationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LossParameter_NormalizationMode>() {
  return ::caffe::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::BatchNormParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BatchNormParameter_Engine>() {
  return ::caffe::BatchNormParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_Engine>() {
  return ::caffe::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker>() {
  return ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
}
template <> struct is_proto_enum< ::caffe::DataParameter_DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DataParameter_DB>() {
  return ::caffe::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::caffe::EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EltwiseParameter_EltwiseOp>() {
  return ::caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::HingeLossParameter_Norm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::HingeLossParameter_Norm>() {
  return ::caffe::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_Engine>() {
  return ::caffe::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReductionParameter_ReductionOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReductionParameter_ReductionOp>() {
  return ::caffe::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SoftmaxParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxParameter_Engine>() {
  return ::caffe::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::TanHParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TanHParameter_Engine>() {
  return ::caffe::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::MILParameter_MILType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MILParameter_MILType>() {
  return ::caffe::MILParameter_MILType_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_PoolMethod>() {
  return ::caffe::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_Engine>() {
  return ::caffe::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_LayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_LayerType>() {
  return ::caffe::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_DimCheckMode>() {
  return ::caffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::V0LayerParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::BNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BNParameter_Engine>() {
  return ::caffe::BNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PairwiseParameter_PairwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PairwiseParameter_PairwiseOp>() {
  return ::caffe::PairwiseParameter_PairwiseOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::LargeMarginInnerProductParameter_LargeMarginType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LargeMarginInnerProductParameter_LargeMarginType>() {
  return ::caffe::LargeMarginInnerProductParameter_LargeMarginType_descriptor();
}
template <> struct is_proto_enum< ::caffe::MarginInnerProductParameter_MarginType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MarginInnerProductParameter_MarginType>() {
  return ::caffe::MarginInnerProductParameter_MarginType_descriptor();
}
template <> struct is_proto_enum< ::caffe::FocalLossParameter_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FocalLossParameter_Type>() {
  return ::caffe::FocalLossParameter_Type_descriptor();
}
template <> struct is_proto_enum< ::caffe::LabelSpecificMarginParameter_MarginType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LabelSpecificMarginParameter_MarginType>() {
  return ::caffe::LabelSpecificMarginParameter_MarginType_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_5flow_5fprecision_2eproto__INCLUDED
